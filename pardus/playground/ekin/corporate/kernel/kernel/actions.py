#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2005-2009 TUBITAK/UEKAE
# Licensed under the GNU General Public License, version 2.
# See the file http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt

from pisi.actionsapi import autotools
from pisi.actionsapi import pisitools
from pisi.actionsapi import shelltools
from pisi.actionsapi import get
import re

WorkDir = "linux-2.6.30"

try:
    EXTRAVERSION = re.split("2.[0-9].[0-9]{2}([._].*)", get.srcVERSION())[1]
except IndexError:
    EXTRAVERSION = ""

NoStrip = "/"


def setup():
    # Remove *.orig
    shelltools.system("find . -name \"*.orig\" | xargs rm -f")

    # Branding
    if EXTRAVERSION is not None:
        pisitools.dosed("Makefile", "EXTRAVERSION =.*", "EXTRAVERSION = %s-%s" % (EXTRAVERSION, get.srcRELEASE()))
    else:
        pisitools.dosed("Makefile", "EXTRAVERSION =.*", "EXTRAVERSION = -%s" % get.srcRELEASE())

    autotools.make("oldconfig")

def build():
    autotools.make("CONFIG_DEBUG_SECTION_MISMATCH=y")

def install():
    suffix = "%s-%s" % (get.srcVERSION(), get.srcRELEASE())

    # install modules
    autotools.rawInstall("INSTALL_MOD_PATH=%s/" % get.installDIR(), "modules_install")

    # install kernel headers
    autotools.rawInstall("INSTALL_HDR_PATH=%s/usr" % get.installDIR(), "headers_install")

    # remove all directories other than asm/asm-generic and linux
    for directory in shelltools.ls("%s/usr/include/" % get.installDIR()):
        if directory not in ["asm", "asm-generic", "linux"]:
            pisitools.removeDir("/usr/include/%s" % directory)

    # remove wrong symlinks
    pisitools.remove("/lib/modules/%s/source" % suffix)
    pisitools.remove("/lib/modules/%s/build" % suffix)

    # create true symlinks
    pisitools.dosym("/usr/src/linux-%s/" % suffix, "/lib/modules/%s/source" % suffix)
    pisitools.dosym("/usr/src/linux-%s/" % suffix, "/lib/modules/%s/build" % suffix)

    # insert System.map, bzImage and Module.symvers
    pisitools.insinto("/lib/modules/%s/" % suffix, "System.map")
    pisitools.insinto("/lib/modules/%s/" % suffix, "Module.symvers")
    pisitools.insinto("/boot/", "arch/x86/boot/bzImage", "kernel-%s" % suffix)

    # prepare stripped and compressed vmlinux for domU usage
    #shelltools.system("/usr/bin/strip vmlinux -o vmlinux.stripped")
    #shelltools.system("/bin/gzip vmlinux.stripped -c > vmlinuz")
    #pisitools.insinto("/boot/", "vmlinuz", "kernel-%s-xen" % suffix)

    # cp source to installDIR for kernel-source package
    pisitools.dodir("/usr/src")
    shelltools.copytree("../%s/" % WorkDir, "%s/usr/src/linux-%s/" % (get.installDIR(), suffix))

    # create linux symlink
    pisitools.dosym("/usr/src/linux-%s/" % suffix, "/usr/src/linux")

    # Clean the on in installDIR not compiled one and prepare kernel for module compilation
    shelltools.cd("%s/usr/src/linux-%s" % (get.installDIR(), suffix))
    autotools.make("clean")
    autotools.make("modules_prepare")

    # generate mkinitramfs
    shelltools.system("/sbin/mkinitramfs kernel=%s --full --root-dir=%s --output=/%s/boot" % (suffix, get.installDIR(), get.installDIR()))

    # remove modules.* files, they will autogenerated on next boot
    pisitools.remove("/lib/modules/%s/modules.*" % suffix)
