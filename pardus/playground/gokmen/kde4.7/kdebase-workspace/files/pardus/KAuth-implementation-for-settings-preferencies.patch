Index: kde-workspace-4.7.1/kcontrol/keyboard/CMakeLists.txt
===================================================================
--- kde-workspace-4.7.1.orig/kcontrol/keyboard/CMakeLists.txt
+++ kde-workspace-4.7.1/kcontrol/keyboard/CMakeLists.txt
@@ -124,6 +124,21 @@ target_link_libraries(kcm_keyboard
     ${text_paint_LIB}
 )
 
+
+
+#### KAuth helper and actions ####
+kde4_add_executable(kcmkeyboardhelper helper.cpp)
+target_link_libraries(kcmkeyboardhelper ${KDE4_KDECORE_LIBS})
+install(TARGETS kcmkeyboardhelper DESTINATION ${LIBEXEC_INSTALL_DIR})
+
+kde4_install_auth_helper_files(kcmkeyboardhelper org.kde.kcontrol.kcmkeyboard root)
+
+kde4_install_auth_actions(org.kde.kcontrol.kcmkeyboard kcmkeyboard.actions)
+
+
+
+
+
 install(TARGETS kcm_keyboard DESTINATION ${PLUGIN_INSTALL_DIR} )
 
 install( FILES kcm_keyboard.desktop DESTINATION ${SERVICES_INSTALL_DIR} )
Index: kde-workspace-4.7.1/kcontrol/keyboard/helper.cpp
===================================================================
--- /dev/null
+++ kde-workspace-4.7.1/kcontrol/keyboard/helper.cpp
@@ -0,0 +1,70 @@
+#include "helper.h"
+#include <iostream>
+#include <QStringList>
+#include <QFile>
+#include <QTextStream>
+#include <QDebug>
+
+ActionReply Helper::createReply(int code, const QVariantMap *returnData)
+{
+    ActionReply reply;
+
+    if (code) {
+        reply = ActionReply::HelperError;
+        reply.setErrorCode(code);
+    } else {
+        reply = ActionReply::SuccessReply;
+    }
+
+    if (returnData)
+        reply.setData(*returnData);
+
+    return reply;
+}
+
+
+bool Helper::writeKeyboard(const QString &layouts, const QString &variants)
+{
+    QString xorgFile = "/etc/X11/xorg.conf.d/00-configured-keymap.conf";
+
+    QString xorgContent;
+    xorgContent =   "# This file is generated by KCM Keyboard Module.\n"
+                    "# If you want to change settings in this file, edit\n"
+                    "# the file 10-keyboard.conf in the same directory.\n\n"
+                    "Section \"InputClass\"\n"
+                    "       Identifier\t\"Configured Keymap\"\n"
+                    "       MatchisKeyboard\t\"on\"\n"
+                    "       MatchTag\t\"use_configured_keymap\"\n\n"
+                    "       Option\t\"xkb_layout\"\t\"" + layouts + "\"\n"
+                    "       Option\t\"xkb_variant\"\t\"" + variants + "\"\n"
+                    "EndSection\n";
+
+    // open file to write
+    QFile file(xorgFile);
+    if( !file.open( QIODevice::WriteOnly | QIODevice::Text)) {
+        qDebug() << "Failed to write.";
+        return false;
+    }
+
+    // content of fields is saved to the new file
+    QTextStream out(&file);
+    out << xorgContent;
+    file.close();
+
+    return true;
+}
+
+ActionReply Helper::managekeyboard(QVariantMap args)
+{
+    int code = 0;
+
+    QString layouts = args.value("layouts").toString();
+    QString variants = args.value("variants").toString();
+
+    code = (writeKeyboard(layouts,variants) ? 0 : WriteKeyboardError);
+    return createReply(code);
+}
+
+
+
+KDE4_AUTH_HELPER_MAIN("org.kde.kcontrol.kcmkeyboard", Helper)
Index: kde-workspace-4.7.1/kcontrol/keyboard/helper.h
===================================================================
--- /dev/null
+++ kde-workspace-4.7.1/kcontrol/keyboard/helper.h
@@ -0,0 +1,17 @@
+#include <kauth.h>
+#define WriteKeyboardError 1
+
+using namespace KAuth;
+
+class Helper : public QObject
+{
+    Q_OBJECT
+
+    public slots:
+        ActionReply managekeyboard(QVariantMap args);
+
+    private:
+        bool writeKeyboard(const QString &layouts, const QString &variants);
+        ActionReply createReply(int code, const QVariantMap *returnData = 0);
+
+};
Index: kde-workspace-4.7.1/kcontrol/keyboard/kcmkeyboard.actions
===================================================================
--- /dev/null
+++ kde-workspace-4.7.1/kcontrol/keyboard/kcmkeyboard.actions
@@ -0,0 +1,11 @@
+[Domain]
+Name=Keyboard Manager Control Module
+Icon=preferences-system-login
+
+[org.kde.kcontrol.kcmkeyboard.managekeyboard]
+Name=Save the Keyboard Manager settings
+Name[tr]=Klave yönetici ayarlarını kaydet
+Description=Administrator authorization is required to change the Keyboard Manager settings
+Description[tr]=Klavye yöneticisi ayarlarını değiştirmek için yönetici hakları gerekiyor
+Policy=auth_admin
+Persistence=session
Index: kde-workspace-4.7.1/kcontrol/keyboard/kcm_keyboard.cpp
===================================================================
--- kde-workspace-4.7.1.orig/kcontrol/keyboard/kcm_keyboard.cpp
+++ kde-workspace-4.7.1/kcontrol/keyboard/kcm_keyboard.cpp
@@ -23,6 +23,7 @@
 #include <kaboutdata.h>
 #include <kpluginfactory.h>
 #include <kpluginloader.h>
+#include <kmessagebox.h>
 
 #include <QtDBus/QDBusMessage>
 #include <QtDBus/QDBusConnection>
@@ -63,12 +64,15 @@ KCMKeyboard::KCMKeyboard(QWidget *parent
 
   keyboardConfig = new KeyboardConfig();
 
+  systemWide = new QCheckBox(i18n("Save settings system &wide"));
+
   QVBoxLayout *layout = new QVBoxLayout(this);
   layout->setMargin(0);
   layout->setSpacing(KDialog::spacingHint());
 
   widget = new KCMKeyboardWidget(rules, keyboardConfig, componentData(), args, parent);
   layout->addWidget(widget);
+  layout->addWidget(systemWide);
 
   connect(widget, SIGNAL(changed(bool)), this, SIGNAL(changed(bool)));
 
@@ -105,4 +109,11 @@ void KCMKeyboard::save()
 
 	QDBusMessage message = QDBusMessage::createSignal(KEYBOARD_DBUS_OBJECT_PATH, KEYBOARD_DBUS_SERVICE_NAME, KEYBOARD_DBUS_CONFIG_RELOAD_MESSAGE);
     QDBusConnection::sessionBus().send(message);
+ 
+    if (systemWide->isChecked()) {
+        int replyErrorCode = keyboardConfig->saveSystemWide();
+        if (replyErrorCode != 0)
+            KMessageBox::error(this, i18n("KAuth returned an error code: %1", replyErrorCode));
+    };
+
 }
Index: kde-workspace-4.7.1/kcontrol/keyboard/kcm_keyboard.h
===================================================================
--- kde-workspace-4.7.1.orig/kcontrol/keyboard/kcm_keyboard.h
+++ kde-workspace-4.7.1/kcontrol/keyboard/kcm_keyboard.h
@@ -25,6 +25,7 @@
 class KCMKeyboardWidget;
 class KeyboardConfig;
 class Rules;
+class QCheckBox;
 
 class KCMKeyboard: public KCModule
 {
@@ -42,6 +43,8 @@ private:
 	Rules* rules;
 	KeyboardConfig* keyboardConfig;
 	KCMKeyboardWidget *widget;
+    QCheckBox *systemWide;
 };
 
+
 #endif /* KCM_KEYBOARD_H_ */
Index: kde-workspace-4.7.1/kcontrol/keyboard/keyboard_config.cpp
===================================================================
--- kde-workspace-4.7.1.orig/kcontrol/keyboard/keyboard_config.cpp
+++ kde-workspace-4.7.1/kcontrol/keyboard/keyboard_config.cpp
@@ -18,9 +18,13 @@
 
 #include "keyboard_config.h"
 
+#include "helper.h"
+
 #include <ksharedconfig.h>
 #include <kconfiggroup.h>
 #include <kdebug.h>
+#include <QMessageBox>
+#include <QDebug>
 
 
 static const char* SWITCHING_POLICIES[] = {"Global", "Desktop", "WinClass", "Window", NULL };
@@ -182,3 +186,27 @@ QList<LayoutUnit> KeyboardConfig::getExt
 
 	return layouts.mid(layoutLoopCount, layouts.size());
 }
+
+int KeyboardConfig::saveSystemWide()
+{
+
+    KAuth::Action action("org.kde.kcontrol.kcmkeyboard.managekeyboard");
+    action.setHelperID("org.kde.kcontrol.kcmkeyboard");
+
+    QVariantMap helperargs;
+    QStringList layoutList;
+    QStringList variantList;
+
+    foreach(const LayoutUnit& layoutUnit, layouts) {
+    	layoutList.append(layoutUnit.layout);
+    	variantList.append(layoutUnit.variant);
+    }
+
+    helperargs["layouts"] = layoutList.join(LIST_SEPARATOR);
+    helperargs["variants"] = variantList.join(LIST_SEPARATOR);
+
+    action.setArguments(helperargs);
+
+    KAuth::ActionReply reply = action.execute();
+    return reply.errorCode();
+}
