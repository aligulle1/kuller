--- simgear/misc/stopwatch.hxx.orig	2011-02-01 00:37:11.609000050 +0200
+++ simgear/misc/stopwatch.hxx	2011-02-01 00:37:19.372000044 +0200
@@ -42,10 +42,6 @@
 # error This library requires C++
 #endif
 
-#ifdef HAVE_CONFIG_H
-#  include <simgear_config.h>
-#endif
-
 #if defined(__linux__) && ! defined(HAVE_GETRUSAGE)
 #  define HAVE_GETRUSAGE
 #endif
--- simgear/structure/SGSmplhist.hxx.orig	2011-02-01 00:38:29.769000042 +0200
+++ simgear/structure/SGSmplhist.hxx	2011-02-01 00:38:36.358000046 +0200
@@ -16,9 +16,6 @@
 Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
-#ifdef HAVE_CONFIG_H
-#include <simgear_config.h>
-#endif
 #ifndef SampleHistogram_h
 #ifdef __GNUG__
 #pragma interface
--- simgear/timing/timestamp.cxx.orig	2011-02-01 00:44:15.248000048 +0200
+++ simgear/timing/timestamp.cxx	2011-02-01 00:44:26.366000049 +0200
@@ -24,83 +24,6 @@
 // $Id$
 
 
-#ifdef HAVE_CONFIG_H
-#  include <simgear_config.h>
-#endif
-
-#include <simgear/compiler.h>
-
-#include <ctime>
-
-#ifdef HAVE_SYS_TIMEB_H
-#  include <sys/timeb.h> // for ftime() and struct timeb
-#endif
-#ifdef HAVE_UNISTD_H
-#  include <unistd.h>    // for gettimeofday() and the _POSIX_TIMERS define
-#endif
-#ifdef HAVE_SYS_TIME_H
-#  include <sys/time.h>  // for get/setitimer, gettimeofday, struct timeval
-#endif
-
-#if defined(_POSIX_TIMERS) && (0 < _POSIX_TIMERS)
-#  include <time.h>
-#  include <errno.h>
-#endif
-
-#ifdef WIN32
-#  include <windows.h>
-#  if defined( __CYGWIN__ ) || defined( __CYGWIN32__ )
-#    define NEAR /* */
-#    define FAR  /* */
-#  endif
-#  include <mmsystem.h>
-#endif
-
 #include "timestamp.hxx"
 
-void SGTimeStamp::stamp() {
-#ifdef _WIN32
-    unsigned int t;
-    t = timeGetTime();
-    _sec = t / 1000;
-    _nsec = ( t - ( _sec * 1000 ) ) * 1000 * 1000;
-#elif defined(_POSIX_TIMERS) && (0 < _POSIX_TIMERS)
-    struct timespec ts;
-#if defined(_POSIX_MONOTONIC_CLOCK)
-    static clockid_t clockid = CLOCK_MONOTONIC;
-    static bool firstTime = true;
-    if (firstTime) {
-        firstTime = false;
-        // For the first time test if the monotonic clock is available.
-        // If so use this if not use the realtime clock.
-        if (-1 == clock_gettime(clockid, &ts) && errno == EINVAL)
-            clockid = CLOCK_REALTIME;
-    }
-    clock_gettime(clockid, &ts);
-#else
-    clock_gettime(CLOCK_REALTIME, &ts);
-#endif
-    _sec = ts.tv_sec;
-    _nsec = ts.tv_nsec;
-#elif defined( HAVE_GETTIMEOFDAY )
-    struct timeval current;
-    struct timezone tz;
-    // sg_timestamp currtime;
-    gettimeofday(&current, &tz);
-    _sec = current.tv_sec;
-    _nsec = current.tv_usec * 1000;
-#elif defined( HAVE_GETLOCALTIME )
-    SYSTEMTIME current;
-    GetLocalTime(&current);
-    _sec = current.wSecond;
-    _nsec = current.wMilliseconds * 1000 * 1000;
-#elif defined( HAVE_FTIME )
-    struct timeb current;
-    ftime(&current);
-    _sec = current.time;
-    _nsec = current.millitm * 1000 * 1000;
-#else
-# error Port me
-#endif
-}
-
+// empty, all inline class now.
--- simgear/timing/timestamp.hxx.orig	2011-02-01 00:44:23.406000046 +0200
+++ simgear/timing/timestamp.hxx	2011-02-01 00:45:18.307000054 +0200
@@ -32,12 +32,41 @@
 # error This library requires C++
 #endif
 
+#define HAVE_GETTIMEOFDAY 1
+#define HAVE_SYS_TIME_H 1
+
 #include <iosfwd>
 #include <iomanip>
 #include <sstream>
 #include <simgear/compiler.h>
 #include <simgear/math/SGCMath.hxx>
 
+#include <ctime>
+
+#ifdef HAVE_SYS_TIMEB_H
+#  include <sys/timeb.h> // for ftime() and struct timeb
+#endif
+#ifdef HAVE_UNISTD_H
+#  include <unistd.h>    // for gettimeofday() and the _POSIX_TIMERS define
+#endif
+#ifdef HAVE_SYS_TIME_H
+#  include <sys/time.h>  // for get/setitimer, gettimeofday, struct timeval
+#endif
+
+#if defined(_POSIX_TIMERS) && (0 < _POSIX_TIMERS)
+#  include <time.h>
+#  include <errno.h>
+#endif
+
+#ifdef WIN32
+#  include <windows.h>
+#  if defined( __CYGWIN__ ) || defined( __CYGWIN32__ )
+#    define NEAR /* */
+#    define FAR  /* */
+#  endif
+#  include <mmsystem.h>
+#endif
+
 /**
  * The SGTimeStamp class allows you to mark and compare time stamps
  * with nanosecond accuracy (if your system has support for this
@@ -76,7 +105,51 @@
 //     { setTime(sec); }
 
     /** Update stored time to current time (seconds and nanoseconds) */
-    void stamp();
+    void stamp() {
+#ifdef _WIN32
+        unsigned int t;
+        t = timeGetTime();
+        _sec = t / 1000;
+        _nsec = ( t - ( _sec * 1000 ) ) * 1000 * 1000;
+#elif defined(_POSIX_TIMERS) && (0 < _POSIX_TIMERS)
+        struct timespec ts;
+#if defined(_POSIX_MONOTONIC_CLOCK)
+        static clockid_t clockid = CLOCK_MONOTONIC;
+        static bool firstTime = true;
+        if (firstTime) {
+            firstTime = false;
+            // For the first time test if the monotonic clock is available.
+            // If so use this if not use the realtime clock.
+            if (-1 == clock_gettime(clockid, &ts) && errno == EINVAL)
+                clockid = CLOCK_REALTIME;
+        }
+        clock_gettime(clockid, &ts);
+#else
+        clock_gettime(CLOCK_REALTIME, &ts);
+#endif
+        _sec = ts.tv_sec;
+        _nsec = ts.tv_nsec;
+#elif defined( HAVE_GETTIMEOFDAY )
+        struct timeval current;
+        struct timezone tz;
+        // sg_timestamp currtime;
+        gettimeofday(&current, &tz);
+        _sec = current.tv_sec;
+        _nsec = current.tv_usec * 1000;
+#elif defined( HAVE_GETLOCALTIME )
+        SYSTEMTIME current;
+        GetLocalTime(&current);
+        _sec = current.wSecond;
+        _nsec = current.wMilliseconds * 1000 * 1000;
+#elif defined( HAVE_FTIME )
+        struct timeb current;
+        ftime(&current);
+        _sec = current.time;
+        _nsec = current.millitm * 1000 * 1000;
+#else
+# error Port me
+#endif
+    }
 
     /** Set the time from a double value */
     void setTime(const double& seconds)
