exec=/sbin/iscsid
prog=iscsid
config=/etc/iscsi/iscsid.conf
lockfile=/var/lock/subsys/$prog


force_start() {
    echo -n $"Starting $prog: "
    modprobe -q iscsi_tcp
    modprobe -q ib_iser
    modprobe -q cxgb3i
    modprobe -q bnx2i
    modprobe -q be2iscsi
    daemon $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

use_discoveryd() {
    grep -qrs "discovery.sendtargets.use_discoveryd = Yes" /var/lib/iscsi/send_targets
    if [ $? -eq 0 ] ; then
 	return 0
    fi

    grep -qrs "discovery.isns.use_discoveryd = Yes" /var/lib/iscsi/isns
    if [ $? -eq 0 ] ; then
 	return 0
    fi

    return 1
}

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6

    # only start if nodes are setup to startup automatically, root is iscsi,
    # or if iscsid is managing the sessions.
    grep -qrs "node.startup = automatic" /var/lib/iscsi/nodes
    if [ $? -eq 0 ] || root_is_iscsi || use_discoveryd ; then
        force_start
        return $?
    fi

    return 0
}

stop() {
    if use_discoveryd ; then
	iscsiadm -k 0 2>/dev/null
    fi

    declare -a iparams=( $(iscsiadm -m session 2>/dev/null | egrep "tcp|iser|bnx2i|cxgb3i|be2iscsi") )
    if [[ -n "${iparams[*]}" ]]; then
        # We have active sessions, so don't stop iscsid!!
        echo -n $"Not stopping $prog: iscsi sessions still active"
        warning $"Not stopping $prog: iscsi sessions still active"
        echo
        return 0
    fi

    echo -n $"Stopping $prog: "
 
    iscsiadm -k 0 2>/dev/null
    echo

    # only remove the iscsi drivers when offload is used
    rmmod bnx2i 2>/dev/null
    rmmod cnic 2>/dev/null

    rmmod cxgb3i 2>/dev/null

    modprobe -r be2iscsi 2>/dev/null

    modprobe -r ib_iser 2>/dev/null
    modprobe -r iscsi_tcp 2>/dev/null

    rm -f $lockfile
    return 0
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

restart() {
    rh_status_q
    use_force_start=$?

    stop
    # if iscsid was running then make sure it starts up
    if [ "$use_force_start" -eq 0 ] ; then
	force_start
    else
	start
    fi
}

reload() {
    return 3
}

force_reload() {
    restart
}
