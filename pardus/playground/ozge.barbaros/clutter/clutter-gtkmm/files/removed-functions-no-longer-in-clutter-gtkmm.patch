diff -Nuar clutter-gtkmm-0.9.6.orig//clutter-gtk/clutter-gtkmm/utility.cc clutter-gtkmm-0.9.6/clutter-gtk/clutter-gtkmm/utility.cc
--- clutter-gtkmm-0.9.6.orig//clutter-gtk/clutter-gtkmm/utility.cc	2010-01-07 23:00:41.000000000 +0200
+++ clutter-gtkmm-0.9.6/clutter-gtk/clutter-gtkmm/utility.cc	2011-06-23 00:44:29.941655893 +0300
@@ -20,119 +20,124 @@
 #include <clutter-gtkmm/utility.h>
 #include <clutter-gtk/clutter-gtk.h>
 
+//ClutterActor *tmp;
+
 namespace Clutter
 {
 namespace Gtk
 {
 
-void get_fg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_fg_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_bg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_bg_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_text_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_text_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_base_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_base_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_text_aa_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_text_aa_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_light_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_light_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_mid_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_mid_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-void get_dark_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
-{
-  gtk_clutter_get_dark_color(widget.gobj(), GtkStateType(state), color.gobj());
-}
-
-Glib::RefPtr<Texture> create_texture_from_pixbuf(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
-{
-  return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_pixbuf(pixbuf->gobj())));
-}
-
-Glib::RefPtr<Texture> create_texture_from_stock(::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size)
-{
-  return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_stock(widget.gobj(), stock_id.c_str(), GtkIconSize(int(size)))));
-}
-
-Glib::RefPtr<Texture> create_texture_from_icon_name(::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size)
-{
-  return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_icon_name(widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)))));
-}
-
-#ifdef GLIBMM_EXCEPTIONS_ENABLED
-void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
-#else
-void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf, std::auto_ptr<Glib::Error>& error)
-#endif
-{
-  GError* gerror = 0;
-  gtk_clutter_texture_set_from_pixbuf(texture->gobj(), pixbuf->gobj(), &gerror);
-
-#ifdef GLIBMM_EXCEPTIONS_ENABLED
-  if(gerror)
-    ::Glib::Error::throw_exception(gerror);
-#else
-  if(gerror)
-    error = ::Glib::Error::throw_exception(gerror);
-#endif // GLIBMM_EXCEPTIONS_ENABLED
-}
-
-#ifdef GLIBMM_EXCEPTIONS_ENABLED
-void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size)
-#else
-void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size, std::auto_ptr<Glib::Error>& error)
-#endif
-{
-  GError* gerror = 0;
-  gtk_clutter_texture_set_from_stock(texture->gobj(), widget.gobj(), stock_id.c_str(), GtkIconSize(int(size)), &gerror);
-
-#ifdef GLIBMM_EXCEPTIONS_ENABLED
-  if(gerror)
-    ::Glib::Error::throw_exception(gerror);
-#else
-  if(gerror)
-    error = ::Glib::Error::throw_exception(gerror);
-#endif // GLIBMM_EXCEPTIONS_ENABLED
-}
-
-#ifdef GLIBMM_EXCEPTIONS_ENABLED
-void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size)
-#else
-void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size, std::auto_ptr<Glib::Error>& error)
-#endif
-{
-  GError* gerror = 0;
-  gtk_clutter_texture_set_from_icon_name(texture->gobj(), widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)), &gerror);
-
-#ifdef GLIBMM_EXCEPTIONS_ENABLED
-  if(gerror)
-    ::Glib::Error::throw_exception(gerror);
-#else
-  if(gerror)
-    error = ::Glib::Error::throw_exception(gerror);
-#endif // GLIBMM_EXCEPTIONS_ENABLED
-}
+//void get_fg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_fg_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_bg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_bg_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_text_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_text_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_base_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_base_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_text_aa_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_text_aa_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_light_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_light_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_mid_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_mid_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//void get_dark_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color)
+//{
+//  gtk_clutter_get_dark_color(widget.gobj(), GtkStateType(state), color.gobj());
+//}
+
+//Glib::RefPtr<Texture> create_texture_from_pixbuf(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
+//{
+//  return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_pixbuf(pixbuf->gobj())));
+//}
+
+//Glib::RefPtr<Texture> create_texture_from_stock(::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size)
+//{
+//  return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_stock(widget.gobj(), stock_id.c_str(), GtkIconSize(int(size)))));
+//}
+
+//Glib::RefPtr<Texture> create_texture_from_icon_name(::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size)
+//{
+//  return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_icon_name(widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)))));
+//}
+
+//#ifdef GLIBMM_EXCEPTIONS_ENABLED
+//void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
+//#else
+//void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf, std::auto_ptr<Glib::Error>& error)
+//#endif
+//{
+//  GError* gerror = 0;
+//  tmp = gtk_clutter_texture_new ();
+//  gtk_clutter_texture_set_from_pixbuf(GTK_CLUTTER_TEXTURE (tmp), pixbuf->gobj(), &gerror);
+
+//#ifdef GLIBMM_EXCEPTIONS_ENABLED
+//  if(gerror)
+//    ::Glib::Error::throw_exception(gerror);
+//#else
+//  if(gerror)
+//    error = ::Glib::Error::throw_exception(gerror);
+//#endif // GLIBMM_EXCEPTIONS_ENABLED
+//}
+
+//#ifdef GLIBMM_EXCEPTIONS_ENABLED
+//void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size)
+//#else
+//void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size, std::auto_ptr<Glib::Error>& error)
+//#endif
+//{
+//  GError* gerror = 0;
+//  tmp = gtk_clutter_texture_new ();
+//  gtk_clutter_texture_set_from_stock(GTK_CLUTTER_TEXTURE (tmp), widget.gobj(), stock_id.c_str(), GtkIconSize(int(size)), &gerror);
+
+//#ifdef GLIBMM_EXCEPTIONS_ENABLED
+//  if(gerror)
+//    ::Glib::Error::throw_exception(gerror);
+//#else
+//  if(gerror)
+//    error = ::Glib::Error::throw_exception(gerror);
+//#endif // GLIBMM_EXCEPTIONS_ENABLED
+//}
+
+//#ifdef GLIBMM_EXCEPTIONS_ENABLED
+//void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size)
+//#else
+//void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size, std::auto_ptr<Glib::Error>& error)
+//#endif
+//{
+//  GError* gerror = 0;
+//  tmp = gtk_clutter_texture_new ();
+//  gtk_clutter_texture_set_from_icon_name(GTK_CLUTTER_TEXTURE (tmp), widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)), &gerror);
+
+//#ifdef GLIBMM_EXCEPTIONS_ENABLED
+//  if(gerror)
+//    ::Glib::Error::throw_exception(gerror);
+//#else
+//  if(gerror)
+//    error = ::Glib::Error::throw_exception(gerror);
+//#endif // GLIBMM_EXCEPTIONS_ENABLED
+//}
 
 } //namespace Gtk
 } //namespace Clutter
diff -Nuar clutter-gtkmm-0.9.6.orig//clutter-gtk/clutter-gtkmm/utility.h clutter-gtkmm-0.9.6/clutter-gtk/clutter-gtkmm/utility.h
--- clutter-gtkmm-0.9.6.orig//clutter-gtk/clutter-gtkmm/utility.h	2010-01-07 23:00:41.000000000 +0200
+++ clutter-gtkmm-0.9.6/clutter-gtk/clutter-gtkmm/utility.h	2011-06-23 00:47:35.099163393 +0300
@@ -27,20 +27,20 @@
 namespace Gtk
 {
 
-void get_fg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_bg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_text_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_base_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_text_aa_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_light_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_mid_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-void get_dark_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
-Glib::RefPtr<Texture> create_texture_from_pixbuf(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);
-Glib::RefPtr<Texture> create_texture_from_stock(::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size);
-Glib::RefPtr<Texture> create_texture_from_icon_name(::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size);
-void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);
-void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size);
-void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size);
+//void get_fg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_bg_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_text_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_base_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_text_aa_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_light_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_mid_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//void get_dark_color(::Gtk::Widget& widget, ::Gtk::StateType state, Color& color);
+//Glib::RefPtr<Texture> create_texture_from_pixbuf(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);
+//Glib::RefPtr<Texture> create_texture_from_stock(::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size);
+//Glib::RefPtr<Texture> create_texture_from_icon_name(::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size);
+//void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);
+//void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size);
+//void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size);
 
 } //namespace Gtk
 } //namespace Clutter
diff -Nuar clutter-gtkmm-0.9.6.orig//clutter-gtk/src/embed.hg clutter-gtkmm-0.9.6/clutter-gtk/src/embed.hg
--- clutter-gtkmm-0.9.6.orig//clutter-gtk/src/embed.hg	2010-05-06 00:00:47.000000000 +0300
+++ clutter-gtkmm-0.9.6/clutter-gtk/src/embed.hg	2011-06-23 00:52:50.780795394 +0300
@@ -36,16 +36,17 @@
  * embedded Clutter::Stage actor. This is needed for Clutter to be able to 
  * paint on the Clutter::Gtk::Embed widget.
  */ 
-class Embed :
-  public ::Gtk::Container
+class Embed : public ::Gtk::Container
 {
-  _CLASS_GTKOBJECT(Embed, GtkClutterEmbed, GTK_CLUTTER_EMBED, ::Gtk::Container, GtkContainer)
-
+  _CLASS_GOBJECT(Embed, GtkClutterEmbed, GTK_CLUTTER_EMBED, ::Gtk::Container, GtkContainer)
 public:
   _CTOR_DEFAULT
 
 #m4 _CONVERSION(`ClutterActor*',`Glib::RefPtr<Stage>',`Glib::wrap(CLUTTER_STAGE($3), false)')
+
+#m4 _CONVERSION(`ClutterActor*',`Glib::RefPtr<const Stage>',`Glib::wrap(CLUTTER_STAGE(($3)), false)')
   _WRAP_METHOD(Glib::RefPtr<Stage> get_stage(), gtk_clutter_embed_get_stage, refreturn)
+  _WRAP_METHOD(Glib::RefPtr<const Stage> get_stage() const, gtk_clutter_embed_get_stage, refreturn, constversion)
 };
 
 } // namespace Gtk
