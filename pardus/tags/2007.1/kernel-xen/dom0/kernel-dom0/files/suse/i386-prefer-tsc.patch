Subject: i386: Prefer TSC as clock
From: ak@suse.de

Some profiling on i386 shows that i386 wastes a lot of time
in the PM timer when doing gettimeofday. At least on most non
NUMA Intel systems this isn't needed because the TSC is synchronized
and can be just used instead.

This ports over the TSC preference logic from i386 to preferably
use TSC over other timers.

The APIC check code is a bit XAPIC centric - if there is a Intel system
that doesn't use XAPIC/clustered mode but doesn't have synchronized
TSC there might be a problem. Only candidate would be old Unisys
ES6000 but I think even those should be ok? 

Cc:  john stultz <johnstul@us.ibm.com>
Cc:  "Protasevich, Natalie" <Natalie.Protasevich@unisys.com>


Signed-off-by: Andi Kleen <ak@suse.de>

Index: linux-2.6.16/arch/i386/kernel/apic.c
===================================================================
--- linux-2.6.16.orig/arch/i386/kernel/apic.c
+++ linux-2.6.16/arch/i386/kernel/apic.c
@@ -1267,6 +1267,55 @@ int setup_profiling_timer(unsigned int m
 }
 
 /*
+ * oem_force_hpet_timer -- force HPET mode for some boxes.
+ *
+ * Thus far, the major user of this is IBM's Summit2 series:
+ *
+ * Clustered boxes may have unsynced TSC problems if they are
+ * multi-chassis. Use available data to take a good guess.
+ * If in doubt, go HPET.
+ */
+
+__cpuinit int oem_force_hpet_timer(void)
+{
+	int i, clusters, zeros;
+	unsigned id;
+	DECLARE_BITMAP(clustermap, NUM_APIC_CLUSTERS);
+
+	bitmap_zero(clustermap, NUM_APIC_CLUSTERS);
+
+	for (i = 0; i < NR_CPUS; i++) {
+		id = bios_cpu_apicid[i];
+		if (id != BAD_APICID)
+			__set_bit(APIC_CLUSTERID(id), clustermap);
+	}
+
+	/* Problem:  Partially populated chassis may not have CPUs in some of
+	 * the APIC clusters they have been allocated.  Only present CPUs have
+	 * bios_cpu_apicid entries, thus causing zeroes in the bitmap.  Since
+	 * clusters are allocated sequentially, count zeros only if they are
+	 * bounded by ones.
+	 */
+	clusters = 0;
+	zeros = 0;
+	for (i = 0; i < NUM_APIC_CLUSTERS; i++) {
+		if (test_bit(i, clustermap)) {
+			clusters += 1 + zeros;
+			zeros = 0;
+		} else
+			++zeros;
+	}
+
+	/*
+	 * If clusters > 2, then should be multi-chassis.  Return 1 for HPET.
+	 * Else return 0 to use TSC.
+	 * May have to revisit this when multi-core + hyperthreaded CPUs come
+	 * out, but AFAIK this will work even for them.
+	 */
+	return (clusters > 2);
+}
+
+/*
  * This interrupt should _never_ happen with our APIC/SMP architecture
  */
 fastcall void smp_spurious_interrupt(struct pt_regs *regs)
Index: linux-2.6.16/include/asm-i386/hpet.h
===================================================================
--- linux-2.6.16.orig/include/asm-i386/hpet.h
+++ linux-2.6.16/include/asm-i386/hpet.h
@@ -102,6 +102,8 @@ extern int is_hpet_enabled(void);
 extern int is_hpet_capable(void);
 extern int hpet_readl(unsigned long a);
 
+extern int oem_force_hpet_timer(void);
+
 #ifdef CONFIG_HPET_EMULATE_RTC
 extern int hpet_mask_rtc_irq_bit(unsigned long bit_mask);
 extern int hpet_set_rtc_irq_bit(unsigned long bit_mask);
Index: linux-2.6.16/arch/i386/kernel/timers/timer.c
===================================================================
--- linux-2.6.16.orig/arch/i386/kernel/timers/timer.c
+++ linux-2.6.16/arch/i386/kernel/timers/timer.c
@@ -2,6 +2,7 @@
 #include <linux/kernel.h>
 #include <linux/string.h>
 #include <asm/timer.h>
+#include <asm/hpet.h>
 
 #ifdef CONFIG_HPET_TIMER
 /*
@@ -46,6 +47,24 @@ void clock_fallback(void)
 	cur_timer = &timer_pit;
 }
 
+/*
+ * Make an educated guess if the TSC is trustworthy and synchronized
+ * over all CPUs.
+ */
+__cpuinit int unsynchronized_tsc(void)
+{
+#ifdef CONFIG_SMP
+	if (oem_force_hpet_timer())
+		return 1;
+ 	/* Intel systems are normally all synchronized. Exceptions
+ 	   are handled in the OEM check above. */
+ 	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL)
+ 		return 0;
+#endif
+ 	/* Assume multi socket systems are not synchronized */
+ 	return num_present_cpus() > 1;
+}
+
 /* iterates through the list of timers, returning the first 
  * one that initializes successfully.
  */
@@ -53,6 +72,12 @@ struct timer_opts* __init select_timer(v
 {
 	int i = 0;
 	
+	/* Prefer TSC if possible because it's fastest */
+	if (clock_override[0] == 0 && !unsynchronized_tsc()) { 
+		if (timer_tsc_init.init(clock_override) == 0)
+			return timer_tsc_init.opts;
+	}
+
 	/* find most preferred working timer */
 	while (timers[i]) {
 		if (timers[i]->init)
Index: linux-2.6.16/include/asm-i386/apicdef.h
===================================================================
--- linux-2.6.16.orig/include/asm-i386/apicdef.h
+++ linux-2.6.16/include/asm-i386/apicdef.h
@@ -113,6 +113,14 @@
 
 #define MAX_IO_APICS 64
 
+#define XAPIC_DEST_CPUS_SHIFT	4
+#define XAPIC_DEST_CPUS_MASK	((1u << XAPIC_DEST_CPUS_SHIFT) - 1)
+#define XAPIC_DEST_CLUSTER_MASK	(XAPIC_DEST_CPUS_MASK << XAPIC_DEST_CPUS_SHIFT)
+#define APIC_CLUSTER(apicid)	((apicid) & XAPIC_DEST_CLUSTER_MASK)
+#define APIC_CLUSTERID(apicid)	(APIC_CLUSTER(apicid) >> XAPIC_DEST_CPUS_SHIFT)
+#define APIC_CPUID(apicid)	((apicid) & XAPIC_DEST_CPUS_MASK)
+#define NUM_APIC_CLUSTERS	((BAD_APICID + 1) >> XAPIC_DEST_CPUS_SHIFT)
+
 /*
  * the local APIC register structure, memory mapped. Not terribly well
  * tested, but we might eventually use this one in the future - the
Index: linux-2.6.16/include/asm-i386/smp.h
===================================================================
--- linux-2.6.16.orig/include/asm-i386/smp.h
+++ linux-2.6.16/include/asm-i386/smp.h
@@ -88,6 +88,7 @@ static __inline int logical_smp_processo
 	return GET_APIC_LOGICAL_ID(*(unsigned long *)(APIC_BASE+APIC_LDR));
 }
 
+
 #endif
 
 extern int __cpu_disable(void);
@@ -101,4 +102,11 @@ extern void __cpu_die(unsigned int cpu);
 #define NO_PROC_ID		0xFF		/* No processor magic marker */
 
 #endif
+
+#ifndef __ASSEMBLY__
+
+extern u8 bios_cpu_apicid[];
+
+#endif
+
 #endif
