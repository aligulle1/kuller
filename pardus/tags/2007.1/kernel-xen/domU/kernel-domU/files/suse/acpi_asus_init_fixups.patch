From: Bjorn Helgaas <bjorn.helgaas@hp.com>
Subject: Remove __init from asus_acpi .add and .remove funcs

Even though the devices claimed by asus_acpi.c can not
be hot-plugged, the driver registration infrastructure allows the .add()
and .remove() methods to be called at any time while the driver is
registered.  So remove __init and __exit from them.

Signed-off-by: Thomas Renninger <trenn@suse.de>
Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>

diff -r f29511a2a0ce drivers/acpi/asus_acpi.c
--- a/drivers/acpi/asus_acpi.c	Mon Mar  6 12:40:14 2006 -0500
+++ b/drivers/acpi/asus_acpi.c	Mon Mar  6 12:41:58 2006 -0500
@@ -911,7 +911,7 @@ typedef int (proc_writefunc) (struct fil
 			      unsigned long count, void *data);
 
 static int
-__init asus_proc_add(char *name, proc_writefunc * writefunc,
+asus_proc_add(char *name, proc_writefunc * writefunc,
 		     proc_readfunc * readfunc, mode_t mode,
 		     struct acpi_device *device)
 {
@@ -930,7 +930,7 @@ __init asus_proc_add(char *name, proc_wr
 	return 0;
 }
 
-static int __init asus_hotk_add_fs(struct acpi_device *device)
+static int asus_hotk_add_fs(struct acpi_device *device)
 {
 	struct proc_dir_entry *proc;
 	mode_t mode;
@@ -1123,7 +1123,7 @@ static int __init asus_model_match(char 
  * This function is used to initialize the hotk with right values. In this
  * method, we can make all the detection we want, and modify the hotk struct
  */
-static int __init asus_hotk_get_info(void)
+static int asus_hotk_get_info(void)
 {
 	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
 	struct acpi_buffer dsdt = { ACPI_ALLOCATE_BUFFER, NULL };
@@ -1230,7 +1230,7 @@ static int __init asus_hotk_get_info(voi
 	return AE_OK;
 }
 
-static int __init asus_hotk_check(void)
+static int asus_hotk_check(void)
 {
 	int result = 0;
 
@@ -1248,7 +1248,7 @@ static int __init asus_hotk_check(void)
 	return result;
 }
 
-static int __init asus_hotk_add(struct acpi_device *device)
+static int asus_hotk_add(struct acpi_device *device)
 {
 	acpi_status status = AE_OK;
 	int result;
