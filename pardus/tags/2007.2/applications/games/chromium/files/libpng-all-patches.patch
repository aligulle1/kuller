--- Chromium-0.9/support/glpng/src/png/pngconf.h.all-patches	2001-02-07 22:07:21.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/pngconf.h	2006-11-15 11:26:37.000000000 -0700
@@ -442,6 +442,7 @@ typedef z_stream FAR *  png_zstreamp; 
 #   define CVT_PTR(ptr) (png_far_to_near(png_ptr,ptr,CHECK))
 #   define CVT_PTR_NOCHECK(ptr) (png_far_to_near(png_ptr,ptr,NOCHECK))
 #   define png_strcpy _fstrcpy
+#   define png_strncpy _fstrncpy    /* Added to v 1.2.6 */
 #   define png_strlen _fstrlen
 #   define png_memcmp _fmemcmp      /* SJT: added */
 #   define png_memcpy _fmemcpy
@@ -450,6 +451,7 @@ typedef z_stream FAR *  png_zstreamp; 
 #   define CVT_PTR(ptr)         (ptr)
 #   define CVT_PTR_NOCHECK(ptr) (ptr)
 #   define png_strcpy strcpy
+#   define png_strncpy strncpy   /* Added to v 1.2.6 */
 #   define png_strlen strlen
 #   define png_memcmp memcmp     /* SJT: added */
 #   define png_memcpy memcpy
--- Chromium-0.9/support/glpng/src/png/pngpread.c.all-patches	2001-02-07 22:05:02.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/pngpread.c	2006-11-15 11:26:37.000000000 -0700
@@ -133,7 +133,7 @@ png_push_read_chunk(png_structp png_ptr,
       }
 
       png_push_fill_buffer(png_ptr, chunk_length, 4);
-      png_ptr->push_length = png_get_uint_32(chunk_length);
+      png_ptr->push_length = png_get_uint_31(png_ptr,chunk_length);
       png_reset_crc(png_ptr);
       png_crc_read(png_ptr, png_ptr->chunk_name, 4);
       png_ptr->flags |= PNG_FLAG_HAVE_CHUNK_HEADER;
@@ -464,6 +464,11 @@ png_push_save_buffer(png_structp png_ptr
       png_size_t new_max;
       png_bytep old_buffer;
 
+      if (png_ptr->save_buffer_size > PNG_SIZE_MAX - 
+         (png_ptr->current_buffer_size + 256))
+      {
+        png_error(png_ptr, "Potential overflow of save_buffer");
+      }
       new_max = png_ptr->save_buffer_size + png_ptr->current_buffer_size + 256;
       old_buffer = png_ptr->save_buffer;
       png_ptr->save_buffer = (png_bytep)png_malloc(png_ptr, 
@@ -507,8 +512,7 @@ png_push_read_IDAT(png_structp png_ptr)
       }
 
       png_push_fill_buffer(png_ptr, chunk_length, 4);
-      png_ptr->push_length = png_get_uint_32(chunk_length);
-
+      png_ptr->push_length = png_get_uint_31(png_ptr,chunk_length);
       png_reset_crc(png_ptr);
       png_crc_read(png_ptr, png_ptr->chunk_name, 4);
       png_ptr->flags |= PNG_FLAG_HAVE_CHUNK_HEADER;
--- Chromium-0.9/support/glpng/src/png/pngread.c.all-patches	2001-02-07 22:05:23.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/pngread.c	2006-11-15 11:26:37.000000000 -0700
@@ -142,7 +142,7 @@ png_read_info(png_structp png_ptr, png_i
       png_uint_32 length;
 
       png_read_data(png_ptr, chunk_length, 4);
-      length = png_get_uint_32(chunk_length);
+      length = png_get_uint_31(png_ptr,chunk_length);
 
       png_reset_crc(png_ptr);
       png_crc_read(png_ptr, png_ptr->chunk_name, 4);
@@ -373,7 +373,7 @@ png_read_row(png_structp png_ptr, png_by
             png_crc_finish(png_ptr, 0);
 
             png_read_data(png_ptr, chunk_length, 4);
-            png_ptr->idat_size = png_get_uint_32(chunk_length);
+	    png_ptr->idat_size = png_get_uint_31(png_ptr,chunk_length);
 
             png_reset_crc(png_ptr);
             png_crc_read(png_ptr, png_ptr->chunk_name, 4);
--- Chromium-0.9/support/glpng/src/png/pngrutil.c.all-patches	2001-02-07 22:06:56.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/pngrutil.c	2006-11-15 11:26:37.000000000 -0700
@@ -14,6 +14,14 @@
 #define PNG_INTERNAL
 #include "png.h"
 
+png_uint_32 /* PRIVATE */
+png_get_uint_31(png_structp png_ptr, png_bytep buf)
+{
+   png_uint_32 i = png_get_uint_32(buf);
+   if (i > PNG_UINT_31_MAX)
+     png_error(png_ptr, "PNG unsigned integer out of range.\n");
+   return (i);
+}
 #ifndef PNG_READ_BIG_ENDIAN_SUPPORTED
 /* Grab an unsigned 32-bit integer from a buffer in big-endian format. */
 png_uint_32
@@ -391,7 +399,7 @@ png_handle_gAMA(png_structp png_ptr, png
       /* Should be an error, but we can cope with it */
       png_warning(png_ptr, "Out of place gAMA chunk");
 
-   else if (info_ptr != NULL && info_ptr->valid & PNG_INFO_gAMA
+   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
 #if defined(PNG_READ_sRGB_SUPPORTED)
       && !(info_ptr->valid & PNG_INFO_sRGB)
 #endif
@@ -463,7 +471,7 @@ png_handle_sBIT(png_structp png_ptr, png
       /* Should be an error, but we can cope with it */
       png_warning(png_ptr, "Out of place sBIT chunk");
    }
-   else if (info_ptr != NULL && info_ptr->valid & PNG_INFO_sBIT)
+   if (info_ptr != NULL && info_ptr->valid & PNG_INFO_sBIT)
    {
       png_warning(png_ptr, "Duplicate sBIT chunk");
       png_crc_finish(png_ptr, length);
@@ -524,7 +532,7 @@ png_handle_cHRM(png_structp png_ptr, png
       /* Should be an error, but we can cope with it */
       png_warning(png_ptr, "Missing PLTE before cHRM");
 
-   else if (info_ptr != NULL && info_ptr->valid & PNG_INFO_cHRM
+   if (info_ptr != NULL && info_ptr->valid & PNG_INFO_cHRM
 #if defined(PNG_READ_sRGB_SUPPORTED)
       && !(info_ptr->valid & PNG_INFO_sRGB)
 #endif
@@ -747,7 +755,8 @@ png_handle_tRNS(png_structp png_ptr, png
          /* Should be an error, but we can cope with it */
          png_warning(png_ptr, "Missing PLTE before tRNS");
       }
-      else if (length > png_ptr->num_palette)
+      if (length > (png_uint_32)png_ptr->num_palette ||
+          length > PNG_MAX_PALETTE_LENGTH)
       {
          png_warning(png_ptr, "Incorrect tRNS chunk length");
          png_crc_finish(png_ptr, length);
--- Chromium-0.9/support/glpng/src/png/png.h.all-patches	2006-11-15 11:28:58.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/png.h	2006-11-15 11:31:09.000000000 -0700
@@ -401,6 +401,13 @@ typedef struct png_info_struct
 typedef png_info FAR * png_infop;
 typedef png_info FAR * FAR * png_infopp;
 
+/* Maximum positive integer used in PNG is (2^31)-1 */
+#define PNG_UINT_31_MAX ((png_uint_32)0x7fffffffL)
+#define PNG_UINT_32_MAX (~((png_uint_32)0))
+#define PNG_SIZE_MAX (~((png_size_t)0))
+/* PNG_MAX_UINT is deprecated; use PNG_UINT_31_MAX instead. */
+#define PNG_MAX_UINT PNG_UINT_31_MAX
+
 /* These describe the color_type field in png_info. */
 /* color type masks */
 #define PNG_COLOR_MASK_PALETTE    1
@@ -1580,6 +1587,8 @@ PNG_EXTERN png_int_32 png_get_int_32 PNG
 PNG_EXTERN png_uint_32 png_get_uint_32 PNGARG((png_bytep buf));
 PNG_EXTERN png_uint_16 png_get_uint_16 PNGARG((png_bytep buf));
 #endif /* PNG_READ_BIG_ENDIAN_SUPPORTED */
+PNG_EXTERN png_uint_32 png_get_uint_31 PNGARG((png_structp png_ptr,
+  png_bytep buf));
 
 /* Initialize png_ptr struct for writing, and allocate any other memory.
  * (old interface - NOT DLL EXPORTED).
--- Chromium-0.9/support/glpng/src/png/pngrtran.c.all-patches	2001-02-07 22:06:20.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/pngrtran.c	2006-11-15 11:26:37.000000000 -0700
@@ -1660,8 +1660,8 @@ png_do_read_filler(png_row_infop row_inf
          /* This changes the data from GG to GGXX */
          if (flags & PNG_FLAG_FILLER_AFTER)
          {
-            png_bytep sp = row + (png_size_t)row_width;
-            png_bytep dp = sp  + (png_size_t)row_width;
+            png_bytep sp = row + (png_size_t)row_width * 2;
+            png_bytep dp = sp  + (png_size_t)row_width * 2;
             for (i = 1; i < row_width; i++)
             {
                *(--dp) = hi_filler;
@@ -1676,8 +1676,8 @@ png_do_read_filler(png_row_infop row_inf
          /* This changes the data from GG to XXGG */
          else
          {
-            png_bytep sp = row + (png_size_t)row_width;
-            png_bytep dp = sp  + (png_size_t)row_width;
+            png_bytep sp = row + (png_size_t)row_width * 2;
+            png_bytep dp = sp  + (png_size_t)row_width * 2;
             for (i = 0; i < row_width; i++)
             {
                *(--dp) = *(--sp);
@@ -1733,8 +1733,8 @@ png_do_read_filler(png_row_infop row_inf
          /* This changes the data from RRGGBB to RRGGBBXX */
          if (flags & PNG_FLAG_FILLER_AFTER)
          {
-            png_bytep sp = row + (png_size_t)row_width * 3;
-            png_bytep dp = sp  + (png_size_t)row_width;
+            png_bytep sp = row + (png_size_t)row_width * 6;
+            png_bytep dp = sp  + (png_size_t)row_width * 2;
             for (i = 1; i < row_width; i++)
             {
                *(--dp) = hi_filler;
@@ -1753,8 +1753,8 @@ png_do_read_filler(png_row_infop row_inf
          /* This changes the data from RRGGBB to XXRRGGBB */
          else
          {
-            png_bytep sp = row + (png_size_t)row_width * 3;
-            png_bytep dp = sp  + (png_size_t)row_width;
+            png_bytep sp = row + (png_size_t)row_width * 6;
+            png_bytep dp = sp  + (png_size_t)row_width * 2;
             for (i = 0; i < row_width; i++)
             {
                *(--dp) = *(--sp);
--- Chromium-0.9/support/glpng/src/png/pngerror.c.all-patches	2001-02-07 22:04:39.000000000 -0700
+++ Chromium-0.9/support/glpng/src/png/pngerror.c	2006-11-15 11:26:37.000000000 -0700
@@ -84,7 +84,7 @@ png_format_buffer(png_structp png_ptr, p
    else {
       buffer[iout++] = ':';
       buffer[iout++] = ' ';
-      png_memcpy(buffer+iout, message, 64);
+      png_strncpy(buffer+iout, message, 63);
       buffer[iout+63] = 0;
    }
 }
