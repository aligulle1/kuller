--- lame-3.97/frontend/get_audio.c	2006-09-24 13:53:32.000000000 +0000
+++ lame-3.97/frontend/get_audio.c	2007-03-25 22:14:05.000000000 +0000
@@ -85,7 +85,7 @@
 int     lame_decode_initfile(const char *fullname,
                              mp3data_struct * const mp3data);
 #else
-int     lame_decode_initfile(FILE * fd, mp3data_struct * mp3data);
+int     lame_decode_initfile(FILE * fd, mp3data_struct * mp3data, int *enc_delay, int *enc_padding);
 #endif
 
 /* read mp3 file until mpglib returns one frame of PCM data */
@@ -98,7 +98,7 @@
 static int read_samples_mp3(lame_global_flags * const gfp, FILE * const musicin,
                             short int mpg123pcm[2][1152], int num_chan);
 void    CloseSndFile(sound_file_format input, FILE * musicin);
-FILE   *OpenSndFile(lame_global_flags * gfp, char *);
+FILE   *OpenSndFile(lame_global_flags * gfp, char *, int *enc_delay, int *enc_padding);
 
 
 /* Replacement for forward fseek(,,SEEK_CUR), because fseek() fails on pipes */
@@ -174,14 +174,14 @@
 
 
 void
-init_infile(lame_global_flags * gfp, char *inPath)
+init_infile(lame_global_flags * gfp, char *inPath, int *enc_delay, int *enc_padding)
 {
     /* open the input file */
     count_samples_carefully = 0;
     num_samples_read=0;
     pcmbitwidth=in_bitwidth;
     pcmswapbytes=swapbytes;
-    musicin = OpenSndFile(gfp, inPath);
+    musicin = OpenSndFile(gfp, inPath, enc_delay, enc_padding);
 }
 
 void
@@ -522,7 +522,7 @@
 
 
 FILE   *
-OpenSndFile(lame_global_flags * gfp, char *inPath)
+OpenSndFile(lame_global_flags * gfp, char *inPath, int *enc_delay, int *enc_padding)
 {
     char   *lpszFileName = inPath;
     FILE   *musicin;
@@ -547,7 +547,7 @@
 	    }
             exit(1);
         }
-        if (-1 == lame_decode_initfile(musicin, &mp3input_data)) {
+        if (-1 == lame_decode_initfile(musicin, &mp3input_data, &enc_delay, &enc_padding)) {
 	    if( silent < 10 ) {
 		fprintf(stderr, "Error reading headers in mp3 input file %s.\n",
 			lpszFileName);
@@ -1286,7 +1286,7 @@
 
 
 FILE   *
-OpenSndFile(lame_global_flags * gfp, char *inPath)
+OpenSndFile(lame_global_flags * gfp, char *inPath, int *enc_delay, int *enc_padding)
 {
     FILE   *musicin;
 
@@ -1318,7 +1318,7 @@
         }
 #endif
 #ifdef HAVE_MPGLIB
-        if (-1 == lame_decode_initfile(musicin, &mp3input_data)) {
+        if (-1 == lame_decode_initfile(musicin, &mp3input_data, enc_delay, enc_padding)) {
 	    if( silent < 10 ) {
 		fprintf(stderr, "Error reading headers in mp3 input file %s.\n",
 			inPath);
@@ -1419,20 +1419,20 @@
     if ((p[1] & 0xE0) != 0xE0)
         return 0;       /* next 3 bits are also */
     if ((p[1] & 0x18) == 0x08)
-        return 0;       /* no MPEG-1, -2 or -2.5 */        
+        return 0;       /* no MPEG-1, -2 or -2.5 */
     if ((p[1] & 0x06) == 0x00)
         return 0;       /* no Layer I, II and III */
 #ifndef USE_LAYER_1
-    if ((p[1] & 0x06) == 0x03*2)
+    if ((p[1] & 0x06) == 0x06)
 	return 0; /* layer1 is not supported */
 #endif
 #ifndef USE_LAYER_2
-    if ((p[1] & 0x06) == 0x02*2)
+    if ((p[1] & 0x06) == 0x04)
 	return 0; /* layer1 is not supported */
 #endif
-    if (!(((p[1] & 0x06) == 0x03*2 && input_format == sf_mp1)
-	  || ((p[1] & 0x06) == 0x02*2 && input_format == sf_mp2)
-	  || ((p[1] & 0x06) == 0x01*2 && input_format == sf_mp3)))
+    if (!(((p[1] & 0x06) == 0x06 && input_format == sf_mp1)
+	  || ((p[1] & 0x06) == 0x04 && input_format == sf_mp2)
+	  || ((p[1] & 0x06) == 0x02 && input_format == sf_mp3)))
 	return 0; /* imcompatible layer with input file format */
     if ((p[2] & 0xF0) == 0xF0)
         return 0;       /* bad bitrate */
@@ -1447,7 +1447,7 @@
 }
 
 int
-lame_decode_initfile(FILE * fd, mp3data_struct * mp3data)
+lame_decode_initfile(FILE * fd, mp3data_struct * mp3data, int *enc_delay, int *enc_padding)
 {
     /*  VBRTAGDATA pTagData; */
     /* int xing_header,len2,num_frames; */
@@ -1515,7 +1515,7 @@
     /* so mp3data->bitrate will be 0 until we have decoded the first */
     /* frame.  Cannot decode first frame here because we are not */
     /* yet prepared to handle the output. */
-    ret = lame_decode1_headersB(buf, len, pcm_l, pcm_r, mp3data,&enc_delay,&enc_padding);
+    ret = lame_decode1_headersB(buf, len, pcm_l, pcm_r, mp3data, enc_delay, enc_padding);
     if (-1 == ret)
         return -1;
 
@@ -1524,7 +1524,7 @@
         len = fread(buf, 1, sizeof(buf), fd);
         if (len != sizeof(buf))
             return -1;
-        ret = lame_decode1_headersB(buf, len, pcm_l, pcm_r, mp3data,&enc_delay,&enc_padding);
+        ret = lame_decode1_headersB(buf, len, pcm_l, pcm_r, mp3data, enc_delay, enc_padding);
         if (-1 == ret)
             return -1;
     }
@@ -1533,7 +1533,7 @@
 	if( silent < 10 ) {
 	    fprintf(stderr, "fail to sync...\n");
 	}
-	return lame_decode_initfile(fd, mp3data);
+	return lame_decode_initfile(fd, mp3data, enc_delay, enc_padding);
     }
 
     if (mp3data->totalframes > 0) {
--- lame-3.97/frontend/get_audio.h	2006-09-24 13:53:32.000000000 +0000
+++ lame-3.97/frontend/get_audio.h	2007-03-25 22:14:09.000000000 +0000
@@ -40,7 +40,7 @@
 
 
 FILE *init_outfile ( char *outPath, int decode );
-void init_infile(lame_global_flags *, char *inPath);
+void init_infile(lame_global_flags *, char *inPath, int *enc_delay, int *enc_padding);
 void close_infile(void);
 int get_audio(lame_global_flags * const gfp, int buffer[2][1152]);
 int get_audio16(lame_global_flags * const gfp, short buffer[2][1152]);
@@ -59,7 +59,7 @@
  * samples to skip, to (for example) compensate for the encoder delay,
  * only used when decoding mp3 
 */
-int lame_decoder(lame_global_flags *gfp,FILE *outf,int skip, char *inPath, char *outPath);
+int lame_decoder(lame_global_flags *gfp,FILE *outf,int skip, char *inPath, char *outPath, int *enc_delay, int *enc_padding);
 
 
 
--- lame-3.97/frontend/main.c	2006-09-24 13:53:32.000000000 +0000
+++ lame-3.97/frontend/main.c	2007-03-25 22:14:05.000000000 +0000
@@ -130,7 +130,7 @@
 
 
 FILE   *
-init_files(lame_global_flags * gf, char *inPath, char *outPath)
+init_files(lame_global_flags * gf, char *inPath, char *outPath, int *enc_delay, int *enc_padding)
 {
     FILE   *outf;
     /* Mostly it is not useful to use the same input and output name.
@@ -148,7 +148,7 @@
      * if you want to do your own file input, skip this call and set
      * samplerate, num_channels and num_samples yourself.
      */
-    init_infile(gf, inPath);
+    init_infile(gf, inPath, enc_delay, enc_padding);
     if ((outf = init_outfile(outPath, lame_get_decode_only(gf))) == NULL) {
         fprintf(stderr, "Can't init outfile '%s'\n", outPath);
         return NULL;
@@ -171,11 +171,12 @@
  * samples to skip, to (for example) compensate for the encoder delay */
 
 int
-lame_decoder(lame_global_flags * gfp, FILE * outf, int skip, char *inPath,
-             char *outPath)
+lame_decoder(lame_global_flags * gfp, FILE * outf, int skip_start, char *inPath,
+             char *outPath, int *enc_delay, int *enc_padding)
 {
     short int Buffer[2][1152];
     int     iread;
+    int     skip_end=0;
     double  wavsize;
     int     i;
     void    (*WriteFunction) (FILE * fp, char *p, int n);
@@ -191,24 +192,29 @@
 
     switch (input_format) {
     case sf_mp3:
-        if (skip==0) {
-            if (enc_delay>-1) skip = enc_delay + 528+1;
-            else skip=lame_get_encoder_delay(gfp)+528+1;
+        if (skip_start==0) {
+            if (*enc_delay>-1 || *enc_padding>-1) {
+                if (*enc_delay>-1) 
+                    skip_start = *enc_delay+528+1;
+                if (*enc_padding>-1) 
+                    skip_end = *enc_padding-(528+1);
+            }else 
+                skip_start=lame_get_encoder_delay(gfp)+528+1;
         }else{
             /* user specified a value of skip. just add for decoder */
-            skip += 528+1; /* mp3 decoder has a 528 sample delay, plus user supplied "skip" */
+            skip_start += 528+1; /* mp3 decoder has a 528 sample delay, plus user supplied "skip" */
         }
 
         if (silent < 10) fprintf(stderr, "MPEG-%u%s Layer %s", 2 - lame_get_version(gfp),
                 lame_get_out_samplerate( gfp ) < 16000 ? ".5" : "", "III");
         break;
     case sf_mp2:
-        skip += 240 + 1;
+        skip_start += 240+1;
         if (silent < 10) fprintf(stderr, "MPEG-%u%s Layer %s", 2 - lame_get_version(gfp),
                 lame_get_out_samplerate( gfp ) < 16000 ? ".5" : "", "II");
         break;
     case sf_mp1:
-        skip += 240 + 1;
+        skip_start += 240+1;
         if (silent < 10) fprintf(stderr, "MPEG-%u%s Layer %s", 2 - lame_get_version(gfp),
                 lame_get_out_samplerate( gfp ) < 16000 ? ".5" : "", "I");
         break;
@@ -216,25 +222,25 @@
         if (silent < 10) fprintf(stderr, "raw PCM data");
         mp3input_data.nsamp = lame_get_num_samples( gfp );
         mp3input_data.framesize = 1152;
-        skip = 0;       /* other formats have no delay *//* is += 0 not better ??? */
+        skip_start = 0;       /* other formats have no delay *//* is += 0 not better ??? */
         break;
     case sf_wave:
         if (silent < 10) fprintf(stderr, "Microsoft WAVE");
         mp3input_data.nsamp = lame_get_num_samples( gfp );
         mp3input_data.framesize = 1152;
-        skip = 0;       /* other formats have no delay *//* is += 0 not better ??? */
+        skip_start = 0;       /* other formats have no delay *//* is += 0 not better ??? */
         break;
     case sf_aiff:
         if (silent < 10) fprintf(stderr, "SGI/Apple AIFF");
         mp3input_data.nsamp = lame_get_num_samples( gfp );
         mp3input_data.framesize = 1152;
-        skip = 0;       /* other formats have no delay *//* is += 0 not better ??? */
+        skip_start = 0;       /* other formats have no delay *//* is += 0 not better ??? */
         break;
     default:
         if (silent < 10) fprintf(stderr, "unknown");
         mp3input_data.nsamp = lame_get_num_samples( gfp );
         mp3input_data.framesize = 1152;
-        skip = 0;       /* other formats have no delay *//* is += 0 not better ??? */
+        skip_start = 0;       /* other formats have no delay *//* is += 0 not better ??? */
         assert(0);
         break;
     }
@@ -244,10 +250,14 @@
 		strcmp(outPath, "-") ? outPath : "<stdout>",
 		strlen(outPath) > 45 ? "\n\t" : "  ");
 
-	if (skip > 0)
+	if (skip_start > 0)
 	    fprintf(stderr,
 		    "skipping initial %i samples (encoder+decoder delay)\n",
-		    skip);
+		    skip_start);
+	if (skip_end > 0)
+	    fprintf(stderr,
+		    "skipping final %i samples (encoder padding-decoder delay)\n",
+		    skip_end);
     }
 
     if ( 0 == disable_wav_header )
@@ -256,7 +266,7 @@
                         16);
     /* unknown size, so write maximum 32 bit signed value */
 
-    wavsize = -skip;
+    wavsize = -(skip_start+skip_end);
     WriteFunction = swapbytes ? WriteBytesSwapped : WriteBytes;
     mp3input_data.totalframes = mp3input_data.nsamp / mp3input_data.framesize;
 
@@ -270,7 +280,14 @@
         if (silent <= 0)
             decoder_progress(gfp, &mp3input_data);
 
-        skip -= (i = skip < iread ? skip : iread); /* 'i' samples are to skip in this frame */
+        skip_start -= (i = skip_start < iread ? skip_start : iread); /* 'i' samples are to skip in this frame */
+
+	if (skip_end > 1152 && mp3input_data.framenum + 2 > mp3input_data.totalframes) {
+            iread -= (skip_end - 1152);
+            skip_end = 1152;
+        }
+        else if (mp3input_data.framenum == mp3input_data.totalframes && iread != 0)
+            iread -= skip_end;
 
         for (; i < iread; i++) {
             if ( disable_wav_header ) {
@@ -285,7 +302,6 @@
             }
         }
     } while (iread);
-
     i = (16 / 8) * tmp_num_channels;
     assert(i > 0);
     if (wavsize <= 0) {
@@ -302,9 +318,11 @@
     }
 
     if ( 0 == disable_wav_header )
-        if (!fseek(outf, 0l, SEEK_SET)) /* if outf is seekable, rewind and adjust length */
-            WriteWaveHeader(outf, (int)wavsize, lame_get_in_samplerate( gfp ),
+        if (0 != strcmp("-", outPath))
+            if (!fseek(outf, 0, SEEK_SET)) /* if outf is seekable, rewind and adjust length */
+                WriteWaveHeader(outf, (int)wavsize, lame_get_in_samplerate( gfp ),
                             tmp_num_channels, 16);
+
     fclose(outf);
 
     if (silent <= 0)
@@ -642,6 +660,10 @@
     char    nogapdir[PATH_MAX + 1];
     char    inPath[PATH_MAX + 1];
 
+    /* add variables for encoder delay/padding */
+    int enc_delay = -1;
+    int enc_padding = -1;
+
     /* support for "nogap" encoding of up to 200 .wav files */
 #define MAX_NOGAP 200
     int    nogapout = 0;
@@ -717,10 +739,10 @@
         /* for nogap encoding of multiple input files, it is not possible to
          * specify the output file name, only an optional output directory. */
         parse_nogap_filenames(nogapout,nogap_inPath[0],outPath,nogapdir);
-        outf = init_files(gf, nogap_inPath[0], outPath);
+        outf = init_files(gf, nogap_inPath[0], outPath, &enc_delay, &enc_padding);
     }
     else {
-        outf = init_files(gf, inPath, outPath);
+        outf = init_files(gf, inPath, outPath, &enc_delay, &enc_padding);
     }
     if (outf == NULL) {
         return -1;
@@ -750,9 +772,9 @@
     if (lame_get_decode_only(gf)) {
         /* decode an mp3 file to a .wav */
         if (mp3_delay_set)
-            lame_decoder(gf, outf, mp3_delay, inPath, outPath);
+            lame_decoder(gf, outf, mp3_delay, inPath, outPath, &enc_delay, &enc_padding);
         else
-            lame_decoder(gf, outf, 0, inPath, outPath);
+            lame_decoder(gf, outf, 0, inPath, outPath, &enc_delay, &enc_padding);
 
     }
     else {
@@ -766,7 +788,7 @@
                     parse_nogap_filenames(nogapout,nogap_inPath[i],outPath,nogapdir);
                     /* note: if init_files changes anything, like
                        samplerate, num_channels, etc, we are screwed */
-                    outf = init_files(gf, nogap_inPath[i], outPath);
+                    outf = init_files(gf, nogap_inPath[i], outPath, &enc_delay, &enc_padding);
                 }
                 brhist_init_package(gf);
                 lame_set_nogap_total(gf, max_nogap);
--- lame-3.97/frontend/parse.c	2006-09-24 13:53:32.000000000 +0000
+++ lame-3.97/frontend/parse.c	2007-03-25 22:14:05.000000000 +0000
@@ -1101,8 +1101,8 @@
     silent   = 0;
     ignore_tag_errors = 0;
     brhist   = 1;
-    enc_padding=-1;
-    enc_delay=-1;
+//    enc_padding=-1;
+//    enc_delay=-1;
     mp3_delay = 0;   
     mp3_delay_set=0;
     print_clipping_info = 0;
--- lame-3.97/frontend/mp3rtp.c	2007-03-26 00:04:18.000000000 +0000
+++ lame-3.97/frontend/mp3rtp.c	2007-03-26 00:05:29.000000000 +0000
@@ -205,7 +205,7 @@
      * if you want to do your own file input, skip this call and set
      * these values yourself.  
      */
-    init_infile(gf,inPath);
+    init_infile(gf,inPath, &enc_delay, &enc_padding);
 
 
     /* Now that all the options are set, lame needs to analyze them and
