--- trunk/plug-ins/common/psp.c	(revision 22864)
+++ trunk/plug-ins/common/psp.c	(revision 22907)
@@ -482,7 +482,6 @@
       || (major < 4 && fread (total_len, 4, 1, f) < 1))
     {
       g_message ("Error reading block header");
-      fclose (f);
       return -1;
     }
   if (memcmp (buf, "~BK\0", 4) != 0)
@@ -491,8 +490,6 @@
 	g_message ("Invalid block header at %ld", header_start);
       else
 	g_message ("Invalid block header");
-
-      fclose (f);
       return -1;
     }
 
@@ -527,7 +524,6 @@
   if (init_len < 38 || total_len < 38)
     {
       g_message ("Invalid general image attribute chunk size");
-      fclose (f);
       return -1;
     }
 
@@ -547,7 +543,6 @@
       || fread (&ia->layer_count, 2, 1, f) < 1)
     {
       g_message ("Error reading general image attribute block");
-      fclose (f);
       return -1;
     }
   ia->width = GUINT32_FROM_LE (ia->width);
@@ -562,7 +557,6 @@
   if (ia->compression > PSP_COMP_LZ77)
     {
       g_message ("Unknown compression type %d", ia->compression);
-      fclose (f);
       return -1;
     }
 
@@ -570,7 +564,6 @@
   if (ia->depth != 24)
     {
       g_message ("Unsupported bit depth %d", ia->depth);
-      fclose (f);
       return -1;
     }
 
@@ -621,15 +614,11 @@
 	  || fread (&length, 4, 1, f) < 1)
 	{
 	  g_message ("Error reading creator keyword chunk");
-	  fclose (f);
-	  gimp_image_delete (image_ID);
 	  return -1;
 	}
       if (memcmp (buf, "~FL\0", 4) != 0)
 	{
 	  g_message ("Invalid keyword chunk header");
-	  fclose (f);
-	  gimp_image_delete (image_ID);
 	  return -1;
 	}
       keyword = GUINT16_FROM_LE (keyword);
@@ -644,8 +633,6 @@
 	  if (fread (string, length, 1, f) < 1)
 	    {
 	      g_message ("Error reading creator keyword data");
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 	  switch (keyword)
@@ -669,8 +656,6 @@
 	  if (fread (&dword, 4, 1, f) < 1)
 	    {
 	      g_message ("Error reading creator keyword data");
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 	  switch (keyword)
@@ -688,7 +673,6 @@
 	default:
 	  if (try_fseek (f, length, SEEK_CUR) < 0)
 	    {
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 	  break;
@@ -974,7 +958,6 @@
       if (inflateInit (&zstream) != Z_OK)
 	{
 	  g_message ("zlib error");
-	  fclose (f);
 	  return -1;
 	}
       if (bytespp == 1)
@@ -989,7 +972,6 @@
 	{
 	  g_message ("zlib error");
 	  inflateEnd (&zstream);
-	  fclose (f);
 	  return -1;
 	}
       inflateEnd (&zstream);
@@ -1022,7 +1004,7 @@
   long block_start, sub_block_start, channel_start;
   gint sub_id;
   guint32 sub_init_len, sub_total_len;
-  gchar *name;
+  gchar *name = NULL;
   guint16 namelen;
   guchar type, opacity, blend_mode, visibility, transparency_protected;
   guchar link_group_id, mask_linked, mask_disabled;
@@ -1047,16 +1029,12 @@
       /* Read the layer sub-block header */
       sub_id = read_block_header (f, &sub_init_len, &sub_total_len);
       if (sub_id == -1)
-	{
-	  gimp_image_delete (image_ID);
-	  return -1;
-	}
+        return -1;
+
       if (sub_id != PSP_LAYER_BLOCK)
 	{
 	  g_message ("Invalid layer sub-block %s, should be LAYER",
 		     block_name (sub_id));
-	  fclose (f);
-	  gimp_image_delete (image_ID);
 	  return -1;
 	}
 
@@ -1087,10 +1065,10 @@
 	      || fread (&channel_count, 2, 1, f) < 1)
 	    {
 	      g_message ("Error reading layer information chunk");
-	      fclose (f);
-	      gimp_image_delete (image_ID);
+              g_free (name);
 	      return -1;
 	    }
+
 	  name[namelen] = 0;
 	  type = PSP_LAYER_NORMAL; /* ??? */
 	}
@@ -1098,6 +1076,7 @@
 	{
 	  name = g_malloc (257);
 	  name[256] = 0;
+
 	  if (fread (name, 256, 1, f) < 1
 	      || fread (&type, 1, 1, f) < 1
 	      || fread (&image_rect, 16, 1, f) < 1
@@ -1117,8 +1096,6 @@
 	    {
 	      g_message ("Error reading layer information chunk");
 	      g_free (name);
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 	}
@@ -1146,6 +1123,14 @@
       width = saved_image_rect[2] - saved_image_rect[0];
       height = saved_image_rect[3] - saved_image_rect[1];
 
+      if ((width < 0) || (width > GIMP_MAX_IMAGE_SIZE)       /* w <= 2^18 */
+          || (height < 0) || (height > GIMP_MAX_IMAGE_SIZE)  /* h <= 2^18 */
+          || ((width / 256) * (height / 256) >= 8192))       /* w * h < 2^29 */
+        {
+          g_message ("Invalid layer dimensions: %dx%d", width, height);
+          return -1;
+        }
+
       IFDBG(2) g_message
 	("layer: %s %dx%d (%dx%d) @%d,%d opacity %d blend_mode %s "
 	 "%d bitmaps %d channels",
@@ -1194,8 +1179,6 @@
       if (layer_ID == -1)
 	{
 	  g_message ("Error creating layer");
-	  fclose (f);
-	  gimp_image_delete (image_ID);
 	  return -1;
 	}
 
@@ -1215,16 +1198,17 @@
       if (major < 4)
 	if (try_fseek (f, sub_block_start + sub_init_len, SEEK_SET) < 0)
 	  {
-	    gimp_image_delete (image_ID);
 	    return -1;
 	  }
 
       pixel = g_malloc0 (height * width * bytespp);
       if (null_layer)
-	pixels = NULL;
+        {
+          pixels = NULL;
+        }
       else
 	{
-	  pixels = g_new(guchar *, height);
+	  pixels = g_new (guchar *, height);
 	  for (i = 0; i < height; i++)
 	    pixels[i] = pixel + width * bytespp * i;
 	}
@@ -1250,8 +1234,6 @@
 	    {
 	      g_message ("Invalid layer sub-block %s, should be CHANNEL",
 			 block_name (sub_id));
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 
@@ -1266,8 +1248,6 @@
 	      || fread (&channel_type, 2, 1, f) < 1)
 	    {
 	      g_message ("Error reading channel information chunk");
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 
@@ -1280,8 +1260,6 @@
 	    {
 	      g_message ("Invalid bitmap type %d in channel information chunk",
 			 bitmap_type);
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 
@@ -1289,8 +1267,6 @@
 	    {
 	      g_message ("Invalid channel type %d in channel information chunk",
 			 channel_type);
-	      fclose (f);
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 
@@ -1308,7 +1284,6 @@
 	  if (major < 4)
 	    if (try_fseek (f, channel_start + channel_init_len, SEEK_SET) < 0)
 	      {
-		gimp_image_delete (image_ID);
 		return -1;
 	      }
 
@@ -1316,13 +1291,11 @@
 	    if (read_channel_data (f, ia, pixels, bytespp,
 				   offset, drawable, compressed_len) == -1)
 	      {
-		gimp_image_delete (image_ID);
 		return -1;
 	      }
 
 	  if (try_fseek (f, channel_start + channel_total_len, SEEK_SET) < 0)
 	    {
-	      gimp_image_delete (image_ID);
 	      return -1;
 	    }
 	}
@@ -1335,9 +1308,9 @@
       g_free (pixels);
       g_free (pixel);
     }
+
   if (try_fseek (f, block_start + total_len, SEEK_SET) < 0)
     {
-      gimp_image_delete (image_ID);
       return -1;
     }
 
@@ -1371,10 +1344,9 @@
       || fread (&selection_mode, 4, 1, f) < 1)
     {
       g_message ("Error reading tube data chunk");
-      fclose (f);
-      gimp_image_delete (image_ID);
       return -1;
     }
+
   name[513] = 0;
   version = GUINT16_FROM_LE (version);
   params.step = GUINT32_FROM_LE (step_size);
@@ -1468,18 +1440,18 @@
       || fread (&minor, 2, 1, f) < 1)
     {
       g_message ("Error reading file header");
-      fclose (f);
-      return -1;
+      goto error;
     }
+
   if (memcmp (buf, "Paint Shop Pro Image File\n\032\0\0\0\0\0", 32) != 0)
     {
       g_message ("Incorrect file signature");
-      fclose (f);
-      return -1;
+      goto error;
     }
 
   major = GUINT16_FROM_LE (major);
   minor = GUINT16_FROM_LE (minor);
+
   /* I only have the documentation for file format version 3.0,
    * but PSP 6 writes version 4.0. Let's hope it's backwards compatible.
    * Earlier versions probably don't have all the fields I expect
@@ -1490,8 +1462,7 @@
       g_message ("Unsupported PSP file format version "
 		 "%d.%d, only knows 3.0 (and later?)",
 		 major, minor);
-      fclose (f);
-      return -1;
+      goto error;
     }
   else if (major == 3)
     ; /* OK */
@@ -1504,8 +1475,7 @@
     {
       g_message ("Unsupported PSP file format version %d.%d",
 		 major, minor);
-      fclose (f);
-      return -1;
+      goto error;
     }
 
   /* Read all the blocks */
@@ -1523,12 +1493,13 @@
 	  if (block_number != 0)
 	    {
 	      g_message ("Duplicate General Image Attributes block");
-	      fclose (f);
-	      return -1;
+              goto error;
 	    }
 	  if (read_general_image_attribute_block (f, block_init_len,
 						  block_total_len, &ia) == -1)
-	    return -1;
+            {
+              goto error;
+            }
 
 	  IFDBG(2) g_message ("%d dpi %dx%d %s",
 			      (int) ia.resolution,
@@ -1538,7 +1509,9 @@
 	  image_ID = gimp_image_new (ia.width, ia.height,
 				     ia.greyscale ? GIMP_GRAY : GIMP_RGB);
 	  if (image_ID == -1)
-	    return -1;
+            {
+              goto error;
+            }
 
 	  gimp_image_set_filename (image_ID, filename);
 
@@ -1549,15 +1522,14 @@
 	  if (block_number == 0)
 	    {
 	      g_message ("Missing General Image Attributes block");
-	      fclose (f);
-	      gimp_image_delete (image_ID);
-	      return -1;
+              goto error;
 	    }
+
 	  switch (id)
 	    {
 	    case PSP_CREATOR_BLOCK:
 	      if (read_creator_block (f, image_ID, block_total_len, &ia) == -1)
-		return -1;
+                goto error;
 	      break;
 
 	    case PSP_COLOR_BLOCK:
@@ -1565,7 +1537,7 @@
 
 	    case PSP_LAYER_START_BLOCK:
 	      if (read_layer_block (f, image_ID, block_total_len, &ia) == -1)
-		return -1;
+		goto error;
 	      break;
 
 	    case PSP_SELECTION_BLOCK:
@@ -1582,7 +1554,7 @@
 
 	    case PSP_TUBE_BLOCK:
 	      if (read_tube_block (f, image_ID, block_total_len, &ia) == -1)
-		return -1;
+		goto error;
 	      break;
 
 	    case PSP_LAYER_BLOCK:
@@ -1603,17 +1575,17 @@
 	break;
 
       if (try_fseek (f, block_start + block_total_len, SEEK_SET) < 0)
-	{
-	  gimp_image_delete (image_ID);
-	  return -1;
-	}
+        goto error;
+
       block_number++;
     }
 
   if (id == -1)
     {
+    error:
       fclose (f);
-      gimp_image_delete (image_ID);
+      if (image_ID != -1)
+        gimp_image_delete (image_ID);
       return -1;
     }
 
