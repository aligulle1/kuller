Index: kinit/start_kdeinit.c
===================================================================
--- kinit/start_kdeinit.c	(revision 668197)
+++ kinit/start_kdeinit.c	(revision 668198)
@@ -24,6 +24,7 @@
 #include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <unistd.h>
 
 #ifdef KDEINIT_OOM_PROTECT
@@ -67,6 +68,8 @@
    const char** new_argv;
    char helper_num[ 1024 ];
    int i;
+   char** orig_environ = NULL;
+   char header[ 7 ];
    if( pipe( pipes ) < 0 ) {
       perror( "pipe()" );
       return 1;
@@ -89,6 +92,31 @@
             return 1;
          }
          close( pipes[ 0 ] );
+         /* read original environment passed by start_kdeinit_wrapper */
+         if( read( 0, header, 7 ) == 7 && strncmp( header, "environ", 7 ) == 0 ) {
+             int count;
+             if( read( 0, &count, sizeof( int )) == sizeof( int )) {
+                 char** env = malloc(( count + 1 ) * sizeof( char* ));
+                 int ok = 1;
+                 for( i = 0;
+                      i < count && ok;
+                      ++i ) {
+                     int len;
+                     if( read( 0, &len, sizeof( int )) == sizeof( int )) {
+                         env[ i ] = malloc( len + 1 );
+                         if( read( 0, env[ i ], len ) == len ) {
+                             env[ i ][ len ] = '\0';
+                         } else {
+                             ok = 0;
+                         }
+                     }
+                 }
+                 if( ok ) {
+                   env[ i ] = NULL;
+                   orig_environ = env;
+                 }
+             }
+         }
          if(argc == 0)
             return 1;
          new_argc = argc + 2;
@@ -103,7 +131,10 @@
               i <= argc;
               ++i )
              new_argv[ i + 2 ] = argv[ i ];
-         execv(EXECUTE, (char**)new_argv);
+         if( orig_environ )
+             execve(EXECUTE, (char**)new_argv, orig_environ);
+         else
+             execv(EXECUTE, (char**)new_argv);
          perror(EXECUTE);
          return 1;
       case 0: /* child, keep privileges and do the privileged work */
Index: kinit/start_kdeinit_wrapper.c
===================================================================
--- kinit/start_kdeinit_wrapper.c	(revision 0)
+++ kinit/start_kdeinit_wrapper.c	(revision 668198)
@@ -0,0 +1,92 @@
+/*
+ * This file is part of the KDE libraries
+ * Copyright (c) 2007 Lubos Lunak <l.lunak@kde.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License version 2 as published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <config.h>
+
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+
+#ifdef KDEINIT_OOM_PROTECT
+
+/*
+ The start_kdeinit wrapper is setuid, which means some shell variables like LD_LIBRARY_PATH
+ get unset before it's launched. However kdeinit is used to launch most of KDE, so such variables
+ should not be dropped. Therefore this wrapper for the setuid wrapper read the environment
+ and writes it to start_kdeinit's stdin, which after dropping priviledges reads it and uses it
+ for launching the real kdeinit.
+*/
+int main(int argc, char **argv)
+{
+   int pipes[ 2 ];
+   if(argc == 0)
+      return 1;
+   if( pipe( pipes ) < 0 ) {
+      perror( "pipe()" );
+      return 1;
+   }
+   switch( fork()) {
+      case -1:
+         perror( "fork()" );
+         return 1;
+      default: /* parent, exec */ 
+         close( pipes[ 1 ] );
+         close( 0 ); /* stdin */
+         dup2( pipes[ 0 ], 0 );
+         close( pipes[ 0 ] );
+         argv[ 0 ] = (char*)"start_kdeinit";
+         execvp("start_kdeinit", argv);
+         perror("start_kdeinit");
+         return 1;
+      case 0: { /* child, pass env and exit */
+         extern char** environ;
+         int i;
+         close( pipes[ 0 ] );
+         write( pipes[ 1 ], "environ", 7 ); /* header, just in case */
+         for( i = 0;
+              environ[ i ] != NULL;
+              ++i )
+             {}
+         write( pipes[ 1 ], &i, sizeof( int )); /* write count */
+         for( i = 0;
+              environ[ i ] != NULL;
+              ++i )
+             {
+             int len = strlen( environ[ i ] );
+             write( pipes[ 1 ], &len, sizeof( int )); /* write length */
+             write( pipes[ 1 ], environ[ i ], strlen( environ[ i ] ));
+             }
+         close( pipes[ 1 ] );
+         }     
+   }
+   return 0;
+}
+
+#else /* not Linux, the simple non-setuid case */
+
+int main(int argc, char **argv)
+{
+   if(argc == 0)
+      return 1;
+   argv[0] = "start_kdeinit";
+   execv("start_kdeinit",argv);
+   perror("start_kdeinit");
+   return 1;
+}
+#endif
Index: kinit/Makefile.am
===================================================================
--- kinit/Makefile.am	(revision 668197)
+++ kinit/Makefile.am	(revision 668198)
@@ -20,7 +20,7 @@
 SUBDIRS = . tests
 
 bin_PROGRAMS = kdeinit kdeinit_wrapper kshell kdeinit_shutdown lnusertemp kwrapper kioslave \
-               kstartupconfig kdostartupconfig start_kdeinit
+               kstartupconfig kdostartupconfig start_kdeinit start_kdeinit_wrapper
 
 lib_LTLIBRARIES = 
 kdeinit_LTLIBRARIES = klauncher.la
@@ -71,6 +71,8 @@
 start_kdeinit_CFLAGS = $(KDE_USE_FPIE) -DEXECUTE=\"$(kdeinitpath)\"
 start_kdeinit_LDFLAGS = $(KDE_USE_PIE)
 
+start_kdeinit_wrapper_SOURCES = start_kdeinit_wrapper.c
+
 METASOURCES = AUTO
 
 noinst_HEADERS = klauncher.h autostart.h klauncher_cmds.h setproctitle.h
