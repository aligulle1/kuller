--- Lib/decimal.py	2007-05-09 03:25:36.000000000 +0300
+++ Lib/decimal.py	2007-05-11 13:58:02.000000000 +0300
@@ -149,6 +149,18 @@
 NEVER_ROUND = 'NEVER_ROUND'    # Round in division (non-divmod), sqrt ONLY
 ALWAYS_ROUND = 'ALWAYS_ROUND'  # Every operation rounds at end.
 
+# Helper functions for ASCII upper/lower
+
+import string
+
+def ascii_lower(s):
+    trans_table = string.maketrans(string.ascii_uppercase, string.ascii_lowercase)
+    return s.translate(trans_table)
+
+def ascii_upper(s):
+    trans_table = string.maketrans(string.ascii_lowercase, string.ascii_uppercase)
+    return s.translate(trans_table)
+
 #Errors
 
 class DecimalException(ArithmeticError):
@@ -829,7 +842,7 @@
         if eng:
             while tmp[0:1] == ['0']:
                 tmp[0:1] = []
-            if len(tmp) == 0 or tmp[0] == '.' or tmp[0].lower() == 'e':
+            if len(tmp) == 0 or tmp[0] == '.' or ascii_lower(tmp[0]) == 'e':
                 tmp[0:0] = ['0']
         if self._sign:
             tmp.insert(0, '-')
@@ -2167,7 +2180,7 @@
 rounding_functions = [name for name in Decimal.__dict__.keys() if name.startswith('_round_')]
 for name in rounding_functions:
     #name is like _round_half_even, goes to the global ROUND_HALF_EVEN value.
-    globalname = name[1:].upper()
+    globalname = ascii_upper(name[1:])
     val = globals()[globalname]
     Decimal._pick_rounding_function[val] = name
 
@@ -2927,7 +2940,7 @@
 
     +1 for negative infinity; 0 for finite ; +1 for positive infinity
     """
-    num = str(num).lower()
+    num = ascii_lower(str(num))
     return _infinity_map.get(num, 0)
 
 def _isnan(num):
@@ -2937,7 +2950,7 @@
     (2, sign, diagnostic info as string) => sNaN
     0 => not a NaN
     """
-    num = str(num).lower()
+    num = ascii_lower(str(num))
     if not num:
         return 0
 
