--- shadow-4.0.17/man/groupadd.8.redhat	2006-06-24 08:11:26.000000000 +0200
+++ shadow-4.0.17/man/groupadd.8	2006-07-17 11:39:34.000000000 +0200
@@ -14,7 +14,7 @@
 groupadd \- create a new group
 .SH "SYNOPSIS"
 .HP 9
-\fBgroupadd\fR [\-g\ \fIGID\fR\ [\-o]] [\-f] [\-K\ \fIKEY\fR=\fIVALUE\fR] \fIgroup\fR
+\fBgroupadd\fR [\-g\ \fIgid\fR\ [\-o]] [\-r] [\-f] [\-K\ \fIKEY\fR=\fIVALUE\fR] \fIgroup\fR
 .SH "DESCRIPTION"
 .PP
 The
@@ -32,10 +32,13 @@
 \fB\-g\fR
 is turned off).
 .TP 3n
+\fB-r\fR
+This flag instructs \fBgroupadd\fR to add a system account.  The first available \fIgid\fR lower than 499 will be automatically selected unless the \fB-g\fR option is also given on the command line. This is an option added by Red Hat.
+.TP 3n
 \fB\-g\fR \fIGID\fR
 The numerical value of the group's ID. This value must be unique, unless the
 \fB\-o\fR
-option is used. The value must be non\-negative. The default is to use the smallest ID value greater than 999 and greater than every other group. Values between 0 and 999 are typically reserved for system accounts.
+option is used. The value must be non\-negative. The default is to use the smallest ID value greater than 500 and greater than every other group. Values between 0 and 499 are typically reserved for system accounts.
 .TP 3n
 \fB\-h\fR, \fB\-\-help\fR
 Display help message and exit.
--- shadow-4.0.17/man/useradd.8.redhat	2006-06-24 08:12:17.000000000 +0200
+++ shadow-4.0.17/man/useradd.8	2006-07-17 11:39:34.000000000 +0200
@@ -25,7 +25,7 @@
 \fB\-D\fR
 option, the
 \fBuseradd\fR
-command creates a new user account using the values specified on the command line and the default values from the system. Depending on command line options, the useradd command will update system files and may also create the new user's home directory and copy initial files.
+command creates a new user account using the values specified on the command line and the default values from the system. Depending on command line options, the useradd command will update system files and may also create the new user's home directory and copy initial files. The version provided with Red Hat Linux will create a group for each user added to the system by default.
 .SH "OPTIONS"
 .PP
 The options which apply to the
@@ -65,7 +65,7 @@
 The number of days after a password expires until the account is permanently disabled. A value of 0 disables the account as soon as the password has expired, and a value of \-1 disables the feature. The default value is \-1.
 .TP 3n
 \fB\-g\fR, \fB\-\-gid\fR \fIGROUP\fR
-The group name or number of the user's initial login group. The group name must exist. A group number must refer to an already existing group. The default group number is 1 or whatever is specified in
+The group name or number of the user's initial login group. The group name must exist. A group number must refer to an already existing group.
 \fI/etc/default/useradd\fR.
 .TP 3n
 \fB\-G\fR, \fB\-\-groups\fR \fIGROUP1\fR[\fI,GROUP2,...\fR[\fI,GROUPN\fR]]]
@@ -76,6 +76,9 @@
 \fB\-h\fR, \fB\-\-help\fR
 Display help message and exit.
 .TP 3n
+\fB-M\fR
+The user's home directory will not be created, even if the system wide settings from \fI/etc/login.defs\fR is to create home dirs.
+.TP 3n
 \fB\-m\fR, \fB\-\-create\-home\fR
 The user's home directory will be created if it does not exist. The files contained in
 \fISKEL_DIR\fR
@@ -93,6 +96,9 @@
 \fB\-m\fR
 option. The default is to not create the directory and to not copy any files.
 .TP 3n
+\fB-n\fR
+A group having the same name as the user being added to the system will be created by default. This option will turn off this Red Hat Linux specific behavior. When this option is used, users by default will be placed in whatever group is specified in \fI/etc/default/useradd\fR. If no default group is defined, group 1 will be used.
+.TP 3n
 \fB\-K\fR, \fB\-\-key\fR \fIKEY\fR=\fIVALUE\fR
 Overrides /etc/login.defs defaults (UID_MIN, UID_MAX, UMASK, PASS_MAX_DAYS and others).
 
@@ -118,6 +124,9 @@
 The encrypted password, as returned by
 \fBcrypt\fR(3). The default is to disable the account.
 .TP 3n
+\fB-r\fR
+This flag is used to create a system account. That is, a user with a UID lower than the value of UID_MIN defined in \fI/etc/login.defs\fR and whose password does not expire. Note that \fBuseradd\fR will not create a home directory for such an user, regardless of the default setting in \fI/etc/login.defs\fR. You have to specify \fB-m\fR option if you want a home directory for a system account to be created. This is an option added by Red Hat
+.TP 3n
 \fB\-s\fR, \fB\-\-shell\fR \fISHELL\fR
 The name of the user's login shell. The default is to leave this field blank, which causes the system to select the default login shell.
 .TP 3n
@@ -161,6 +170,8 @@
 The system administrator is responsible for placing the default user files in the
 \fI/etc/skel/\fR
 directory.
+.br
+This version of useradd was modified by Red Hat to suit Red Hat user/group conventions.
 .SH "CAVEATS"
 .PP
 You may not add a user to a NIS group. This must be performed on the NIS server.
@@ -181,6 +192,9 @@
 \fI/etc/group\fR
 Group account information.
 .TP 3n
+\fI/etc/gshadow\fR
+Secure group account information.
+.TP 3n
 \fI/etc/default/useradd\fR
 Default values for account creation.
 .TP 3n
--- shadow-4.0.17/src/useradd.c.redhat	2006-06-22 13:30:32.000000000 +0200
+++ shadow-4.0.17/src/useradd.c	2006-07-17 11:39:34.000000000 +0200
@@ -81,7 +81,7 @@
 static gid_t def_group = 100;
 static const char *def_gname = "other";
 static const char *def_home = "/home";
-static const char *def_shell = "";
+static const char *def_shell = "/sbin/nologin";
 static const char *def_template = SKEL_DIR;
 static const char *def_create_mail_spool = "no";
 
@@ -93,7 +93,7 @@
 #define	VALID(s)	(strcspn (s, ":\n") == strlen (s))
 
 static const char *user_name = "";
-static const char *user_pass = "!";
+static const char *user_pass = "!!";
 static uid_t user_id;
 static gid_t user_gid;
 static const char *user_comment = "";
@@ -124,8 +124,10 @@
     Gflg = 0,			/* secondary group set for new account */
     kflg = 0,			/* specify a directory to fill new user directory */
     mflg = 0,			/* create user's home directory if it doesn't exist */
-    nflg = 0,			/* create a group having the same name as the user */
+    Mflg = 0,                   /* do NOT create user's home directory no matter what */
+    nflg = 0,                   /* do NOT create a group having the same name as the user */
     oflg = 0,			/* permit non-unique user ID to be specified with -u */
+    rflg = 0,                   /* create a system account */
     sflg = 0,			/* shell program for new account */
     uflg = 0;			/* specify user ID for new account */
 
@@ -628,6 +630,8 @@
 			   "  -K, --key KEY=VALUE		overrides /etc/login.defs defaults\n"
 			   "  -m, --create-home		create home directory for the new user\n"
 			   "				account\n"
+			   "  -M,                       do not create user's home directory(overrides /etc/login.defs)\n"
+			   "  -r,                       create system account\n"
 			   "  -o, --non-unique		allow create user with duplicate\n"
 			   "				(non-unique) UID\n"
 			   "  -p, --password PASSWORD	use encrypted password for the new user\n"
@@ -680,11 +684,20 @@
 	spent->sp_namp = (char *) user_name;
 	spent->sp_pwdp = (char *) user_pass;
 	spent->sp_lstchg = time ((time_t *) 0) / SCALE;
-	spent->sp_min = scale_age (getdef_num ("PASS_MIN_DAYS", -1));
-	spent->sp_max = scale_age (getdef_num ("PASS_MAX_DAYS", -1));
-	spent->sp_warn = scale_age (getdef_num ("PASS_WARN_AGE", -1));
-	spent->sp_inact = scale_age (def_inactive);
-	spent->sp_expire = scale_age (user_expire);
+	if (!rflg) {
+		spent->sp_min = scale_age (getdef_num ("PASS_MIN_DAYS", -1));
+		spent->sp_max = scale_age (getdef_num ("PASS_MAX_DAYS", -1));
+		spent->sp_warn = scale_age (getdef_num ("PASS_WARN_AGE", -1));
+		spent->sp_inact = scale_age (def_inactive);
+		spent->sp_expire = scale_age (user_expire);
+	}
+	else {
+		spent->sp_min = scale_age(-1);
+                spent->sp_max = scale_age(-1);
+                spent->sp_warn = scale_age(-1);
+                spent->sp_inact = scale_age(-1);
+        	spent->sp_expire = scale_age(-1);
+	}
 	spent->sp_flag = -1;
 }
 
@@ -832,8 +845,14 @@
 	const struct passwd *pwd;
 	uid_t uid_min, uid_max;
 
-	uid_min = getdef_unum ("UID_MIN", 1000);
-	uid_max = getdef_unum ("UID_MAX", 60000);
+        if (!rflg) {
+                uid_min = getdef_unum ("UID_MIN", 500);
+                uid_max = getdef_unum ("UID_MAX", 60000);
+        }
+        else {
+                uid_min = 1;
+                uid_max = getdef_unum ("UID_MIN", 500) - 1;
+        }
 
 	/*
 	 * Start with some UID value if the user didn't provide us with
@@ -863,7 +882,7 @@
 #endif
 			exit (E_NAME_IN_USE);
 		}
-		if (uflg && user_id == pwd->pw_uid) {
+		if (!oflg && uflg && user_id == pwd->pw_uid) {
 			fprintf (stderr, _("%s: UID %u is not unique\n"),
 				 Prog, (unsigned int) user_id);
 #ifdef WITH_AUDIT
@@ -918,8 +937,13 @@
 	const struct group *grp;
 	gid_t gid_min, gid_max;
 
-	gid_min = getdef_num ("GID_MIN", 500);
-	gid_max = getdef_num ("GID_MAX", 60000);
+        if (!rflg) {
+                gid_min = getdef_unum ("GID_MIN", 500);
+                gid_max = getdef_unum ("GID_MAX", 60000);
+        } else {
+                gid_min = 1;
+                gid_max = getdef_unum ("GID_MIN", 500) - 1;
+        }
 
 	/*
 	 * Start with some GID value if the user didn't provide us with
@@ -1017,7 +1041,7 @@
 			{NULL, 0, NULL, '\0'}
 		};
 		while ((c =
-			getopt_long (argc, argv, "b:c:d:De:f:g:G:k:K:mMop:s:u:",
+			getopt_long (argc, argv, "b:c:d:De:f:g:G:k:K:mMnrop:s:u:",
 				     long_options, NULL)) != -1) {
 			switch (c) {
 			case 'b':
@@ -1189,6 +1213,15 @@
 				user_id = get_uid (optarg);
 				uflg++;
 				break;
+                        case 'n':
+                                nflg++;
+                                break;
+                        case 'r':
+                                rflg++;
+                                break;
+                        case 'M':
+                                Mflg++;
+                                break;
 			default:
 				usage ();
 			}
@@ -1196,6 +1229,9 @@
 		}
 	}
 
+        if (mflg && Mflg) /* the admin is not decided .. create or not ? */
+               usage();
+
 	/*
 	 * Certain options are only valid in combination with others.
 	 * Check it here so that they can be specified in any order.
@@ -1701,6 +1737,14 @@
 	}
 #endif				/* USE_PAM */
 
+        if (!rflg) /* for system accounts defaults are ignored and we
+                    * do not create a home dir -- gafton */
+        	if (getdef_bool("CREATE_HOME"))
+               		mflg = 1;
+
+        if (Mflg) /* absolutely sure that we do not create home dirs */
+        	mflg = 0;
+
 	/*
 	 * See if we are messing with the defaults file, or creating
 	 * a new user.
@@ -1731,7 +1775,7 @@
 	 * to that group, use useradd -g username username.
 	 * --bero
 	 */
-	if (!gflg) {
+	if ( !(nflg || gflg) ) {
 		if (getgrnam (user_name)) {
 			fprintf (stderr,
 				 _
@@ -1782,25 +1826,18 @@
 				 ("%s: warning: the home directory already exists.\n"
 				  "Not copying any file from skel directory into it.\n"),
 				 Prog);
-
-	} else if (getdef_str ("CREATE_HOME")) {
-		/*
-		 * RedHat added the CREATE_HOME option in login.defs in their
-		 * version of shadow-utils (which makes -m the default, with
-		 * new -M option to turn it off). Unfortunately, this
-		 * changes the way useradd works (it can be run by scripts
-		 * expecting some standard behaviour), compared to other
-		 * Unices and other Linux distributions, and also adds a lot
-		 * of confusion :-(.
-		 * So we now recognize CREATE_HOME and give a warning here
-		 * (better than "configuration error ... notify administrator"
-		 * errors in every program that reads /etc/login.defs). -MM
-		 */
-		fprintf (stderr,
-			 _
-			 ("%s: warning: CREATE_HOME not supported, please use -m instead.\n"),
-			 Prog);
 	}
+        /* Warning removed to protect the innocent. */
+        /*
+         * The whole idea about breaking some stupid scripts by creating a new
+         * variable is crap - I could care less about the scripts. Historically
+         * adduser type programs have always created the home directories and
+         * I don't like the idea of providing a script when we can fix the
+         * binary itself. And if the scripts are using the right options to the
+         * useradd then they will not break. If not, they depend on unspecified
+         * behavior and they will break, but they were broken anyway to begin
+         * with --gafton
+         */
 
 	create_mail ();
 
--- shadow-4.0.17/src/groupadd.c.redhat	2006-06-24 07:52:00.000000000 +0200
+++ shadow-4.0.17/src/groupadd.c	2006-07-17 11:46:54.000000000 +0200
@@ -74,6 +74,7 @@
 static int oflg = 0;		/* permit non-unique group ID to be specified with -g */
 static int gflg = 0;		/* ID value for the new group */
 static int fflg = 0;		/* if group already exists, do nothing and exit(0) */
+static int rflg = 0;            /* for adding system accounts (Red Hat) */
 
 /* local function prototypes */
 static void usage (void);
@@ -99,6 +100,7 @@
 			   "Options:\n"
 			   "  -f, --force			force exit with success status if the specified\n"
 			   "				group already exists\n"
+			   "  -r,                       create system account\n"
 			   "  -g, --gid GID			use GID for the new group\n"
 			   "  -h, --help			display this help message and exit\n"
 			   "  -K, --key KEY=VALUE		overrides /etc/login.defs defaults\n"
@@ -197,8 +199,13 @@
 	const struct group *grp;
 	gid_t gid_min, gid_max;
 
-	gid_min = getdef_unum ("GID_MIN", 1000);
-	gid_max = getdef_unum ("GID_MAX", 60000);
+	if (!rflg) {
+		gid_min = getdef_unum ("GID_MIN", 500);
+                gid_max = getdef_unum ("GID_MAX", 60000);
+        } else {
+                gid_min = 1;
+                gid_max = getdef_unum ("GID_MIN", 500) - 1;
+        }
 
 	/*
 	 * Start with some GID value if the user didn't provide us with
@@ -412,7 +419,7 @@
 		};
 
 		while ((c =
-			getopt_long (argc, argv, "fg:hK:o", long_options,
+			getopt_long (argc, argv, "frg:hK:o", long_options,
 				     &option_index)) != -1) {
 			switch (c) {
 			case 'f':
@@ -425,6 +432,12 @@
 				 */
 				fflg++;
 				break;
+	                case 'r':
+	                        /*
+	                         * create a system group
+	                         */
+	                        rflg++;
+	                        break;
 			case 'g':
 				gflg++;
 				if (!isdigit (optarg[0]))
