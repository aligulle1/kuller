commit 3ce53fc4c57603d99c330a6ee2fe96d94f2d350f
Author: Steve French <sfrench@us.ibm.com>
Date:   Fri Jun 8 14:55:14 2007 +0000

    [CIFS] CIFS should honour umask
    
    This patch makes CIFS honour a process' umask like other filesystems.
    Of course the server is still free to munge the permissions if it wants
    to; but the client will send the "right" permissions to begin with.
    
    A few caveats:
    
    1) It only applies to filesystems that have CAP_UNIX (aka support unix
    extensions)
    2) It applies the correct mode to the follow up CIFSSMBUnixSetPerms()
    after remote creation
    
    When mode to CIFS/NTFS ACL mapping is complete we can do the
    same thing for that case for servers which do not
    support the Unix Extensions.
    
    Signed-off-by: Matt Keenen <matt@opcode-solutions.com>
    Signed-off-by: Steve French <sfrench@us.ibm.com>

Index: pardus-2.6/fs/cifs/dir.c
===================================================================
--- pardus-2.6.orig/fs/cifs/dir.c
+++ pardus-2.6/fs/cifs/dir.c
@@ -226,7 +226,8 @@ cifs_create(struct inode *inode, struct 
 		/* If Open reported that we actually created a file
 		then we now have to set the mode if possible */
 		if ((cifs_sb->tcon->ses->capabilities & CAP_UNIX) &&
-			(oplock & CIFS_CREATE_ACTION))
+			(oplock & CIFS_CREATE_ACTION)) {
+			mode &= ~current->fs->umask;
 			if(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_SET_UID) {
 				CIFSSMBUnixSetPerms(xid, pTcon, full_path, mode,
 					(__u64)current->fsuid,
@@ -244,7 +245,7 @@ cifs_create(struct inode *inode, struct 
 					cifs_sb->mnt_cifs_flags & 
 						CIFS_MOUNT_MAP_SPECIAL_CHR);
 			}
-		else {
+		} else {
 			/* BB implement mode setting via Windows security descriptors */
 			/* eg CIFSSMBWinSetPerms(xid,pTcon,full_path,mode,-1,-1,local_nls);*/
 			/* could set r/o dos attribute if mode & 0222 == 0 */
@@ -363,6 +364,7 @@ int cifs_mknod(struct inode *inode, stru
 	if(full_path == NULL)
 		rc = -ENOMEM;
 	else if (pTcon->ses->capabilities & CAP_UNIX) {
+		mode &= ~current->fs->umask;
 		if(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_SET_UID) {
 			rc = CIFSSMBUnixSetPerms(xid, pTcon, full_path,
 				mode,(__u64)current->fsuid,(__u64)current->fsgid,
Index: pardus-2.6/fs/cifs/inode.c
===================================================================
--- pardus-2.6.orig/fs/cifs/inode.c
+++ pardus-2.6/fs/cifs/inode.c
@@ -991,7 +991,8 @@ mkdir_get_info:
 		  * failed to get it from the server or was set bogus */ 
 		if ((direntry->d_inode) && (direntry->d_inode->i_nlink < 2))
 				direntry->d_inode->i_nlink = 2; 
-		if (cifs_sb->tcon->ses->capabilities & CAP_UNIX)
+		if (cifs_sb->tcon->ses->capabilities & CAP_UNIX) {
+			mode &= ~current->fs->umask;
 			if (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_SET_UID) {
 				CIFSSMBUnixSetPerms(xid, pTcon, full_path,
 						    mode,
@@ -1009,7 +1010,7 @@ mkdir_get_info:
 						    cifs_sb->mnt_cifs_flags & 
 						    CIFS_MOUNT_MAP_SPECIAL_CHR);
 			}
-		else {
+		} else {
 			/* BB to be implemented via Windows secrty descriptors
 			   eg CIFSSMBWinSetPerms(xid, pTcon, full_path, mode,
 						 -1, -1, local_nls); */
