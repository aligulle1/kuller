diff -Nur mplayer-20060923-old/cfg-mplayer.h mplayer-20060923/cfg-mplayer.h
--- mplayer-20060923-old/cfg-mplayer.h	2006-09-24 18:58:35.012743928 +0300
+++ mplayer-20060923/cfg-mplayer.h	2006-09-24 19:02:37.669854440 +0300
@@ -72,6 +72,8 @@
 
 #ifdef HAVE_MENU
 extern int menu_startup;
+extern int menu_utf8;
+extern int menu_unicode;
 #endif
 
 #ifdef HAVE_ZR
@@ -291,6 +293,8 @@
 	{"menu-root", &menu_root, CONF_TYPE_STRING, CONF_GLOBAL, 0, 0, NULL},
 	{"menu-cfg", &menu_cfg, CONF_TYPE_STRING, CONF_GLOBAL, 0, 0, NULL},
 	{"menu-startup", &menu_startup, CONF_TYPE_FLAG, CONF_GLOBAL, 0, 1, NULL},
+	{"menu-utf8", &menu_utf8, CONF_TYPE_FLAG, 0, 0, 1, NULL},
+	{"menu-unicode", &menu_unicode, CONF_TYPE_FLAG, 0, 0, 1, NULL},
 #else
 	{"menu", "OSD menu support was not compiled in.\n", CONF_TYPE_PRINT,0, 0, 0, NULL},
 #endif
diff -Nur mplayer-20060923-old/libmenu/menu.c mplayer-20060923/libmenu/menu.c
--- mplayer-20060923-old/libmenu/menu.c	2006-09-24 18:58:34.983748336 +0300
+++ mplayer-20060923/libmenu/menu.c	2006-09-24 19:02:37.670854288 +0300
@@ -293,12 +293,35 @@
     return h;
 }
 
-#ifdef HAVE_FREETYPE
-#define render_txt(t)  { unsigned char* p = t;  while(*p) render_one_glyph(vo_font,*p++); }
-#else
-#define render_txt(t)
-#endif
-    
+int menu_utf8 = 0;
+int menu_unicode = 0;
+
+static int get_next_char(char **txt)
+{
+  int c;
+  c = (unsigned char)*(*txt)++;
+  if (c >= 0x80) {
+    if (menu_utf8){
+      if ((c & 0xe0) == 0xc0)    /* 2 bytes U+00080..U+0007FF*/
+        c = (c & 0x1f)<<6 | ((unsigned char)*(*txt)++ & 0x3f);
+      else if((c & 0xf0) == 0xe0){ /* 3 bytes U+00800..U+00FFFF*/
+        c = (((c & 0x0f)<<6) | ((unsigned char)*(*txt)++ & 0x3f))<<6;
+        c |= ((unsigned char)*(*txt)++ & 0x3f);
+      }
+    } else if (menu_unicode)
+      c = (c<<8) + (unsigned char)*(*txt)++;
+  }
+  if (!c) c++; // avoid UCS 0
+  return c;
+}
+
+static void render_txt(char *txt)
+{
+  while (*txt) {
+    int c = get_next_char(&txt);
+    render_one_glyph(vo_font, c);
+  }
+}
 
 void menu_draw_text(mp_image_t* mpi,char* txt, int x, int y) {
   draw_alpha_f draw_alpha = get_draw_alpha(mpi->imgfmt);
@@ -312,7 +335,7 @@
   render_txt(txt);
 
   while (*txt) {
-    unsigned char c=*txt++;
+    int c=get_next_char(&txt);
     if ((font=vo_font->font[c])>=0 && (x + vo_font->width[c] <= mpi->w) && (y + vo_font->pic_a[font]->h <= mpi->h))
       draw_alpha(vo_font->width[c], vo_font->pic_a[font]->h,
 		 vo_font->pic_b[font]->bmp+vo_font->start[c],
@@ -402,7 +425,7 @@
   
   // Jump some the beginnig text if needed
   while(sy < ymin && *txt) {
-    unsigned char c=*txt++;
+    int c=get_next_char(&txt);
     if(c == '\n' || (warp && ll + vo_font->width[c] > w)) {
       ll = 0;
       sy += vo_font->height + vspace;
@@ -476,7 +499,7 @@
     }
 
     while(sx < xmax && txt != line_end) {
-      unsigned char c = *txt++;
+      int c=get_next_char(&txt);
       font = vo_font->font[c];
       if(font >= 0) {
  	int cs = (vo_font->pic_a[font]->h - vo_font->height) / 2;
@@ -504,7 +527,7 @@
   int l = 0;
   render_txt(txt);
   while (*txt) {
-    unsigned char c=*txt++;
+    int c=get_next_char(&txt);
     l += vo_font->width[c]+vo_font->charspace;
   }
   return l - vo_font->charspace;
@@ -516,7 +539,7 @@
 
   render_txt(txt);
   while (*txt) {
-    unsigned char c=*txt++;
+    int c=get_next_char(&txt);
     if(c == '\n' || (warp && i + vo_font->width[c] >= max_width)) {
       if(*txt)
 	l++;
@@ -536,7 +559,7 @@
   int l = 1, i = 0;
   render_txt(txt);
   while (*txt) {
-    unsigned char c=*txt++;
+    int c=get_next_char(&txt);
     if(c == '\n' || i + vo_font->width[c] > max_width) {
       l++;
       i = 0;
@@ -551,7 +574,7 @@
   int i = 0;
   render_txt(txt);
   while (*txt) {
-    unsigned char c=*txt;
+    int c=get_next_char(&txt);
     if(c == '\n') {
       txt++;
       break;
