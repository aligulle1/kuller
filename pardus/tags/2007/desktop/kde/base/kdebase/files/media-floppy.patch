Index: kioslave/media/mediamanager/halbackend.cpp
===================================================================
--- kioslave/media/mediamanager/halbackend.cpp	(revision 605183)
+++ kioslave/media/mediamanager/halbackend.cpp	(working copy)
@@ -643,7 +635,7 @@
     {
         // HAL hates floppies - so we have to do it twice ;(
         medium->mountableState(libhal_drive_get_device_file(halDrive), QString::null, QString::null, false);
-        setFstabProperties( medium );
+        setFloppyMountState(medium);
     }
 
     if (libhal_device_get_property_QString(m_halContext, udi, "storage.drive_type") == "floppy")
@@ -678,6 +670,29 @@
     libhal_volume_free(halVolume);
 }
 
+void HALBackend::setFloppyMountState( Medium *medium )
+{
+    if ( !medium->id().startsWith( "/org/kde" ) )
+    {
+        KMountPoint::List mtab = KMountPoint::currentMountPoints();
+        KMountPoint::List::iterator it = mtab.begin();
+        KMountPoint::List::iterator end = mtab.end();
+
+        QString fstype;
+        QString mountpoint;
+        for (; it!=end; ++it)
+        {
+            if ((*it)->mountedFrom() == medium->deviceNode() )
+            {
+                fstype = (*it)->mountType().isNull() ? (*it)->mountType() : "auto";
+                mountpoint = (*it)->mountPoint();
+                medium->mountableState( medium->deviceNode(), mountpoint, fstype, true );
+                return;
+            }
+        }
+    }
+}
+
 void HALBackend::setCameraProperties(Medium* medium)
 {
     kdDebug(1219) << "HALBackend::setCameraProperties for " << medium->id() << endl;
Index: kioslave/media/mediamanager/halbackend.h
===================================================================
--- kioslave/media/mediamanager/halbackend.h	(revision 605180)
+++ kioslave/media/mediamanager/halbackend.h	(working copy)
@@ -151,6 +151,7 @@
 	void setCameraProperties(Medium* medium);
 	QString generateName(const QString &devNode);
 	static QString isInFstab(const Medium *medium);
+    void setFloppyMountState(Medium* medium);
 	static QString listUsingProcesses(const Medium *medium);
 
 private slots:
