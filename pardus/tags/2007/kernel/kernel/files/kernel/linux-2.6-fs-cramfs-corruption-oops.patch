Steve Grubb's fzfuzzer tool (http://people.redhat.com/sgrubb/files/ 
fsfuzzer-0.6.tar.gz) generates corrupt Cramfs filesystems which cause  
Cramfs to kernel oops in cramfs_uncompress_block().  The cause of the  
oops is an unchecked corrupted block length field read by  
cramfs_readpage().

This patch adds a sanity check to cramfs_readpage() which checks that  
the block length field is sensible.   The (PAGE_CACHE_SIZE << 1) size  
check is intentional, even though the uncompressed data is not going  
to be larger than PAGE_CACHE_SIZE, gzip sometimes generates  
compressed data larger than the original source data. Mkcramfs checks  
that the compressed size is always less than or equal to  
PAGE_CACHE_SIZE << 1.  Of course Cramfs could use the original  
uncompressed data in this case, but it doesn't.

Patch is against 2.6.19-rc4.

Signed-off-by:  Phillip Lougher <phillip <at> lougher.org.uk>
--- fs/cramfs/inode.c.orig	2006-11-10 14:49:27.000000000 +0200
+++ fs/cramfs/inode.c	2006-11-10 14:50:12.000000000 +0200
@@ -483,6 +483,8 @@
 		pgdata = kmap(page);
 		if (compr_len == 0)
 			; /* hole */
+		else if (compr_len > (PAGE_CACHE_SIZE << 1))
+			printk(KERN_ERR "cramfs: bad compressed blocksize %u\n", compr_len);
 		else {
 			mutex_lock(&read_mutex);
 			bytes_filled = cramfs_uncompress_block(pgdata,
