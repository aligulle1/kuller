Subject: Add heuristics to enable/disable local APIC
From: ak@suse.de
Patch-mainline: maybe

Adds a new heuristical APIC mode that is similar to the old SUSE APIC_OFF,
but does DTRT on UP systems with SMP kernels and has some more tweaks.

This is a much cleaner patch than before.

Index: linux-2.6.17/Documentation/kernel-parameters.txt
===================================================================
--- linux-2.6.17.orig/Documentation/kernel-parameters.txt
+++ linux-2.6.17/Documentation/kernel-parameters.txt
@@ -1021,6 +1021,10 @@ running once the system is up.
 	noapic		[SMP,APIC] Tells the kernel to not make use of any
 			IOAPICs that may be present in the system.
 
+	apic		[APIC,i386] Override default heuristics to enable/disable the local
+			APIC by CONFIG_X86_APIC_AUTO. When this option is set the kernel
+			will try to use the local APIC.
+
 	noasync		[HW,M68K] Disables async and sync negotiation for
 			all devices.
 
Index: linux-2.6.17/arch/i386/Kconfig
===================================================================
--- linux-2.6.17.orig/arch/i386/Kconfig
+++ linux-2.6.17/arch/i386/Kconfig
@@ -299,6 +299,16 @@ config X86_LOCAL_APIC
 	depends on X86_UP_APIC || ((X86_VISWS || SMP) && !(X86_VOYAGER || XEN_UNPRIVILEGED_GUEST))
 	default y
 
+config X86_APIC_AUTO
+        bool "Use heuristics to enable/disable local APIC"
+	depends on X86_LOCAL_APIC
+	help
+	  This option uses some proven heuristics to automatically enable or disable the local
+	  APIC. All decisions can be overriden by command line options.
+	  In a nutshell very old systems run better with APIC off and newer or multiprocessor 
+	  systems prefer APIC on
+	  This is a useful default for distribution kernels.
+
 config X86_IO_APIC
 	bool
 	depends on X86_UP_IOAPIC || (SMP && !(X86_VISWS || X86_VOYAGER || XEN_UNPRIVILEGED_GUEST))
Index: linux-2.6.17/arch/i386/kernel/apic.c
===================================================================
--- linux-2.6.17.orig/arch/i386/kernel/apic.c
+++ linux-2.6.17/arch/i386/kernel/apic.c
@@ -26,6 +26,7 @@
 #include <linux/sysdev.h>
 #include <linux/cpu.h>
 #include <linux/module.h>
+#include <linux/dmi.h>
 
 #include <asm/atomic.h>
 #include <asm/smp.h>
@@ -53,6 +54,9 @@ static cpumask_t timer_bcast_ipi;
  * Knob to control our willingness to enable the local APIC.
  */
 int enable_local_apic __initdata = 0; /* -1=force-disable, +1=force-enable */
+int prefer_apic __initdata = 0;	/* when enable_local_apic == 0 prefer APIC but don't force against
+				   BIOS wishes */
+int apic_disabled_by_dmi __initdata;
 
 /*
  * Debug level
@@ -753,6 +757,10 @@ static void apic_pm_activate(void) { }
 
 static int __init apic_set_verbosity(char *str)
 {
+	if (*str == '=')
+		++str;
+	if (*str == 0)
+		prefer_apic = 1;
 	if (strcmp("debug", str) == 0)
 		apic_verbosity = APIC_DEBUG;
 	else if (strcmp("verbose", str) == 0)
@@ -760,7 +768,7 @@ static int __init apic_set_verbosity(cha
 	return 1;
 }
 
-__setup("apic=", apic_set_verbosity);
+__setup("apic", apic_set_verbosity);
 
 static int __init detect_init_APIC (void)
 {
@@ -791,8 +799,9 @@ static int __init detect_init_APIC (void
 		 * APIC only if "lapic" specified.
 		 */
 		if (enable_local_apic <= 0) {
-			printk("Local APIC disabled by BIOS -- "
-			       "you can enable it with \"lapic\"\n");
+			if (!apic_disabled_by_dmi)
+				printk("Local APIC disabled by BIOS -- "
+				       "you can enable it with \"lapic\"\n");
 			return -1;
 		}
 		/*
@@ -1328,6 +1337,64 @@ fastcall void smp_error_interrupt(struct
 	irq_exit();
 }
 
+#ifdef CONFIG_X86_APIC_AUTO
+
+/* Some heuristics to decide when to enable the APICs */
+
+static __init int dmi_enable_apic(void)
+{
+	int year;
+	int apic;
+	char *vendor; 
+
+	/* If the machine has more than one CPU try to use APIC because it'll 
+	   be running the SMP kernel with APIC soon anyways. 
+	   This won't cover dual core, but they are handled by the date check 
+	   below. */
+	if (dmi_cpus > 1)
+		return 1;
+
+	year = dmi_get_year(DMI_BIOS_DATE);
+	vendor = dmi_get_system_info(DMI_BIOS_VENDOR);
+	apic = 0;
+
+	/* All Intel BIOS since 1998 assumed APIC on. Don't include 1998 itself
+	   because we're not sure for that. */
+	if (vendor && !strncmp(vendor, "Intel", 5))
+		apic = 1;
+	/* Use APIC for anything since 2001 */
+	else if (year >= 2001) 
+		apic = 1;
+
+#ifdef CONFIG_ACPI
+	/* When ACPI is disabled also default to APIC off on very new systems (>= 2004)
+	   which typically don't have working mptables anymore */
+	if (acpi_noirq && year >= 2004)
+		apic = 0;
+#endif
+
+	if (!apic)
+		apic_disabled_by_dmi = 1;	
+
+	return apic;
+}
+
+void __init dmi_check_apic(void)
+{
+	if (enable_local_apic != 0 || prefer_apic)
+		return;
+	if (!dmi_enable_apic()) {
+		clear_bit(X86_FEATURE_APIC, boot_cpu_data.x86_capability);
+		nr_ioapics = 0;
+		enable_local_apic = -1;
+		printk(KERN_INFO "IO/L-APIC disabled because your old system seems to be old\n"); 
+		printk(KERN_INFO "overwrite with \"apic\"\n");
+		return;
+	}
+	printk(KERN_INFO "IO/L-APIC allowed because system is MP or new enough\n");
+}
+#endif
+
 /*
  * This initializes the IO-APIC and APIC hardware if this is
  * a UP kernel.
Index: linux-2.6.17/drivers/firmware/dmi_scan.c
===================================================================
--- linux-2.6.17.orig/drivers/firmware/dmi_scan.c
+++ linux-2.6.17/drivers/firmware/dmi_scan.c
@@ -154,6 +154,8 @@ static void __init dmi_save_ipmi_device(
 	list_add(&dev->list, &dmi_devices);
 }
 
+int dmi_cpus;
+
 /*
  *	Process a DMI table entry. Right now all we care about are the BIOS
  *	and machine entries. For 2.5 we should pull the smbus controller info
@@ -178,6 +180,9 @@ static void __init dmi_decode(struct dmi
 		dmi_save_ident(dm, DMI_BOARD_NAME, 5);
 		dmi_save_ident(dm, DMI_BOARD_VERSION, 6);
 		break;
+	case 4:		/* Central Processor */
+		dmi_cpus++;
+		break;
 	case 10:	/* Onboard Devices Information */
 		dmi_save_devices(dm);
 		break;
Index: linux-2.6.17/include/linux/dmi.h
===================================================================
--- linux-2.6.17.orig/include/linux/dmi.h
+++ linux-2.6.17/include/linux/dmi.h
@@ -68,7 +68,7 @@ extern struct dmi_device * dmi_find_devi
 	struct dmi_device *from);
 extern void dmi_scan_machine(void);
 extern int dmi_get_year(int field);
-
+extern int dmi_cpus;
 #else
 
 static inline int dmi_check_system(struct dmi_system_id *list) { return 0; }
Index: linux-2.6.17/arch/i386/kernel/setup.c
===================================================================
--- linux-2.6.17.orig/arch/i386/kernel/setup.c
+++ linux-2.6.17/arch/i386/kernel/setup.c
@@ -61,6 +61,7 @@
 #include <asm/io.h>
 #include <setup_arch.h>
 #include <bios_ebda.h>
+#include <asm/apic.h>
 
 /* Forward Declaration. */
 void __init find_max_pfn(void);
@@ -865,7 +866,7 @@ static void __init parse_cmdline_early (
 
 #ifdef CONFIG_X86_LOCAL_APIC
 		/* enable local APIC */
-		else if (!memcmp(from, "lapic", 5))
+		else if (!memcmp(from, "lapic", 5) || !memcmp(from, "apic", 4))
 			lapic_enable();
 
 		/* disable local APIC */
@@ -1543,6 +1544,10 @@ void __init setup_arch(char **cmdline_p)
 	if (efi_enabled)
 		efi_map_memmap();
 
+#ifdef CONFIG_X86_APIC_AUTO
+	dmi_check_apic();
+#endif
+
 #ifdef CONFIG_ACPI
 	/*
 	 * Parse the ACPI tables for possible boot-time SMP configuration.
@@ -1565,7 +1570,7 @@ void __init setup_arch(char **cmdline_p)
 #endif
 #endif
 #ifdef CONFIG_X86_LOCAL_APIC
-	if (smp_found_config)
+	if (smp_found_config && cpu_has_apic)
 		get_smp_config();
 #endif
 
Index: linux-2.6.17/include/asm-i386/apic.h
===================================================================
--- linux-2.6.17.orig/include/asm-i386/apic.h
+++ linux-2.6.17/include/asm-i386/apic.h
@@ -128,6 +128,8 @@ void switch_ipi_to_APIC_timer(void *cpum
 
 extern int timer_over_8254;
 
+extern void dmi_check_apic(void);
+
 #else /* !CONFIG_X86_LOCAL_APIC */
 static inline void lapic_shutdown(void) { }
 
Index: linux-2.6.17/arch/i386/kernel/mpparse.c
===================================================================
--- linux-2.6.17.orig/arch/i386/kernel/mpparse.c
+++ linux-2.6.17/arch/i386/kernel/mpparse.c
@@ -673,6 +673,11 @@ void __init get_smp_config (void)
 	else if (acpi_lapic)
 		printk(KERN_INFO "Using ACPI for processor (LAPIC) configuration information\n");
 
+	else if (enable_local_apic < 0) {
+		smp_found_config = 0;
+		return;
+	}
+
 	printk(KERN_INFO "Intel MultiProcessor Specification v1.%d\n", mpf->mpf_specification);
 	if (mpf->mpf_feature2 & (1<<7)) {
 		printk(KERN_INFO "    IMCR and PIC compatibility mode.\n");
