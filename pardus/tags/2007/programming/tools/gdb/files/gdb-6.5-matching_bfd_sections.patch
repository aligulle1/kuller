2006-10-17  Daniel Jacobowitz  <dan@codesourcery.com>

	* Makefile.in (symtab.o): Update.
	* symtab.h (matching_bfd_sections): New prototype.
	* symtab.c (matching_bfd_sections): New.
	(find_pc_sect_psymbol, find_pc_sect_symtab): Use it.
	* minsyms.c (lookup_minimal_symbol_by_pc_section): Likewise.
	* printcmd.c (sym_info): Ignore separate debug objfiles.


Index: ./gdb/Makefile.in
===================================================================
RCS file: /cvs/src/src/gdb/Makefile.in,v
retrieving revision 1.846
retrieving revision 1.847
diff -u -p -r1.846 -r1.847
--- ./gdb/Makefile.in	10 Oct 2006 03:17:53 -0000	1.846
+++ ./gdb/Makefile.in	17 Oct 2006 20:17:44 -0000	1.847
@@ -2754,7 +2754,7 @@ symtab.o: symtab.c $(defs_h) $(symtab_h)
 	$(language_h) $(demangle_h) $(inferior_h) $(linespec_h) $(source_h) \
 	$(filenames_h) $(objc_lang_h) $(ada_lang_h) $(hashtab_h) \
 	$(gdb_obstack_h) $(block_h) $(dictionary_h) $(gdb_string_h) \
-	$(gdb_stat_h) $(cp_abi_h) $(observer_h)
+	$(gdb_stat_h) $(cp_abi_h) $(observer_h) $(gdb_assert_h)
 target.o: target.c $(defs_h) $(gdb_string_h) $(target_h) $(gdbcmd_h) \
 	$(symtab_h) $(inferior_h) $(bfd_h) $(symfile_h) $(objfiles_h) \
 	$(gdb_wait_h) $(dcache_h) $(regcache_h) $(gdb_assert_h) $(gdbcore_h) \
diff -u -p
--- ./gdb/minsyms.c	19 Jul 2006 02:17:23 -0000	1.46
+++ ./gdb/minsyms.c	17 Oct 2006 20:17:44 -0000	1.47
@@ -360,7 +360,6 @@ lookup_minimal_symbol_solib_trampoline (
   return NULL;
 }
 
-
 /* Search through the minimal symbol table for each objfile and find
    the symbol whose address is the largest address that is still less
    than or equal to PC, and matches SECTION (if non-NULL).  Returns a
@@ -491,7 +490,8 @@ lookup_minimal_symbol_by_pc_section (COR
 		       /* Don't ignore symbols for solib trampolines
 			  Red Hat Bug 200533 and Bug 192964.  */
 		       && MSYMBOL_TYPE (&msymbol[hi]) != mst_solib_trampoline
-		       && SYMBOL_BFD_SECTION (&msymbol[hi]) != section)
+		      && (!matching_bfd_sections
+			  (SYMBOL_BFD_SECTION (&msymbol[hi]), section)))
 		  --hi;
 
 	      if (hi >= 0
Index: ./gdb/printcmd.c
===================================================================
RCS file: /cvs/src/src/gdb/printcmd.c,v
retrieving revision 1.98
retrieving revision 1.99
diff -u -p -r1.98 -r1.99
--- ./gdb/printcmd.c	17 Jul 2006 22:15:55 -0000	1.98
+++ ./gdb/printcmd.c	17 Oct 2006 20:17:44 -0000	1.99
@@ -983,6 +983,11 @@ sym_info (char *arg, int from_tty)
   addr = parse_and_eval_address (arg);
   ALL_OBJSECTIONS (objfile, osect)
   {
+    /* Only process each object file once, even if there's a separate
+       debug file.  */
+    if (objfile->separate_debug_objfile_backlink)
+      continue;
+
     sect = osect->the_bfd_section;
     sect_addr = overlay_mapped_address (addr, sect);
 
Index: ./gdb/symtab.c
===================================================================
RCS file: /cvs/src/src/gdb/symtab.c,v
retrieving revision 1.147
retrieving revision 1.148
diff -u -p -r1.147 -r1.148
--- ./gdb/symtab.c	11 May 2006 09:29:52 -0000	1.147
+++ ./gdb/symtab.c	17 Oct 2006 20:17:44 -0000	1.148
@@ -56,6 +56,7 @@
 #include <ctype.h>
 #include "cp-abi.h"
 #include "observer.h"
+#include "gdb_assert.h"
 
 /* Prototypes for local functions */
 
@@ -706,6 +707,64 @@ init_sal (struct symtab_and_line *sal)
 }
 
 
+/* Return 1 if the two sections are the same, or if they could
+   plausibly be copies of each other, one in an original object
+   file and another in a separated debug file.  */
+
+int
+matching_bfd_sections (asection *first, asection *second)
+{
+  struct objfile *obj;
+
+  /* If they're the same section, then they match.  */
+  if (first == second)
+    return 1;
+
+  /* If either is NULL, give up.  */
+  if (first == NULL || second == NULL)
+    return 0;
+
+  /* This doesn't apply to absolute symbols.  */
+  if (first->owner == NULL || second->owner == NULL)
+    return 0;
+
+  /* If they're in the same object file, they must be different sections.  */
+  if (first->owner == second->owner)
+    return 0;
+
+  /* Check whether the two sections are potentially corresponding.  They must
+     have the same size, address, and name.  We can't compare section indexes,
+     which would be more reliable, because some sections may have been
+     stripped.  */
+  if (bfd_get_section_size (first) != bfd_get_section_size (second))
+    return 0;
+
+  if (bfd_get_section_vma (first->owner, first)
+      != bfd_get_section_vma (second->owner, second))
+    return 0;
+
+  if (bfd_get_section_name (first->owner, first) == NULL
+      || bfd_get_section_name (second->owner, second) == NULL
+      || strcmp (bfd_get_section_name (first->owner, first),
+		 bfd_get_section_name (second->owner, second)) != 0)
+    return 0;
+
+  /* Otherwise check that they are in corresponding objfiles.  */
+
+  ALL_OBJFILES (obj)
+    if (obj->obfd == first->owner)
+      break;
+  gdb_assert (obj != NULL);
+
+  if (obj->separate_debug_objfile != NULL
+      && obj->separate_debug_objfile->obfd == second->owner)
+    return 1;
+  if (obj->separate_debug_objfile_backlink != NULL
+      && obj->separate_debug_objfile_backlink->obfd == second->owner)
+    return 1;
+
+  return 0;
+}
 
 /* Find which partial symtab contains PC and SECTION.  Return 0 if
    none.  We return the psymtab that contains a symbol whose address
@@ -845,7 +904,7 @@ find_pc_sect_psymbol (struct partial_sym
 	  if (section)		/* match on a specific section */
 	    {
 	      fixup_psymbol_section (p, psymtab->objfile);
-	      if (SYMBOL_BFD_SECTION (p) != section)
+	      if (!matching_bfd_sections (SYMBOL_BFD_SECTION (p), section))
 		continue;
 	    }
 	  best_pc = SYMBOL_VALUE_ADDRESS (p);
@@ -869,7 +928,7 @@ find_pc_sect_psymbol (struct partial_sym
 	  if (section)		/* match on a specific section */
 	    {
 	      fixup_psymbol_section (p, psymtab->objfile);
-	      if (SYMBOL_BFD_SECTION (p) != section)
+	      if (!matching_bfd_sections (SYMBOL_BFD_SECTION (p), section))
 		continue;
 	    }
 	  best_pc = SYMBOL_VALUE_ADDRESS (p);
@@ -1902,7 +1961,7 @@ find_pc_sect_symtab (CORE_ADDR pc, asect
 	    ALL_BLOCK_SYMBOLS (b, iter, sym)
 	      {
 		fixup_symbol_section (sym, objfile);
-		if (section == SYMBOL_BFD_SECTION (sym))
+		if (matching_bfd_sections (SYMBOL_BFD_SECTION (sym), section))
 		  break;
 	      }
 	    if (sym == NULL)
Index: ./gdb/symtab.h
===================================================================
RCS file: /cvs/src/src/gdb/symtab.h,v
retrieving revision 1.97
retrieving revision 1.98
diff -u -p -r1.97 -r1.98
--- ./gdb/symtab.h	18 Mar 2006 18:40:04 -0000	1.97
+++ ./gdb/symtab.h	17 Oct 2006 20:17:45 -0000	1.98
@@ -1316,6 +1316,8 @@ extern char **make_source_files_completi
 
 /* symtab.c */
 
+int matching_bfd_sections (asection *, asection *);
+
 extern struct partial_symtab *find_main_psymtab (void);
 
 extern struct symtab *find_line_symtab (struct symtab *, int, int *, int *);
