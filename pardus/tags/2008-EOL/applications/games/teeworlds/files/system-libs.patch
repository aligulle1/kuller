--- default.bam.orig	2008-08-31 16:30:59.000000000 +0300
+++ default.bam	2008-09-20 18:11:20.000000000 +0300
@@ -214,7 +214,6 @@
 
 	-- set some platform specific settings
 	settings.cc.includes:add("src")
-	settings.cc.includes:add("src/external/zlib")
 
 	if family == "unix" then
    		if platform == "macosx" then
@@ -232,6 +231,7 @@
 			end
 			
 			settings.linker.libs:add("pthread")
+			settings.linker.libs:add("z")
 		end
 	elseif family == "windows" then
 		glfw_platform = "win32"
@@ -244,30 +244,6 @@
 		settings.linker.libs:add("shell32.lib")
 	end
 	
-	-- build glfw
-	glfw_settings = settings:copy()
-	glfw_settings.cc.includes:add("src/external/glfw/include")
-	glfw_settings.cc.includes:add("src/engine/external/glfw/lib")
-	glfw_settings.cc.includes:add("src/engine/external/glfw/lib/" .. glfw_platform)
-
-	glfw = Compile(glfw_settings, Collect(
-		"src/engine/external/glfw/lib/*.c",
-		"src/engine/external/glfw/lib/" .. glfw_platform .. "/*.c"))
-		
-	-- build portaudio
-	pa_settings = settings:copy()
-	pa_settings.cc.defines:add("PA_USE_" .. string.upper(pa_hostapi))
-	pa_settings.cc.defines:add("PA_NO_WMME")
-	pa_settings.cc.defines:add("PA_NO_ASIO")
-	pa_settings.cc.includes:add("src/engine/external/portaudio/include")
-	pa_settings.cc.includes:add("src/engine/external/portaudio/src/common")
-	pa_settings.cc.includes:add("src/engine/external/portaudio/src/os/" .. pa_platform)
-	
-	portaudio = Compile(pa_settings,
-		Collect("src/engine/external/portaudio/src/common/*.c"),
-		Collect("src/engine/external/portaudio/src/os/" .. pa_platform .. "/*.c"),
-		Collect("src/engine/external/portaudio/src/hostapi/" .. pa_hostapi .. "/*.c"))
-	
 	-- build game components
 	engine_settings = settings:copy()
 	
@@ -287,7 +263,7 @@
 
 	-- client
 	client_settings = engine_settings:copy()
-	client_settings.cc.includes:add("src/external/glfw/include")
+	client_settings.cc.includes:add("/usr/include/GL")
 
 	if family == "unix" then
    		if platform == "macosx" then
@@ -301,8 +277,13 @@
 		else
             client_settings.linker.libs:add("asound")
 			client_settings.linker.libs:add("X11")
+			client_settings.linker.libs:add("Xrandr")
 			client_settings.linker.libs:add("GL")
 			client_settings.linker.libs:add("GLU")
+			client_settings.linker.libs:add("z")
+			client_settings.linker.libs:add("wavpack")
+			client_settings.linker.libs:add("portaudio")
+			client_settings.linker.libs:add("glfw")
 		end
 	elseif family == "windows" then
 		client_settings.linker.libs:add("opengl32.lib")
@@ -311,8 +292,6 @@
 	end
 
 	external_settings = settings:copy()
-	zlib = Compile(external_settings, Collect("src/engine/external/zlib/*.c"))
-	wavpack = Compile(external_settings, Collect("src/engine/external/wavpack/*.c"))
 	pnglite = Compile(external_settings, Collect("src/engine/external/pnglite/*.c"))
 
 	engine = Compile(engine_settings, Collect("src/engine/*.c"))
@@ -333,22 +312,22 @@
 	tools = {}
 	for i,v in objs do
 		toolname = PathFilename(PathBase(v))
-		tools[i] = Link(settings, toolname, v, engine, zlib)
+		tools[i] = Link(settings, toolname, v, engine)
 	end
 	
 	-- build client, server, version server and master server
 	client_exe = Link(client_settings, "teeworlds", game_shared, game_client,
-		engine, client, game_editor, glfw, portaudio, zlib, pnglite, wavpack,
+		engine, client, game_editor, pnglite,
 		client_link_other)
 
 	server_exe = Link(server_settings, "teeworlds_srv", engine, server,
-		game_shared, game_server, zlib)
+		game_shared, game_server)
 
 	versionserver_exe = Link(server_settings, "versionsrv", versionserver,
-		engine, zlib)
+		engine)
 		
 	masterserver_exe = Link(server_settings, "mastersrv", masterserver,
-		engine, zlib)
+		engine)
 
 	if platform == "macosx" then
 		osxlaunch_exe = Link(client_settings, "TeeLaunch", osxlaunch)
