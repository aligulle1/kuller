diff -Nur ffmpeg-old/libavcodec/flacenc.c ffmpeg/libavcodec/flacenc.c
--- ffmpeg-old/libavcodec/flacenc.c	2008-08-19 09:50:59.000000000 +0300
+++ ffmpeg/libavcodec/flacenc.c	2008-08-19 09:51:06.000000000 +0300
@@ -96,6 +96,7 @@
     int sr_code[2];
     int max_framesize;
     uint32_t frame_count;
+    uint64_t sample_count;
     FlacFrame frame;
     CompressionOptions options;
     AVCodecContext *avctx;
@@ -134,8 +135,10 @@
     put_bits(&pb, 20, s->samplerate);
     put_bits(&pb, 3, s->channels-1);
     put_bits(&pb, 5, 15);       /* bits per sample - 1 */
+    /* Write the number of samples in two times */
+    put_bits(&pb, 24, (s->sample_count >> 12));
+    put_bits(&pb, 12, s->sample_count);
     flush_put_bits(&pb);
-    /* total samples = 0 */
     /* MD5 signature = 0 */
 }
 
@@ -375,6 +378,7 @@
     avctx->extradata_size = FLAC_STREAMINFO_SIZE;
 
     s->frame_count = 0;
+    s->sample_count = 0;
 
     avctx->coded_frame = avcodec_alloc_frame();
     avctx->coded_frame->key_frame = 1;
@@ -1251,6 +1255,12 @@
         return 0;
     }
 
+    /* When the last block is reached, update the header with the correct number of samples in case of the muxer needs it */
+    if (data == NULL) {
+        write_streaminfo(s, avctx->extradata);
+        return 0;
+    }
+
     init_frame(s);
 
     copy_samples(s, samples);
@@ -1284,6 +1294,8 @@
     }
 
     s->frame_count++;
+    s->sample_count += avctx->frame_size;
+
     return out_bytes;
 }
 
@@ -1304,7 +1316,7 @@
     flac_encode_frame,
     flac_encode_close,
     NULL,
-    .capabilities = CODEC_CAP_SMALL_LAST_FRAME,
+    .capabilities = CODEC_CAP_SMALL_LAST_FRAME | CODEC_CAP_DELAY,
     .sample_fmts = (enum SampleFormat[]){SAMPLE_FMT_S16,SAMPLE_FMT_NONE},
     .long_name = NULL_IF_CONFIG_SMALL("FLAC (Free Lossless Audio Codec)"),
 };
diff -Nur ffmpeg-old/libavformat/raw.c ffmpeg/libavformat/raw.c
--- ffmpeg-old/libavformat/raw.c	2008-08-19 09:50:59.000000000 +0300
+++ ffmpeg/libavformat/raw.c	2008-08-19 09:52:37.000000000 +0300
@@ -42,6 +42,25 @@
     }
     return 0;
 }
+
+static int flac_write_trailer(struct AVFormatContext *s)
+{
+    ByteIOContext *pb = s->pb;
+    uint8_t *streaminfo = s->streams[0]->codec->extradata;
+    int len = s->streams[0]->codec->extradata_size;
+    offset_t file_size;
+
+    if (!url_is_streamed(s->pb)) {
+        file_size = url_ftell(pb);
+        url_fseek(pb, 8, SEEK_SET);
+        put_buffer(pb, streaminfo, len);
+
+        url_fseek(pb, file_size, SEEK_SET);
+
+        put_flush_packet(pb);
+    }
+    return 0;
+}
 #endif
 
 #ifdef CONFIG_ROQ_MUXER
@@ -658,6 +677,7 @@
     CODEC_ID_NONE,
     flac_write_header,
     raw_write_packet,
+    flac_write_trailer,
     .flags= AVFMT_NOTIMESTAMPS,
 };
 #endif
