.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "DEPMOD" "8" "05 Şubat 2008" "" ""

.SH NAME
depmod \- program to generate modules.dep and map files.
.SH SYNOPSIS

\fBdepmod\fR [ \fB-b \fIbasedir\fB\fR ] [ \fB-e\fR ] [ \fB-F \fISystem.map\fB\fR ] [ \fB-n\fR ] [ \fB-v\fR ] [ \fB\fIversion\fB\fR ] [ \fB-A\fR ]


\fBdepmod\fR [ \fB-e\fR ] [ \fB-F\fISystem.map\fB\fR ] [ \fB-n\fR ] [ \fB-v\fR ] [ \fB\fIversion\fB\fR ] [ \fB\fIfilename\fB\fR\fI ...\fR ]

.SH "DESCRIPTION"
.PP
Linux kernel modules can provide services (called "symbols") for
other modules to use (using EXPORT_SYMBOL in the code).  If a
second module uses this symbol, that second module clearly
depends on the first module.  These dependencies can get quite
complex.
.PP
\fBdepmod\fR creates a list of module dependencies,
by reading each module under
\fI/lib/modules/\fR\fIversion\fR 
and determining what symbols it exports, and what symbols it
needs.  By default this list is written to
\fImodules.dep\fR in the same directory.  If
filenames are given on the command line, only those modules are
examined (which is rarely useful, unless all modules are
listed).
.PP
If a \fIversion\fR is provided, then that
kernel version's module directory is used, rather than the
current kernel version (as returned by "uname -r").
.PP
\fBdepmod\fR will also generate various map files
in this directory, for use by the hotplug infrastructure.
.SH "OPTIONS"
.TP
\fB-a --all \fR
Probe all modules. This option is enabled by default if no
file names are given in the command-line.
.TP
\fB-A --quick \fR
This option scans to see if any modules are newer than the
\fImodules.dep\fR file before any work is done:
if not, it silently exits rather than regenerating the files.
.TP
\fB-b \fIbasedir\fB --basedir \fIbasedir\fB \fR
If your modules are not currently in the (normal)
directory
\fI/lib/modules/\fR\fIversion\fR,
but in a staging area, you can specify a
\fIbasedir\fR which is prepended to
the directory name.  This
\fIbasedir\fR is stripped from the
resulting \fImodules.dep\fR file, so it
is ready to be moved into the normal location.
.TP
\fB-C --config \fIfile or directory\fB \fR
This option overrides the default configuration file
(/etc/depmod.conf or /etc/depmod.d/ if that isn’t found).
.TP
\fB-e --errsyms \fR
When combined with the \fB-F\fR option, this
reports any symbols which a module needs which are not
supplied by other modules or the kernel.  Normally, any
symbols not provided by modules are assumed to be
provided by the kernel (which should be true in a
perfect world).
.TP
\fB-F --filesyms \fISystem.map\fB \fR
Supplied with the \fISystem.map\fR produced
when the kernel was built, this allows the
\fB-e\fR option to report unresolved symbols.
.TP
\fB-h --help \fR
Print the help message, and exit.
.TP
\fB-n --dry-run \fR
This sends the resulting modules.dep, then the various
map files, to standard output, rather than writing them into
the module directory.
.TP
\fB-v --verbose \fR
In verbose mode \fBdepmod\fR will print (to stdout)
all the symbols each module depends on and the module’s file name
which provides that symbol.
.TP
\fB-V --version \fR
Show version of program, and exit. See below for caveats when
run on older kernels.
.SH "BACKWARDS COMPATIBILITY"
.PP
This version of \fBdepmod\fR is for kernels
2.5.48 and above.  If it detects a kernel
with support for old-style modules, or the version specified is
before 2.5.48, it will attempt to run
\fBdepmod.old\fR in its place, so it is completely
transparent to the user.
.SH "COPYRIGHT"
.PP
This manual page Copyright 2002, Rusty Russell, IBM Corporation.
.SH "SEE ALSO"
.PP
\fBmodprobe\fR(8),
\fBmodules.dep\fR(5),
\fBdepmod.old\fR(8)
