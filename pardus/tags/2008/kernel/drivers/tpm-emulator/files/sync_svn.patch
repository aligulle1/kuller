diff -Nuar tpm_emulator-0.5.orig/crypto/bn.c tpm_emulator-0.5/crypto/bn.c
--- tpm_emulator-0.5.orig/crypto/bn.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/bn.c	2006-11-15 19:07:36.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: bn.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: bn.c 152 2006-11-15 17:07:36Z mast $
  */
  
 #include "bn.h"
diff -Nuar tpm_emulator-0.5.orig/crypto/bn.h tpm_emulator-0.5/crypto/bn.h
--- tpm_emulator-0.5.orig/crypto/bn.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/bn.h	2006-11-15 19:07:36.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: bn.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: bn.h 152 2006-11-15 17:07:36Z mast $
  */
  
 #ifndef _BN_H_
diff -Nuar tpm_emulator-0.5.orig/crypto/hmac.c tpm_emulator-0.5/crypto/hmac.c
--- tpm_emulator-0.5.orig/crypto/hmac.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/hmac.c	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: hmac.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: hmac.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "hmac.h"
diff -Nuar tpm_emulator-0.5.orig/crypto/hmac.h tpm_emulator-0.5/crypto/hmac.h
--- tpm_emulator-0.5.orig/crypto/hmac.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/hmac.h	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: hmac.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: hmac.h 139 2006-11-10 16:09:00Z mast $
  */
 
 #ifndef _HMAC_H_
diff -Nuar tpm_emulator-0.5.orig/crypto/rc4.c tpm_emulator-0.5/crypto/rc4.c
--- tpm_emulator-0.5.orig/crypto/rc4.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/rc4.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rc4.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: rc4.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "rc4.h"
diff -Nuar tpm_emulator-0.5.orig/crypto/rc4.h tpm_emulator-0.5/crypto/rc4.h
--- tpm_emulator-0.5.orig/crypto/rc4.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/rc4.h	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rc4.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: rc4.h 139 2006-11-10 16:09:00Z mast $
  */
  
 #ifndef _RC4_H_
diff -Nuar tpm_emulator-0.5.orig/crypto/rsa.c tpm_emulator-0.5/crypto/rsa.c
--- tpm_emulator-0.5.orig/crypto/rsa.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/rsa.c	2006-11-17 09:16:25.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rsa.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: rsa.c 154 2006-11-17 07:16:25Z mast $
  */
 
 #include "rsa.h"
diff -Nuar tpm_emulator-0.5.orig/crypto/rsa.h tpm_emulator-0.5/crypto/rsa.h
--- tpm_emulator-0.5.orig/crypto/rsa.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/rsa.h	2006-11-11 22:34:57.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rsa.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: rsa.h 141 2006-11-11 20:34:57Z mast $
  */
 
 #ifndef _RSA_H_
diff -Nuar tpm_emulator-0.5.orig/crypto/sha1.c tpm_emulator-0.5/crypto/sha1.c
--- tpm_emulator-0.5.orig/crypto/sha1.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/sha1.c	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: sha1.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: sha1.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "sha1.h"
diff -Nuar tpm_emulator-0.5.orig/crypto/sha1.h tpm_emulator-0.5/crypto/sha1.h
--- tpm_emulator-0.5.orig/crypto/sha1.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/crypto/sha1.h	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: sha1.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: sha1.h 139 2006-11-10 16:09:00Z mast $
  */
 
 #ifndef _SHA1_H_
diff -Nuar tpm_emulator-0.5.orig/Makefile tpm_emulator-0.5/Makefile
--- tpm_emulator-0.5.orig/Makefile	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/Makefile	2007-09-08 12:40:09.000000000 +0300
@@ -1,14 +1,14 @@
 # Software-Based Trusted Platform Module (TPM) Emulator for Linux
 # Copyright (C) 2006 Mario Strasser <mast@gmx.net>
 #
-# $Id: Makefile 171 2006-12-31 10:37:37Z mast $
+# $Id: Makefile 196 2007-09-08 09:40:09Z mast $
 
 # tpm settings
 PACKAGE_NAME   := tpm_emulator
 VERSION_MAJOR  := 0
 VERSION_MINOR  := 5
 VERSION_BUILD  := $(shell date +"%s")
-VERSION_SUFFIX := 
+VERSION_SUFFIX := .1
 
 SUBDIRS := tpmd tpmd_dev tddl
 
@@ -34,12 +34,26 @@
 		$(MAKE) -C $$subdir $$target || exit -1; \
 	done
 
-DIRS    := . tpm crypto tpmd tpmd_dev tddl tpm_dev tpm_dev/tpm tpm_dev/crypto
+user: version
+	@$(MAKE) -C tpmd all || exit -1
+	@$(MAKE) -C tddl all || exit -1
+
+modules: version
+	@$(MAKE) -C tpmd_dev all || exit -1
+
+user_install: user
+	@$(MAKE) -C tpmd install || exit -1
+	@$(MAKE) -C tddl install || exit -1
+
+modules_install: modules
+	@$(MAKE) -C tpmd_dev install || exit -1
+
+DIRS    := . tpm crypto tpmd tpmd_dev tddl
 DISTSRC := $(foreach dir, $(DIRS), $(wildcard $(dir)/*.c))
 DISTSRC += $(foreach dir, $(DIRS), $(wildcard $(dir)/*.h))
 DIRS    := . tpmd tpmd_dev tddl tpm_dev
 DISTSRC += $(foreach dir, $(DIRS), $(dir)/Makefile)
-DISTSRC += ./README ./AUTHORS ./ChangeLog
+DISTSRC += ./README ./AUTHORS ./ChangeLog tpmd_dev/tpmd_dev.rules.in
 DISTDIR := tpm_emulator-$(VERSION_MAJOR).$(VERSION_MINOR)$(VERSION_SUFFIX)
 
 dist: $(DISTSRC)
diff -Nuar tpm_emulator-0.5.orig/README tpm_emulator-0.5/README
--- tpm_emulator-0.5.orig/README	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/README	2007-08-01 16:10:41.000000000 +0300
@@ -8,7 +8,7 @@
  A Software-based Trusted Platform Module (TPM) Emulator for Linux.
 --------------------------------------------------------------------------
 
-$Id: README 168 2006-12-28 09:45:03Z mast $
+$Id: README 180 2007-08-01 13:10:41Z mast $
 
 Copyright
 --------------------------------------------------------------------------
@@ -119,7 +119,7 @@
 fh = socket(PF_UNIX, SOCK_STREAM, 0);
 if (fh < 0) { /* handle error */ }
 addr.sun_family = AF_UNIX;
-strncpy(addr.sun_path, "/var/tpm/tpmd_socket:0", sizeof(addr.sun_path));
+strncpy(addr.sun_path, "/var/run/tpm/tpmd_socket:0", sizeof(addr.sun_path));
 res = connect(fh, (struct sockaddr*)&addr, sizeof(struct sockaddr_un));
 if (res < 0) { /* handle error */ }
 
diff -Nuar tpm_emulator-0.5.orig/tddl/Makefile tpm_emulator-0.5/tddl/Makefile
--- tpm_emulator-0.5.orig/tddl/Makefile	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tddl/Makefile	2007-09-02 15:18:48.000000000 +0300
@@ -2,14 +2,17 @@
 # Copyright (C) 2006 Mario Strasser <mast@gmx.net>,
 #                    Swiss Federal Institute of Technology (ETH) Zurich
 #
-# $Id: Makefile 167 2006-12-27 16:08:19Z mast $
+# $Id: Makefile 193 2007-09-02 12:18:48Z mast $
 
 CC     := gcc
 WFLAGS := -Wall -Werror -Wno-unused -Wpointer-arith -Wcast-align \
            -Wwrite-strings -Wsign-compare -Wno-multichar
 #WFLAGS += -Wextra -Wcast-qual -Wmissing-prototypes -Wmissing-declarations -Wstrict-aliasing
-CFLAGS := $(WFLAGS) -O2
-TDDL   := libtddl.so
+CFLAGS += $(WFLAGS) -O2
+
+TDDL    := libtddl.so
+TDDLSO1 := $(TDDL).1.2
+TDDLSO2 := $(TDDL).1.2.0
 
 LIBDIR := /usr/lib/
 INCDIR := /usr/include/
@@ -18,18 +21,24 @@
 
 $(TDDL): tddl.c tddl.h
 	$(CC) $(CFLAGS) -fPIC -c -o tddl.o tddl.c
-	ld -shared -o $(TDDL) tddl.o
+	$(CC) -shared -o $(TDDLSO2) -Wl,-soname,$(TDDLSO1) tddl.o
+	test -s $(TDDLSO1) || ln -s $(TDDLSO2) $(TDDLSO1)
+	test -s $(TDDL) || ln -s $(TDDLSO1) $(TDDL)
 
 test_tddl: test_tddl.c
 	$(CC) $(CFLAGS) -I. -L. test_tddl.c -ltddl -o test_tddl
 
 clean:
-	rm -rf $(TDDL) *.o test_tddl
+	rm -rf $(TDDL) $(TDDLSO1) $(TDDLSO2) *.o test_tddl
+
+INSTALL ?= install
 
 install: $(TDDL)
-	cp $(TDDL) $(LIBDIR)
-	cp tddl.h $(INCDIR)
-	ldconfig
+	$(INSTALL) -D -d $(DESTDIR)/$(INCDIR)
+	$(INSTALL) -m 644 tddl.h $(DESTDIR)/$(INCDIR)
+	$(INSTALL) -D -d $(DESTDIR)/$(LIBDIR)
+	$(INSTALL) -m 644 $(TDDLSO2) $(DESTDIR)/$(LIBDIR)
+	cd $(DESTDIR)/$(LIBDIR); ln -s $(TDDLSO2) $(TDDLSO1); ln -s $(TDDLSO1) $(TDDL); cd -
 
 test: test_tddl
 	LD_LIBRARY_PATH=. ./test_tddl
diff -Nuar tpm_emulator-0.5.orig/tddl/tddl.c tpm_emulator-0.5/tddl/tddl.c
--- tpm_emulator-0.5.orig/tddl/tddl.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tddl/tddl.c	2007-08-01 16:07:10.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tddl.c 167 2006-12-27 16:08:19Z mast $
+ * $Id: tddl.c 179 2007-08-01 13:07:10Z mast $
  */
 
 #include <sys/socket.h>
@@ -26,7 +26,7 @@
 
 /* device and socket names */
 static const char *tpm_device_name = "/dev/tpm";
-static const char *tpmd_socket_name = "/var/tpm/tpmd_socket:0";
+static const char *tpmd_socket_name = "/var/run/tpm/tpmd_socket:0";
 
 /* TPM device handle */
 static int tddli_dh = -1;
diff -Nuar tpm_emulator-0.5.orig/tddl/test_tddl.c tpm_emulator-0.5/tddl/test_tddl.c
--- tpm_emulator-0.5.orig/tddl/test_tddl.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tddl/test_tddl.c	2007-03-23 09:35:23.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: test_tddl.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: test_tddl.c 172 2007-03-23 07:35:23Z mast $
  */
 
 #include <stdio.h>
@@ -71,7 +71,7 @@
   BYTE buf[256];
   UINT32 buf_size = sizeof(buf);
   BYTE reset[] = {0, 193, 0, 0, 0, 10, 0, 0, 0, 90};
-  int i;
+  unsigned int i;
   
   res = Tddli_Open();
   if (res != TDDL_SUCCESS) {
diff -Nuar tpm_emulator-0.5.orig/TODO tpm_emulator-0.5/TODO
--- tpm_emulator-0.5.orig/TODO	1970-01-01 02:00:00.000000000 +0200
+++ tpm_emulator-0.5/TODO	2006-12-03 12:44:02.000000000 +0200
@@ -0,0 +1,24 @@
+Partially Implemented:
+----------------------
+  TPM_GetCapability
+  TPM_CreateEndorsementKeyPair (currently disabled; see CreateRevocableEK)
+  TPM_SetOwnerPointer (currently disabled)
+
+Completely Missing:
+-------------------
+  Mandatory Commands:
+    TPM_SetCapability
+    TPM_ResetLockValue (protection against dictionary attacks)
+    TPM_LoadKey2 (currently emulated by TPM_LoadKey)
+    All Migration Functions
+    TPM_DSAP
+    All Delegation Functions
+    All NV Storage Functions
+  
+  Optional Commands:
+    TPM_FieldUpgrade
+    TPM_SetRedirection
+    TPM_Sealx
+    All Maintenance Functions
+    TPM_ChangeAuthAsymStart (deprecated since v1.2)
+    TPM_ChangeAuthAsymFinish (deprecated since v1.2)
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_audit.c tpm_emulator-0.5/tpm/tpm_audit.c
--- tpm_emulator-0.5.orig/tpm/tpm_audit.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_audit.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_audit.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_audit.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_authorization.c tpm_emulator-0.5/tpm/tpm_authorization.c
--- tpm_emulator-0.5.orig/tpm/tpm_authorization.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_authorization.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_authorization.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_authorization.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_capability.c tpm_emulator-0.5/tpm/tpm_capability.c
--- tpm_emulator-0.5.orig/tpm/tpm_capability.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_capability.c	2007-07-28 15:15:32.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_capability.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_capability.c 177 2007-07-28 12:15:32Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -148,12 +148,12 @@
       /* TODO: TPM_CAP_PROP_DELEGATE_ROW */
       return TPM_FAIL;
 
-    case TPM_CAP_PROP_DAA_MAX:
-      debug("[TPM_CAP_PROP_DAA_MAX]");
+    case TPM_CAP_PROP_MAX_DAASESS:
+      debug("[TPM_CAP_PROP_MAX_DAASESS]");
       return return_UINT32(respSize, resp, TPM_MAX_SESSIONS_DAA);
 
-    case TPM_CAP_PROP_SESSION_DAA:
-      debug("[TPM_CAP_PROP_SESSION_DAA]");
+    case TPM_CAP_PROP_DAASESS:
+      debug("[TPM_CAP_PROP_DAASESS]");
       for (i = 0, j = TPM_MAX_SESSIONS_DAA; i < TPM_MAX_SESSIONS_DAA; i++)
         if (tpmData.stany.data.sessionsDAA[i].type != TPM_ST_INVALID) j--;
       return return_UINT32(respSize, resp, j);
@@ -581,8 +581,8 @@
   
   version.tag = TPM_TAG_CAP_VERSION_INFO;
   version.version = tpmData.permanent.data.version;
-  version.specLevel = 2;
-  version.errataRev = 94;
+  version.specLevel = 0x0002; /* see [TPM_Part2], Section 21.6 */
+  version.errataRev = 0x01;   /* 0x01 = rev 94, 0x02 = rev 103 */
   len = 4, ptr = version.tpmVendorID;
   if (tpm_marshal_UINT32(&ptr, &len, TPM_MANUFACTURER))
     return TPM_FAIL;
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_cmd_handler.c tpm_emulator-0.5/tpm/tpm_cmd_handler.c
--- tpm_emulator-0.5.orig/tpm/tpm_cmd_handler.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_cmd_handler.c	2006-11-14 15:34:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_cmd_handler.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_cmd_handler.c 150 2006-11-14 13:34:56Z mast $
  */
 
 #include "tpm_marshalling.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_commands.h tpm_emulator-0.5/tpm/tpm_commands.h
--- tpm_emulator-0.5.orig/tpm/tpm_commands.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_commands.h	2007-07-27 16:57:38.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_commands.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_commands.h 176 2007-07-27 13:57:38Z hstamer $
  */
 
 #ifndef _TPM_COMMANDS_H_
@@ -2569,13 +2569,13 @@
  * TPM_ChangeAuthAsymStart - starts the ChangeAuth process
  * @idHandle: [in] Handle of a loaded identity ID key 
  * @antiReplay: [in] The nonce to be inserted into the certifyInfo structure 
- * @inTempKey: [in] All parameters of the ephemeral key
+ * @inTempKey: [in] Structure containing all parameters of the ephemeral key
  * @auth1: [in, out] Authorization protocol parameters
  * @certifyInfo: [out] The certifyInfo structure that is to be signed
  * @sigSize: [out] The used size of the output area for the signature 
  * @sig: [out] The signature of the certifyInfo parameter
- * @ephHandle: [out] Handle to be used by ChangeAuthAsymFinish 
- * @outTempKey: [out] All parameters and public part of the ephemeral key
+ * @ephHandle: [out] Handle to be used by ChangeAuthAsymFinish for ephemeral key
+ * @outTempKey: [out] Structure containing all parameters and public part of ephemeral key
  * Returns: TPM_SUCCESS on success, a TPM error code otherwise.
  * 
  * Description: ([TPM_Part3], Section 28.4.1)
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_context.c tpm_emulator-0.5/tpm/tpm_context.c
--- tpm_emulator-0.5.orig/tpm/tpm_context.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_context.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_context.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_context.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_counter.c tpm_emulator-0.5/tpm/tpm_counter.c
--- tpm_emulator-0.5.orig/tpm/tpm_counter.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_counter.c	2006-01-23 01:11:23.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_counter.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_counter.c 88 2006-01-22 23:11:23Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_credentials.c tpm_emulator-0.5/tpm/tpm_credentials.c
--- tpm_emulator-0.5.orig/tpm/tpm_credentials.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_credentials.c	2007-08-02 10:20:16.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_credentials.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_credentials.c 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -119,8 +119,8 @@
   }
   memcpy(outputEKreset, &tpmData.permanent.data.ekReset, sizeof(TPM_NONCE));
   /* Create TPM_PERMANENT_DATA->TPM_DAA_TPM_SEED from the TPM RNG */
-  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.digest, 
-    sizeof(tpmData.permanent.data.tpmDAASeed.digest));
+  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.nonce, 
+    sizeof(tpmData.permanent.data.tpmDAASeed.nonce));
   return TPM_SUCCESS;
 }
 
@@ -135,8 +135,8 @@
   tpm_rsa_release_private_key(&tpmData.permanent.data.endorsementKey);
   tpmData.permanent.data.endorsementKey.size = 0;
   /* Invalidate TPM_PERMANENT_DATA->tpmDAASeed */
-  memset(tpmData.permanent.data.tpmDAASeed.digest, 0, 
-    sizeof(tpmData.permanent.data.tpmDAASeed.digest));
+  memset(tpmData.permanent.data.tpmDAASeed.nonce, 0, 
+    sizeof(tpmData.permanent.data.tpmDAASeed.nonce));
   return TPM_SUCCESS;
 }
 
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_crypto.c tpm_emulator-0.5/tpm/tpm_crypto.c
--- tpm_emulator-0.5.orig/tpm/tpm_crypto.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_crypto.c	2007-08-02 10:20:16.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_crypto.c 165 2006-12-15 11:58:48Z mast $
+ * $Id: tpm_crypto.c 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -228,14 +228,14 @@
       certifyInfo->migrationAuthoritySize = 0;
       memcpy(&certifyInfo->PCRInfo, &key->pcrInfo, sizeof(TPM_PCR_INFO));
       memset(&certifyInfo->PCRInfo.digestAtCreation, 0, sizeof(TPM_DIGEST));
-      certifyInfo->PCRInfoSize = sizeof(certifyInfo->PCRInfo);
+      certifyInfo->PCRInfoSize = sizeof(TPM_PCR_INFO);
     /* ... otherwise use a TPM_CERTIFY_INFO2 structure */
     } else {
       certifyInfo->tag = TPM_TAG_CERTIFY_INFO2;
       certifyInfo->fill = 0x0000;
       certifyInfo->migrationAuthoritySize = 0;
       memcpy(&certifyInfo->PCRInfo, &key->pcrInfo, sizeof(TPM_PCR_INFO));
-      certifyInfo->PCRInfoSize = sizeof(certifyInfo->PCRInfo);
+      certifyInfo->PCRInfoSize = sizeof(TPM_PCR_INFO);
     } 
   } else {
     /* setup TPM_CERTIFY_INFO structure */
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_daa.c tpm_emulator-0.5/tpm/tpm_daa.c
--- tpm_emulator-0.5.orig/tpm/tpm_daa.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_daa.c	2007-08-02 10:20:16.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_daa.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_daa.c 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -1117,14 +1117,14 @@
       }
       /* Obtain random data from the RNG and store it as 
        * DAA_session->DAA_contextSeed */
-      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       /* Obtain DAA_SIZE_r0 bits from MGF1("r0", 
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r0, 1, scratch);
@@ -1193,8 +1193,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r1, 1, scratch);
@@ -1269,8 +1269,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r2, 1, scratch);
@@ -1345,8 +1345,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r3", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r3);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r3, 1, scratch);
@@ -1566,8 +1566,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -1575,8 +1575,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -1704,8 +1704,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -1786,8 +1786,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -1867,8 +1867,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -1930,8 +1930,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -1993,8 +1993,8 @@
        * DAA_session->DAA_contextSeed), and label them r3 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r3", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r3);
       tpm_bn_init(r3);
       tpm_bn_import(r3, DAA_SIZE_r3, 1, scratch);
@@ -2510,8 +2510,8 @@
       tpm_daa_update_digestContext_sign(session, &sha1);
       /* Obtain random data from the RNG and store it as 
        * DAA_session->DAA_contextSeed */
-      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       /* Set outputData = NULL */
       *outputSize = 0, *outputData = NULL;
       /* Set DAA_session->DAA_stage = 2 */
@@ -2563,8 +2563,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r0, 1, scratch);
@@ -2632,8 +2632,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r1, 1, scratch);
@@ -2707,8 +2707,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r2, 1, scratch);
@@ -2782,8 +2782,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r4", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r4);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r4, 1, scratch);
@@ -3000,8 +3000,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -3009,8 +3009,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -3227,8 +3227,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -3308,8 +3308,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -3434,8 +3434,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -3542,8 +3542,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -3642,8 +3642,8 @@
        * DAA_session->DAA_contextSeed), and label them r4 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r4", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r4);
       tpm_bn_init(r4);
       tpm_bn_import(r4, DAA_SIZE_r4, 1, scratch);
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_data.c tpm_emulator-0.5/tpm/tpm_data.c
--- tpm_emulator-0.5.orig/tpm/tpm_data.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_data.c	2007-08-02 11:35:47.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_data.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_data.c 183 2007-08-02 08:35:47Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -33,10 +33,8 @@
 {
   unsigned int i;
   tpmData.permanent.data.pcrAttrib[pcr].pcrReset = reset;
-  for (i = 0; i < TPM_NUM_LOCALITY; i++) {
-    tpmData.permanent.data.pcrAttrib[pcr].pcrResetLocal[i] = (rl & (1 << i));
-    tpmData.permanent.data.pcrAttrib[pcr].pcrExtendLocal[i] = (el & (1 << i));
-  }
+  tpmData.permanent.data.pcrAttrib[pcr].pcrResetLocal = rl;
+  tpmData.permanent.data.pcrAttrib[pcr].pcrExtendLocal = el;
 }
 
 void tpm_init_data(void)
@@ -128,13 +126,13 @@
 #endif
 #ifdef TPM_GENERATE_SEED_DAA
   /* generate the DAA seed (cf. [TPM_Part2], v1.2 rev 94, Section 7.4) */
-  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.digest, 
-    sizeof(tpmData.permanent.data.tpmDAASeed.digest));
+  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.nonce, 
+    sizeof(tpmData.permanent.data.tpmDAASeed.nonce));
 #else
   /* setup DAA seed */
-  memcpy(tpmData.permanent.data.tpmDAASeed.digest, 
+  memcpy(tpmData.permanent.data.tpmDAASeed.nonce, 
     "\x77\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
-    "\x00\x00\x00\x77", 20);
+    "\x00\x00\x00\x77", sizeof(TPM_NONCE));
 #endif
 
   memcpy(tpmData.permanent.data.ekReset.nonce, "\xde\xad\xbe\xef", 4);
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_data.h tpm_emulator-0.5/tpm/tpm_data.h
--- tpm_emulator-0.5.orig/tpm/tpm_data.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_data.h	2004-11-03 19:22:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_data.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_data.h 1 2004-11-03 17:22:56Z mast $
  */
 
 #ifndef _TPM_DATA_H_
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_delegation.c tpm_emulator-0.5/tpm/tpm_delegation.c
--- tpm_emulator-0.5.orig/tpm/tpm_delegation.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_delegation.c	2004-11-03 19:22:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_delegation.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_delegation.c 1 2004-11-03 17:22:56Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_deprecated.c tpm_emulator-0.5/tpm/tpm_deprecated.c
--- tpm_emulator-0.5.orig/tpm/tpm_deprecated.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_deprecated.c	2007-09-05 22:32:16.000000000 +0300
@@ -1,6 +1,7 @@
 /* Software-Based Trusted Platform Module (TPM) Emulator for Linux
  * Copyright (C) 2004 Mario Strasser <mast@gmx.net>,
- *                    Swiss Federal Institute of Technology (ETH) Zurich
+ *                    Swiss Federal Institute of Technology (ETH) Zurich,
+ *               2007 Heiko Stamer <stamer@gaos.org>
  *
  * This module is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published
@@ -12,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_deprecated.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_deprecated.c 195 2007-09-05 19:32:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -20,6 +21,8 @@
 #include "tpm_data.h"
 #include "tpm_handles.h"
 #include "tpm_marshalling.h"
+#include "crypto/rsa.h"
+#include "crypto/sha1.h"
 
 #define SAVE_KEY_CONTEXT_LABEL  ((uint8_t*)"SaveKeyContext..")
 #define SAVE_AUTH_CONTEXT_LABEL ((uint8_t*)"SaveAuthContext.")
@@ -129,6 +132,8 @@
   return TPM_SUCCESS;
 }
 
+extern int tpm_compute_key_digest(TPM_KEY *key, TPM_DIGEST *digest);
+
 TPM_RESULT TPM_ChangeAuthAsymStart(  
   TPM_KEY_HANDLE idHandle,
   TPM_NONCE *antiReplay,
@@ -141,9 +146,89 @@
   TPM_KEY *outTempKey 
 )
 {
+  TPM_RESULT res;
+  TPM_KEY_DATA *idKey;
+  tpm_rsa_private_key_t rsa;
+  UINT32 key_length;
+  TPM_STORE_ASYMKEY store;
+  
   info("TPM_ChangeAuthAsymStart() not implemented yet");
   /* TODO: implement TPM_ChangeAuthAsymStart() */
   return TPM_FAIL;
+  
+  /* 1. The TPM SHALL verify the AuthData to use the TPM identity key held in
+        idHandle. The TPM MUST verify that the key is a TPM identity key. */
+    /* get identity key */
+    idKey = tpm_get_key(idHandle);
+    if (idKey == NULL) return TPM_INVALID_KEYHANDLE;
+    /* verify authorization */
+    res = tpm_verify_auth(auth1, idKey->usageAuth, idHandle);
+    if (res != TPM_SUCCESS) return res;
+    /* verify key parameters */
+    if (idKey->keyUsage != TPM_KEY_IDENTITY) return TPM_INVALID_KEYUSAGE;
+  /* 2. The TPM SHALL validate the algorithm parameters for the key to create
+        from the tempKey parameter. */
+  /* 3. Recommended key type is RSA */
+  /* 4. Minimum RSA key size MUST is 512 bits, recommended RSA key size 
+        is 1024 */
+  /* 5. For other key types the minimum key size strength MUST be
+        comparable to RSA 512 */
+  /* 6. If the TPM is not designed to create a key of the requested type,
+        return the error code TPM_BAD_KEY_PROPERTY */
+  if (inTempKey->algorithmID != TPM_ALG_RSA
+      || inTempKey->parmSize == 0
+      || inTempKey->parms.rsa.keyLength < 512
+      || inTempKey->parms.rsa.numPrimes != 2
+      || inTempKey->parms.rsa.exponentSize != 0)
+    return TPM_BAD_KEY_PROPERTY;
+  /* 7. The TPM SHALL create a new key (k1) in accordance with the
+        algorithm parameter.
+        The newly created key is pointed to by ephHandle. */
+    /* generate key */
+    key_length = inTempKey->parms.rsa.keyLength;
+    if (tpm_rsa_generate_key(&rsa, key_length)) {
+      debug("TPM_ChangeAuthAsymStart(): tpm_rsa_generate_key() failed.");
+      return TPM_FAIL;
+    }
+   
+
+//TODO
+
+  /* 8. The TPM SHALL fill in all fields in tempKey using k1 for the
+        information. The TPM_KEY->encSize MUST be 0. */
+
+//TODO
+
+    /* compute the digest of the wrapped key (without encData) */
+    if (tpm_compute_key_digest(outTempKey, &store.pubDataDigest)) {
+      debug("TPM_ChangeAuthAsymStart(): tpm_compute_key_digest() failed.");
+      return TPM_FAIL;
+    }
+  /* 9. The TPM SHALL fill in certifyInfo using k1 for the information.
+        The certifyInfo->data field is supplied by the antiReplay. */
+    /* "Version" field is set according to the deprecated TPM_VERSION
+       structure from the old v1.1 specification. */
+    memcpy(&certifyInfo->tag, &tpmData.permanent.data.version, 2);
+    memcpy(&certifyInfo->fill, &tpmData.permanent.data.version + 2, 1);
+    memcpy(&certifyInfo->payloadType, &tpmData.permanent.data.version + 3, 1);
+    /* Other fields are filled according to Section 27.4.1 [TPM, Part 3]. */
+    certifyInfo->keyUsage = TPM_KEY_AUTHCHANGE;
+    certifyInfo->keyFlags = TPM_KEY_FLAG_VOLATILE;
+    certifyInfo->authDataUsage = TPM_AUTH_NEVER;
+    memcpy(&certifyInfo->algorithmParms, inTempKey,
+      sizeof_TPM_KEY_PARMS((*inTempKey)));
+    memcpy(&certifyInfo->pubkeyDigest, &store.pubDataDigest, sizeof(TPM_DIGEST));
+    memcpy(&certifyInfo->data, antiReplay, sizeof(TPM_NONCE));
+    certifyInfo->parentPCRStatus = FALSE;
+    certifyInfo->PCRInfoSize = 0;
+  
+  /* 10. The TPM then signs the certifyInfo parameter using the key
+         pointed to by idHandle. The resulting signed blob is returned
+         in sig parameter. */
+
+//TODO
+
+  return TPM_SUCCESS;
 }
 
 TPM_RESULT TPM_ChangeAuthAsymFinish(  
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_emulator.h tpm_emulator-0.5/tpm/tpm_emulator.h
--- tpm_emulator-0.5.orig/tpm/tpm_emulator.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_emulator.h	2006-11-11 23:10:20.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_emulator.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_emulator.h 142 2006-11-11 21:10:20Z mast $
  */
 
 #ifndef _TPM_EMULATOR_H_
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_error.c tpm_emulator-0.5/tpm/tpm_error.c
--- tpm_emulator-0.5.orig/tpm/tpm_error.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_error.c	2006-08-06 10:08:13.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_error.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_error.c 122 2006-08-06 07:08:13Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_eviction.c tpm_emulator-0.5/tpm/tpm_eviction.c
--- tpm_emulator-0.5.orig/tpm/tpm_eviction.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_eviction.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_eviction.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_eviction.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_handles.c tpm_emulator-0.5/tpm/tpm_handles.c
--- tpm_emulator-0.5.orig/tpm/tpm_handles.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_handles.c	2006-05-14 00:29:54.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_handles.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_handles.c 101 2006-05-13 21:29:54Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_handles.h tpm_emulator-0.5/tpm/tpm_handles.h
--- tpm_emulator-0.5.orig/tpm/tpm_handles.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_handles.h	2006-05-05 00:52:05.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_handles.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_handles.h 97 2006-05-04 21:52:05Z hstamer $
  */
 
 #ifndef _TPM_HANDLES_
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_identity.c tpm_emulator-0.5/tpm/tpm_identity.c
--- tpm_emulator-0.5.orig/tpm/tpm_identity.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_identity.c	2006-11-10 18:09:00.000000000 +0200
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_identity.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_identity.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_integrity.c tpm_emulator-0.5/tpm/tpm_integrity.c
--- tpm_emulator-0.5.orig/tpm/tpm_integrity.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_integrity.c	2007-08-08 15:09:30.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_integrity.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_integrity.c 188 2007-08-08 12:09:30Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -43,7 +43,7 @@
 
   info("TPM_Extend()");
   if (pcrNum >= TPM_NUM_PCR) return TPM_BADINDEX;
-  if (!PCR_ATTRIB[pcrNum].pcrExtendLocal[LOCALITY]) return TPM_BAD_LOCALITY;
+  if (!(PCR_ATTRIB[pcrNum].pcrExtendLocal & (1 << LOCALITY))) return TPM_BAD_LOCALITY;
   /* compute new PCR value as SHA-1(old PCR value || inDigest) */
   tpm_sha1_init(&ctx);
   tpm_sha1_update(&ctx, PCR_VALUE[pcrNum].digest, sizeof(PCR_VALUE[pcrNum].digest));
@@ -119,14 +119,14 @@
     /* is PCR number i selected ? */
     if (pcrSelection->pcrSelect[i >> 3] & (1 << (i & 7))) {
       if (!PCR_ATTRIB[i].pcrReset) return TPM_NOTRESETABLE;
-      if (!PCR_ATTRIB[i].pcrResetLocal[LOCALITY]) return TPM_NOTLOCAL;
+      if (!(PCR_ATTRIB[i].pcrResetLocal & (1 << LOCALITY))) return TPM_NOTLOCAL;
     }
   }
   /* ... then we reset all registers at once */
   for (i = 0; i < pcrSelection->sizeOfSelect * 8; i++) {
     /* is PCR number i selected ? */
     if (pcrSelection->pcrSelect[i >> 3] & (1 << (i & 7))) {
-      memset(PCR_VALUE[i].digest, 0, sizeof(*PCR_VALUE[i].digest));
+      memset(PCR_VALUE[i].digest, 0, sizeof(PCR_VALUE[i].digest));
     }
   }
   return TPM_SUCCESS;
@@ -234,37 +234,45 @@
     res = tpm_verify_auth(auth1, key->usageAuth, keyHandle);
     if (res != TPM_SUCCESS) return res;
   }
-  /* 2. The keyHandle->sigScheme MUST use SHA-1,
-   *    return TPM_INAPPROPRIATE_SIG if it does not */
-  if (key->sigScheme != TPM_SS_RSASSAPKCS1v15_SHA1)
+  /* 2. Validate that keyHandle->sigScheme is TPM_SS_RSASSAPKCS1v15_SHA1 or
+        TPM_SS_RSASSAPKCS1v15_INFO, if not return TPM_INAPPROPRIATE_SIG. */
+  if ((key->sigScheme != TPM_SS_RSASSAPKCS1v15_SHA1) && 
+       (key->sigScheme != TPM_SS_RSASSAPKCS1v15_INFO))
     return TPM_INAPPROPRIATE_SIG;
 
 /* WATCH: ??? specification error, missing check for key usage ???
-   A security issue seems to be the (mis)usage of the EK for signing. */
-/*
-  if (key->keyUsage != TPM_KEY_SIGNING && key->keyUsage != TPM_KEY_LEGACY
-      && key->keyUsage != TPM_KEY_IDENTITY)
-    return TPM_INVALID_KEYUSAGE;
-*/
+   A security issue seems to be the (mis)usage of the EK for signing.
+   WATCH: !!! This error has been corrected recently in v1.2 rev 103 !!! */
 
-  /* 3. Validate targetPCR is a valid TPM_PCR_SELECTION structure,
+  /* 3. Validate that keyHandle->keyUsage is TPM_KEY_SIGNING, TPM_KEY_IDENTITY,
+        or TPM_KEY_LEGACY, if not return TPM_INVALID_KEYUSAGE */
+  if ((key->keyUsage != TPM_KEY_SIGNING) && (key->keyUsage != TPM_KEY_LEGACY)
+      && (key->keyUsage != TPM_KEY_IDENTITY))
+    return TPM_INVALID_KEYUSAGE;
+  /* 4. Validate targetPCR is a valid TPM_PCR_SELECTION structure,
    *    on errors return TPM_INVALID_PCR_INFO */
   if (targetPCR->sizeOfSelect > sizeof(targetPCR->pcrSelect))
     return TPM_INVALID_PCR_INFO;
-  /* 4. Create H1 a SHA-1 hash of a TPM_PCR_COMPOSITE using the
+  /* 5. Create H1 a SHA-1 hash of a TPM_PCR_COMPOSITE using the
    *    TPM_STCLEAR_DATA->PCR[] indicated by targetPCR->pcrSelect */
   res = tpm_compute_pcr_digest(targetPCR, &H1, NULL);
   if (res != TPM_SUCCESS) return res;
-  /* 5. Create S1 a TPM_PCR_INFO_SHORT */
-  pcrData->pcrSelection.sizeOfSelect = targetPCR->sizeOfSelect;
-  memcpy(pcrData->pcrSelection.pcrSelect, targetPCR->pcrSelect, targetPCR->sizeOfSelect);
-  pcrData->localityAtRelease = tpmData.stany.flags.localityModifier;
-  memcpy(&pcrData->digestAtRelease, &H1, sizeof(TPM_COMPOSITE_HASH));
-  /* 6. Create Q1 a TPM_QUOTE_INFO2 structure */
+  /* 6. Create S1 a TPM_PCR_INFO_SHORT */
+    /* a. Set S1->pcrSelection to targetPCR */
+    pcrData->pcrSelection.sizeOfSelect = targetPCR->sizeOfSelect;
+    memcpy(pcrData->pcrSelection.pcrSelect, targetPCR->pcrSelect, targetPCR->sizeOfSelect);
+    /* b. Set S1->localityAtRelease to TPM_STANY_DATA -> localityModifier */
+    pcrData->localityAtRelease = tpmData.stany.flags.localityModifier;
+    /* c. Set S1->digestAtRelease to H1 */
+    memcpy(&pcrData->digestAtRelease, &H1, sizeof(TPM_COMPOSITE_HASH));
+  /* 7. Create Q1 a TPM_QUOTE_INFO2 structure */
   Q1.tag = TPM_TAG_QUOTE_INFO2;
-  memcpy(Q1.fixed, "QUT2", 4);
-  memcpy(&Q1.infoShort, pcrData, sizeof_TPM_PCR_INFO_SHORT((*pcrData)));
-  memcpy(&Q1.externalData, externalData, sizeof(TPM_NONCE));
+    /* a. Set Q1->fixed to "QUT2" */
+    memcpy(Q1.fixed, "QUT2", 4);
+    /* b. Set Q1->infoShort to S1 */
+    memcpy(&Q1.infoShort, pcrData, sizeof_TPM_PCR_INFO_SHORT((*pcrData)));
+    /* c. Set Q1->externalData to externalData */
+    memcpy(&Q1.externalData, externalData, sizeof(TPM_NONCE));
   size = len = sizeof_TPM_QUOTE_INFO2(Q1);
   buf = ptr = tpm_malloc(size);
   if (buf == NULL) return TPM_NOSPACE;
@@ -273,7 +281,7 @@
     tpm_free(buf);
     return TPM_FAIL;
   }
-  /* 7. If addVersion is TRUE */
+  /* 8. If addVersion is TRUE */
   if (addVersion == TRUE) {
     /* a. Concatenate to Q1 a TPM_CAP_VERSION_INFO structure */
     res = cap_version_val(&respSize, &resp);
@@ -292,11 +300,12 @@
         return TPM_FAIL;
     }
     *versionInfoSize = respSize;
-   } else { /* 8. Else */
-    /* a. Set versionInfoSize to 0 and return no bytes in versionInfo */
+   } else { /* 9. Else */
+    /* a. Set versionInfoSize to 0 */
     *versionInfoSize = 0;
+    /* b. Return no bytes in versionInfo */
   }
-  /* 9. Sign a SHA-1 hash of Q1 using keyHandle as the signature key */
+  /* 10. Sign a SHA-1 hash of Q1 using keyHandle as the signature key */
   tpm_sha1_init(&ctx);
   tpm_sha1_update(&ctx, buf, size);
   tpm_free(buf);
@@ -315,6 +324,6 @@
       return TPM_FAIL;
   }
   
-  /* 10. Return the signature in sig */
+  /* 11. Return the signature in sig */
   return TPM_SUCCESS;
 }
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_maintenance.c tpm_emulator-0.5/tpm/tpm_maintenance.c
--- tpm_emulator-0.5.orig/tpm/tpm_maintenance.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_maintenance.c	2004-11-03 19:22:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_maintenance.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_maintenance.c 1 2004-11-03 17:22:56Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_management.c tpm_emulator-0.5/tpm/tpm_management.c
--- tpm_emulator-0.5.orig/tpm/tpm_management.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_management.c	2006-05-10 01:58:41.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_management.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_management.c 100 2006-05-09 22:58:41Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_marshalling.c tpm_emulator-0.5/tpm/tpm_marshalling.c
--- tpm_emulator-0.5.orig/tpm/tpm_marshalling.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_marshalling.c	2007-08-02 11:35:47.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_marshalling.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_marshalling.c 183 2007-08-02 08:35:47Z mast $
  */
 
 #include "tpm_marshalling.h"
@@ -271,16 +271,16 @@
 int tpm_marshal_TPM_PCR_ATTRIBUTES(BYTE **ptr, UINT32 *length, TPM_PCR_ATTRIBUTES *v)
 {
   if (tpm_marshal_BOOL(ptr, length, v->pcrReset)
-      || tpm_marshal_BOOL_ARRAY(ptr, length, v->pcrResetLocal, TPM_NUM_LOCALITY)
-      || tpm_marshal_BOOL_ARRAY(ptr, length, v->pcrExtendLocal, TPM_NUM_LOCALITY)) return -1;
+      || tpm_marshal_TPM_LOCALITY_SELECTION(ptr, length, v->pcrResetLocal)
+      || tpm_marshal_TPM_LOCALITY_SELECTION(ptr, length, v->pcrExtendLocal)) return -1;
   return 0;
 }
 
 int tpm_unmarshal_TPM_PCR_ATTRIBUTES(BYTE **ptr, UINT32 *length, TPM_PCR_ATTRIBUTES *v)
 {
   if (tpm_unmarshal_BOOL(ptr, length, &v->pcrReset)
-      || tpm_unmarshal_BOOL_ARRAY(ptr, length, v->pcrResetLocal, TPM_NUM_LOCALITY)
-      || tpm_unmarshal_BOOL_ARRAY(ptr, length, v->pcrExtendLocal, TPM_NUM_LOCALITY)) return -1;
+      || tpm_unmarshal_TPM_LOCALITY_SELECTION(ptr, length, &v->pcrResetLocal)
+      || tpm_unmarshal_TPM_LOCALITY_SELECTION(ptr, length, &v->pcrExtendLocal)) return -1;
   return 0;
 }
 
@@ -857,7 +857,7 @@
   if (tpm_marshal_TPM_STRUCTURE_TAG(ptr, length, v->tag)
       || tpm_marshal_TPM_DIGEST(ptr, length, &v->DAA_digestContext)
       || tpm_marshal_TPM_DIGEST(ptr, length, &v->DAA_digest)
-      || tpm_marshal_TPM_DIGEST(ptr, length, &v->DAA_contextSeed)
+      || tpm_marshal_TPM_NONCE(ptr, length, &v->DAA_contextSeed)
       || tpm_marshal_BYTE_ARRAY(ptr, length, v->DAA_scratch, sizeof(v->DAA_scratch))
       || tpm_marshal_BYTE(ptr, length, v->DAA_stage))
         return -1;
@@ -869,7 +869,7 @@
   if (tpm_unmarshal_TPM_STRUCTURE_TAG(ptr, length, &v->tag)
       || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DAA_digestContext)
       || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DAA_digest)
-      || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DAA_contextSeed)
+      || tpm_unmarshal_TPM_NONCE(ptr, length, &v->DAA_contextSeed)
       || tpm_unmarshal_BYTE_ARRAY(ptr, length, v->DAA_scratch, sizeof(v->DAA_scratch))
       || tpm_unmarshal_BYTE(ptr, length, &v->DAA_stage))
         return -1;
@@ -1434,7 +1434,7 @@
       || tpm_marshal_TPM_DIGEST(ptr, length, &v->DIR)
       || tpm_marshal_BYTE_ARRAY(ptr, length, v->ordinalAuditStatus, sizeof(v->ordinalAuditStatus))
       || tpm_marshal_TPM_ACTUAL_COUNT(ptr, length, v->auditMonotonicCounter)
-      || tpm_marshal_TPM_DIGEST(ptr, length, &v->tpmDAASeed)) return -1;
+      || tpm_marshal_TPM_NONCE(ptr, length, &v->tpmDAASeed)) return -1;
   for (i = 0; i < TPM_MAX_COUNTERS; i++) {
     if (tpm_marshal_TPM_COUNTER_VALUE(ptr, length, &v->counters[i])
         || tpm_marshal_TPM_SECRET(ptr, length, &v->counters[i].usageAuth)
@@ -1469,7 +1469,7 @@
       || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DIR)
       || tpm_unmarshal_BYTE_ARRAY(ptr, length, v->ordinalAuditStatus, sizeof(v->ordinalAuditStatus))
       || tpm_unmarshal_TPM_ACTUAL_COUNT(ptr, length, &v->auditMonotonicCounter)
-      || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->tpmDAASeed)) return -1;
+      || tpm_unmarshal_TPM_NONCE(ptr, length, &v->tpmDAASeed)) return -1;
   for (i = 0; i < TPM_MAX_COUNTERS; i++) {
     if (tpm_unmarshal_TPM_COUNTER_VALUE(ptr, length, &v->counters[i])
         || tpm_unmarshal_TPM_SECRET(ptr, length, &v->counters[i].usageAuth)
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_marshalling.h tpm_emulator-0.5/tpm/tpm_marshalling.h
--- tpm_emulator-0.5.orig/tpm/tpm_marshalling.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_marshalling.h	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_marshalling.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_marshalling.h 139 2006-11-10 16:09:00Z mast $
  */
 
 #ifndef _MARSHALLING_H_
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_migration.c tpm_emulator-0.5/tpm/tpm_migration.c
--- tpm_emulator-0.5.orig/tpm/tpm_migration.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_migration.c	2006-05-10 01:58:41.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_migration.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_migration.c 100 2006-05-09 22:58:41Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_nv_storage.c tpm_emulator-0.5/tpm/tpm_nv_storage.c
--- tpm_emulator-0.5.orig/tpm/tpm_nv_storage.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_nv_storage.c	2006-01-09 23:41:31.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_nv_storage.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_nv_storage.c 79 2006-01-09 21:41:31Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_owner.c tpm_emulator-0.5/tpm/tpm_owner.c
--- tpm_emulator-0.5.orig/tpm/tpm_owner.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_owner.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_owner.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_owner.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_startup.c tpm_emulator-0.5/tpm/tpm_startup.c
--- tpm_emulator-0.5.orig/tpm/tpm_startup.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_startup.c	2007-08-08 15:09:30.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_startup.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_startup.c 188 2007-08-08 12:09:30Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -56,9 +56,9 @@
     /* reset PCR values */
     for (i = 0; i < TPM_NUM_PCR; i++) {
       if (tpmData.permanent.data.pcrAttrib[i].pcrReset)
-        SET_TO_ZERO(&tpmData.permanent.data.pcrValue[i].digest);
-      else
         SET_TO_0xFF(&tpmData.permanent.data.pcrValue[i].digest);
+      else
+        SET_TO_ZERO(&tpmData.permanent.data.pcrValue[i].digest);
     }
     /* reset STCLEAR_FLAGS */
     SET_TO_ZERO(&tpmData.stclear.flags);
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_storage.c tpm_emulator-0.5/tpm/tpm_storage.c
--- tpm_emulator-0.5.orig/tpm/tpm_storage.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_storage.c	2007-11-09 14:51:39.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_storage.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_storage.c 201 2007-11-09 12:51:39Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -521,15 +521,13 @@
   parent = tpm_get_key(parentHandle);
   if (parent == NULL) return TPM_INVALID_KEYHANDLE;
   /* verify authorization */
-  if (parent->authDataUsage != TPM_AUTH_NEVER) {
-    if (auth1->authHandle != TPM_INVALID_HANDLE) {
-      debug("[ authDataUsage=%.2x ]", parent->authDataUsage);
-      res = tpm_verify_auth(auth1, parent->usageAuth, parentHandle);
-      if (res != TPM_SUCCESS) return res;
-    } else {
-      debug("TPM_LoadKey(): parent key requires authorization.");
-      return TPM_AUTHFAIL;
-    }
+  if (auth1->authHandle != TPM_INVALID_HANDLE) {
+    debug("[ authDataUsage=%.2x ]", parent->authDataUsage);
+    res = tpm_verify_auth(auth1, parent->usageAuth, parentHandle);
+    if (res != TPM_SUCCESS) return res;
+  } else if (parent->authDataUsage != TPM_AUTH_NEVER) {
+    debug("TPM_LoadKey(): parent key requires authorization.");
+    return TPM_AUTHFAIL;
   }
   if (parent->keyUsage != TPM_KEY_STORAGE) return TPM_INVALID_KEYUSAGE;
   /* verify key properties */
@@ -680,7 +678,7 @@
   TPM_STORED_DATA *sealedData
 )
 {
-  debug("TPM_Sealx() not implemented yet");
+  info("TPM_Sealx() not implemented yet");
   /* TODO: implement TPM_Sealx() */
   return TPM_FAIL;
 }
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_structures.h tpm_emulator-0.5/tpm/tpm_structures.h
--- tpm_emulator-0.5.orig/tpm/tpm_structures.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_structures.h	2007-08-02 10:20:16.000000000 +0300
@@ -1,7 +1,7 @@
 /* Software-Based Trusted Platform Module (TPM) Emulator for Linux
  * Copyright (C) 2004 Mario Strasser <mast@gmx.net>,
  *                    Swiss Federal Institute of Technology (ETH) Zurich
- *               2006 Heiko Stamer <stamer@gaos.org>
+ *               2006, 2007 Heiko Stamer <stamer@gaos.org>
  *
  * This module is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_structures.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_structures.h 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #ifndef _TPM_STRUCTURES_H_
@@ -44,6 +44,7 @@
 typedef BYTE   TPM_AUTH_DATA_USAGE;
 typedef BYTE   TPM_PAYLOAD_TYPE;
 typedef BYTE   TPM_VERSION_BYTE; /* added since v1.2 rev 94 */
+typedef BYTE   TPM_DA_STATE; /* added since v1.2 rev 103 */
 typedef UINT16 TPM_TAG;
 typedef UINT16 TPM_PROTOCOL_ID;
 typedef UINT16 TPM_STARTUP_TYPE;
@@ -148,10 +149,11 @@
 #define TPM_ET_DEL_KEY_BLOB     0x09
 #define TPM_ET_COUNTER          0x0A
 #define TPM_ET_NV               0x0B
+#define TPM_ET_OPERATOR         0x0C /* added since v1.2 rev 103 */
 #define TPM_ET_RESERVED_HANDLE  0x40
 /* MSB Values */
 #define TPM_ET_XOR              0x00
-#define TPM_ET_AES128           0x06
+#define TPM_ET_AES128_CTR       0x06 /* changed since v1.2 rev 103 */
 
 /*
  * Reserved Key Handles ([TPM_Part2], Section 4.4.1)
@@ -180,6 +182,7 @@
  * the affect that TPM_Startup has on the values.
  */
 /* 31-8 reserved and must be 0 */
+#define TPM_STARTUP_RT_DAA_TPM_ST_STATE        (1 << 8) /* added since v1.2 rev 103 */
 #define TPM_STARTUP_AUDIT_DIGEST_IGNORE        (1 << 7)
 #define TPM_STARTUP_AUDIT_DIGEST_ST_CLEAR      (1 << 6)
 #define TPM_STARTUP_AUDIT_DIGEST_ST_ANY        (1 << 5)
@@ -206,8 +209,8 @@
  * This table defines the types of algorithms which may be supported by the TPM.
  */
 #define TPM_ALG_RSA             0x00000001
-#define TPM_ALG_DES             0x00000002
-#define TPM_ALG_3DES            0x00000003
+#define TPM_ALG_DES             0x00000002 /* reserved since v1.2 rev 103 */
+#define TPM_ALG_3DES            0x00000003 /* reserved since v1.2 rev 103 */
 #define TPM_ALG_SHA             0x00000004
 #define TPM_ALG_HMAC            0x00000005
 #define TPM_ALG_AES128          0x00000006
@@ -238,7 +241,7 @@
 #define TPM_MS_REWRAP                     0x0002
 #define TPM_MS_MAINT                      0x0003
 #define TPM_MS_RESTRICT_MIGRATE           0x0004
-#define TPM_MS_RESTRICT_APPROVE_DOUBLE    0x0005
+#define TPM_MS_RESTRICT_APPROVE           0x0005 /* changed since v1.2 rev 103 */
 /* removed since v1.2 rev 94
 #define TPM_MS_RESTRICT_MIGRATE_EXTERNAL  0x0006
 */
@@ -299,14 +302,17 @@
   BYTE digest[20];
 } TPM_DIGEST;
 
+/* Redefinitions */
 typedef TPM_DIGEST TPM_CHOSENID_HASH;
 typedef TPM_DIGEST TPM_COMPOSITE_HASH;
 typedef TPM_DIGEST TPM_DIRVALUE;
 typedef TPM_DIGEST TPM_HMAC;
 typedef TPM_DIGEST TPM_PCRVALUE;
 typedef TPM_DIGEST TPM_AUDITDIGEST;
+/* removed since v1.2 rev 103
 typedef TPM_DIGEST TPM_DAA_TPM_SEED;
 typedef TPM_DIGEST TPM_DAA_CONTEXT_SEED;
+*/
 
 /*
  * TPM_NONCE ([TPM_Part2], Section 5.5)
@@ -316,12 +322,18 @@
   BYTE nonce[20];
 } TPM_NONCE;
 
+/* Redefinitions */
+typedef TPM_NONCE TPM_DAA_TPM_SEED; /* added since v1.2 rev 103 */
+typedef TPM_NONCE TPM_DAA_CONTEXT_SEED; /* added since v1.2 rev 103 */
+
 /*
  * TPM_AUTHDATA ([TPM_Part2], Section 5.6)
  * Information that is saved or passed to provide proof of ownership of an
  * entity. For version 1 this area is always 20 bytes.
  */
 typedef BYTE TPM_AUTHDATA[20];
+
+/* Redefinitions */
 typedef TPM_AUTHDATA TPM_SECRET;
 typedef TPM_AUTHDATA TPM_ENCAUTH;
 
@@ -353,7 +365,7 @@
 #define TPM_ES_NONE                    0x0001
 #define TPM_ES_RSAESPKCSv15            0x0002
 #define TPM_ES_RSAESOAEP_SHA1_MGF1     0x0003
-#define TPM_ES_SYM_CNT                 0x0004
+#define TPM_ES_SYM_CTR                 0x0004 /* changed since v1.2 rev 103 */
 #define TPM_ES_SYM_OFB                 0x0005
 
 /*
@@ -586,9 +598,7 @@
 #define TPM_ORD_GetRandom                       70
 #define TPM_ORD_StirRandom                      71
 #define TPM_ORD_SelfTestFull                    80
-/* removed since v1.2 rev 94
-#define TPM_ORD_CertifySelfTest                 82
-*/
+#define TPM_ORD_CertifySelfTest                 82 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_ContinueSelfTest                83
 #define TPM_ORD_GetTestResult                   84
 #define TPM_ORD_Reset                           90
@@ -596,9 +606,7 @@
 #define TPM_ORD_DisableOwnerClear               92
 #define TPM_ORD_ForceClear                      93
 #define TPM_ORD_DisableForceClear               94
-/* removed since v1.2 rev 94
-#define TPM_ORD_GetCapabilitySigned             100
-*/
+#define TPM_ORD_GetCapabilitySigned             100 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_GetCapability                   101
 #define TPM_ORD_GetCapabilityOwner              102
 #define TPM_ORD_OwnerSetDisable                 110
@@ -618,15 +626,11 @@
 #define TPM_ORD_CreateRevocableEK               127
 #define TPM_ORD_RevokeTrust                     128
 #define TPM_ORD_OwnerReadInternalPub            129
-/* removed since v1.2 rev 94
-#define TPM_ORD_GetAuditEvent                   130
-#define TPM_ORD_GetAuditEventSigned             131
-*/
+#define TPM_ORD_GetAuditEvent                   130 /* cmd removed v1.2 rev 94 */
+#define TPM_ORD_GetAuditEventSigned             131 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_GetAuditDigest                  133
 #define TPM_ORD_GetAuditDigestSigned            134
-/* removed since v1.2 rev 94
-#define TPM_ORD_GetOrdinalAuditStatus           140
-*/
+#define TPM_ORD_GetOrdinalAuditStatus           140 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_SetOrdinalAuditStatus           141
 #define TPM_ORD_Terminate_Handle                150
 #define TPM_ORD_Init                            151
@@ -667,7 +671,7 @@
 #define TPM_ORD_EstablishTransport              230
 #define TPM_ORD_ExecuteTransport                231
 #define TPM_ORD_ReleaseTransportSigned          232
-/* removed since v1.2 rev 94
+/* command and ordinal removed since v1.2 rev 94
 #define TPM_ORD_SetTickType                     240
 */
 #define TPM_ORD_GetTicks                        241
@@ -722,6 +726,8 @@
  * TPM_LOCALITY_SELECTION ([TPM_Part2], Section 8.6)
  * When used with localityAtCreation only one bit is set and it corresponds
  * to the locality of the command creating the structure.
+ * When used with localityAtRelease the bits indicate which localities
+ * CAN perform the release.
  */
 typedef BYTE TPM_LOCALITY_SELECTION;
 /* 5-7 are reserved and must be 0 */
@@ -767,17 +773,25 @@
 #define sizeof_TPM_PCR_INFO_SHORT(s) ( \
   sizeof_TPM_PCR_SELECTION(s.pcrSelection) + 1 + 20)
 
-/*
+/* !!! WATCH: changed since v1.2 rev 103 !!!
+ *
  * TPM_PCR_ATTRIBUTES ([TPM_Part2], Section 8.8)
  * These attributes are available on a per PCR basis.
  */
 #define TPM_NUM_LOCALITY 5
 typedef struct tdTPM_PCR_ATTRIBUTES {
   BOOL pcrReset;
+  TPM_LOCALITY_SELECTION pcrExtendLocal;
+  TPM_LOCALITY_SELECTION pcrResetLocal;
+  /* changed
   BOOL pcrResetLocal[TPM_NUM_LOCALITY];
   BOOL pcrExtendLocal[TPM_NUM_LOCALITY];
+  */
 } TPM_PCR_ATTRIBUTES;
-#define sizeof_TPM_PCR_ATTRIBUTES(s) (1 + 2*TPM_NUM_LOCALITY)
+#define sizeof_TPM_PCR_ATTRIBUTES(s) (1 + \
+  + sizeof_TPM_PCR_SELECTION(s.pcrExtendLocal) \
+  + sizeof_TPM_PCR_SELECTION(s.pcrResetLocal))
+#define sizeof_TPM_PCR_ATTRIBUTES2(s) (1 + 1 + 1)
 
 /*
  * Storage Structures
@@ -794,12 +808,19 @@
   TPM_STRUCTURE_TAG tag;
   TPM_ENTITY_TYPE et; /* renamed since v1.2 rev 94 */
   UINT32 sealInfoSize;
-  TPM_PCR_INFO sealInfo;
+
+TPM_PCR_INFO sealInfo;
+/* TODO: must be the line below, according to rev 103
+BYTE *sealInfo; */ /* type changed since v1.2 rev 103 */
+
   UINT32 encDataSize;
   BYTE* encData;
 } TPM_STORED_DATA;
-#define sizeof_TPM_STORED_DATA(s) (2 + 2 + 4 + s.sealInfoSize + 4 + s.encDataSize)
-#define free_TPM_STORED_DATA(s) { if (s.encDataSize > 0) tpm_free(s.encData); }
+#define sizeof_TPM_STORED_DATA(s) (2 + 2 + 4 + s.sealInfoSize \
+  + 4 + s.encDataSize)
+#define free_TPM_STORED_DATA(s) { \
+/*  if (s.sealInfoSize > 0) tpm_free(s.sealInfo); \ */ \
+  if (s.encDataSize > 0) tpm_free(s.encData); }
 
 /*
  * TPM_SEALED_DATA ([TPM_Part2], Section 9.3)
@@ -841,6 +862,13 @@
 } TPM_BOUND_DATA;
 
 /*
+ * TPM_KEY complex ([TPM_Part2], Section 10)
+ * The TPA_KEY complex is where all of the information regarding keys
+ * is kept. These structures combine to fully define and protect the
+ * information regarding an asymmetric key.
+ */
+
+/*
  * TPM_RSA_KEY_PARMS ([TPM_Part2], Section 10.1.1)
  * This structure describes the parameters of an RSA key.
  */
@@ -851,7 +879,8 @@
   BYTE* exponent;
 } TPM_RSA_KEY_PARMS;
 #define sizeof_TPM_RSA_KEY_PARMS(s) (4 + 4 + 4 + s.exponentSize)
-#define free_TPM_RSA_KEY_PARMS(s) { if (s.exponentSize > 0) tpm_free(s.exponent); }
+#define free_TPM_RSA_KEY_PARMS(s) { \
+  if (s.exponentSize > 0) tpm_free(s.exponent); }
 
 /*
  * TPM_SYMMETRIC_KEY_PARMS ([TPM_Part2], Section 10.1.2)
@@ -920,12 +949,17 @@
   TPM_AUTH_DATA_USAGE authDataUsage;
   TPM_KEY_PARMS algorithmParms;
   UINT32 PCRInfoSize;
-  TPM_PCR_INFO PCRInfo;
+
+TPM_PCR_INFO PCRInfo;
+/* TODO: must be the line below, according to rev 103
+BYTE *PCRInfo; */ /* type changed since v1.2 rev 103 */
+
   TPM_STORE_PUBKEY pubKey;
   UINT32 encDataSize;
   BYTE* encData;
 } TPM_KEY;
-#define sizeof_TPM_KEY(s) (4 + 2 + 4 + 1 + sizeof_TPM_KEY_PARMS(s.algorithmParms) \
+#define sizeof_TPM_KEY(s) (4 + 2 + 4 + 1 \
+  + sizeof_TPM_KEY_PARMS(s.algorithmParms) \
   + 4 + s.PCRInfoSize + sizeof_TPM_STORE_PUBKEY(s.pubKey) \
   + 4 + s.encDataSize)
 #define free_TPM_KEY(s) { if (s.encDataSize > 0) tpm_free(s.encData); \
@@ -970,7 +1004,7 @@
 } TPM_STORE_ASYMKEY;
 #define sizeof_TPM_STORE_ASYMKEY(s) ( 1 + 20 + 20 + 20 \
   + sizeof_TPM_STORE_PRIVKEY(s.privKey))
-#define free_TPM_STORE_ASYMKEY(s) { free_TPM_STORE_PRIVKEY(s.privKey) }
+#define free_TPM_STORE_ASYMKEY(s) { free_TPM_STORE_PRIVKEY(s.privKey); }
 
 /*
  * TPM_MIGRATE_ASYMKEY ([TPM_Part2], Section 10.8)
@@ -984,6 +1018,9 @@
   UINT32 partPrivKeyLen;
   TPM_STORE_PRIVKEY partPrivKey;
 } TPM_MIGRATE_ASYMKEY;
+#define sizeof_TPM_MIGRATE_ASYMKEY(s) ( 1 + 20 + 20 + 4 \
+  + sizeof_TPM_STORE_PRIVKEY(s.partPrivKey))
+#define free_TPM_MIGRATE_ASYMKEY(s) { free_TPM_STORE_PRIVKEY(s.partPrivKey); }
 
 /*
  * TPM_MIGRATIONKEYAUTH ([TPM_Part2], Section 5.12)
@@ -995,7 +1032,8 @@
   TPM_MIGRATE_SCHEME migrationScheme;
   TPM_DIGEST digest;
 } TPM_MIGRATIONKEYAUTH;
-#define sizeof_TPM_MIGRATIONKEYAUTH(s) (sizeof_TPM_PUBKEY(s.migrationKey) + 2 + 20)
+#define sizeof_TPM_MIGRATIONKEYAUTH(s) (sizeof_TPM_PUBKEY(s.migrationKey) \
+  + 2 + 20)
 #define free_TPM_MIGRATIONKEYAUTH(s) { free_TPM_PUBKEY(s.migrationKey); }
 
 /*
@@ -1010,7 +1048,7 @@
  */
 
 /*
- * TPM_AUTH ([TPM_Part1], Section 11.2)
+ * TPM_AUTH ([TPM_Part1], Section ??.?)
  * Authorization Protocol Input/Output Parameter
  */
 typedef struct tdTPM_AUTH {
@@ -1043,7 +1081,11 @@
   TPM_NONCE data;
   BOOL parentPCRStatus;
   UINT32 PCRInfoSize;
-  TPM_PCR_INFO PCRInfo; /* FIXME: should be TPM_PCR_INFO_SHORT */
+
+TPM_PCR_INFO PCRInfo;
+/* TODO: must be the line below, according to rev 103
+BYTE *PCRInfo; */ /* type changed since v1.2 rev 103 */
+
   UINT32 migrationAuthoritySize;
   BYTE* migrationAuthority;
 } TPM_CERTIFY_INFO;
@@ -1140,33 +1182,11 @@
  * This structure is sent by the TSS to the Privacy CA to create the
  * identity credential. This structure is informative only.
  */
-typedef struct tdTPM_IDENTITY_REQ {
-  UINT32 asymSize;
-  UINT32 symSize;
-  TPM_KEY_PARMS asymAlgorithm;
-  TPM_KEY_PARMS symAlgorithm;
-  BYTE* asymBlob;
-  BYTE* symBlob;
-} TPM_IDENTITY_REQ;
 
 /*
  * TPM_IDENTITY_PROOF ([TPM_Part2], Section 12.7)
  * Structure in use during the AIK credential process.
  */
-typedef struct tdTPM_IDENTITY_PROOF {
-  TPM_STRUCT_VER ver;
-  UINT32 labelSize;
-  UINT32 identityBindingSize;
-  UINT32 endorsementSize;
-  UINT32 platformSize;
-  UINT32 conformanceSize;
-  TPM_PUBKEY identityKey;
-  BYTE* labelArea;
-  BYTE* identityBinding;
-  BYTE* endorsementCredential;
-  BYTE* platformCredential;
-  BYTE* conformanceCredential;
-} TPM_IDENTITY_PROOF;
 
 /*
  * TPM_ASYM_CA_CONTENTS ([TPM_Part2], Section 12.8)
@@ -1182,11 +1202,6 @@
  * This structure returned by the Privacy CA with the encrypted
  * identity credential.
  */
-typedef struct tdTPM_SYM_CA_ATTESTATION {
-  UINT32 credSize;
-  TPM_KEY_PARMS algorithm;
-  BYTE* credential;
-} TPM_SYM_CA_ATTESTATION;
 
 /*
  * Tick Structures
@@ -1267,7 +1282,7 @@
   TPM_DIGEST transDigest;
 } TPM_TRANSPORT_INTERNAL;
 #define sizeof_TPM_TRANSPORT_INTERNAL(s) (2 + 20 + 4 + 20 + 20 \
-  + sizeof_TPM_TRANSPORT_PUBLIC(s.tranPublic))
+  + sizeof_TPM_TRANSPORT_PUBLIC(s.transPublic))
 
 /*
  * TPM_TRANSPORT_LOG_IN structure ([TPM_Part2], Section 13.3)
@@ -1282,7 +1297,7 @@
   TPM_DIGEST parameters;
   TPM_DIGEST pubKeyHash;
 } TPM_TRANSPORT_LOG_IN;
-#define sizeof_TPM_TRANSPORT_LOG_IN(s) (2 + 2*20)
+#define sizeof_TPM_TRANSPORT_LOG_IN(s) (2 + 20 + 20)
 
 /*
  * TPM_TRANSPORT_LOG_OUT structure ([TPM_Part2], Section 13.4)
@@ -1484,6 +1499,7 @@
 #define TPM_NV_INDEX_TPM_CC             0x0000F001
 #define TPM_NV_INDEX_PlatformCert       0x0000F002
 #define TPM_NV_INDEX_Platform_CC        0x0000F003
+#define TPM_NV_INDEX_TRIAL              0x0000F004 /* added since v1.2 rev 103 */
 
 /*
  * TPM_NV_ATTRIBUTES ([TPM_Part2], Section 19.2)
@@ -1526,7 +1542,7 @@
   BOOL bWriteDefine;
   UINT32 dataSize;
 } TPM_NV_DATA_PUBLIC;
-#define sizeof_TPM_NV_DATA_PUBLIC(s) (2 + 4 + 6 + 3 + 4 \
+#define sizeof_TPM_NV_DATA_PUBLIC(s) (2 + 4 + 6 + 1 + 1 + 1 + 4 \
   + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfoRead) \
   + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfoWrite))
 
@@ -1558,6 +1574,14 @@
 #define TPM_MAX_NV_SIZE 64
 
 /*
+ * TPM_NV_DATA_AREA ([TPM_Part2], Section 19.6)
+ * TPM_NV_DATA_AREA is an indication of the internal structure the
+ * TPM uses to track NV areas. The structure definition is TPM vendor
+ * specific and never leaves the TPM. The structure would contain
+ * both the TPM_NV_DATA_PUBLIC and TPM_NV_DATA_SENSITIVE areas.
+ */
+
+/*
  * Delegate Structures
  */
 
@@ -1590,10 +1614,9 @@
 #define TPM_DELEGATE_SetOrdinalAuditStatus          (1 << 30) /* added */
 #define TPM_DELEGATE_DirWriteAuth                   (1 << 29) /* added */
 #define TPM_DELEGATE_CMK_ApproveMA                  (1 << 28) /* added */
-#define TPM_DELEGATE_CMD_CreateTicket               (1 << 26)
-/* removed since v1.2 rev 94
-#define TPM_DELEGATE_CMK_CreateKey                  (1 << 25)
-*/
+#define TPM_DELEGATE_NV_WriteValue                  (1 << 27) /* added */
+#define TPM_DELEGATE_CMK_CreateTicket               (1 << 26) /* name changed */
+#define TPM_DELEGATE_NV_ReadValue                   (1 << 25) /* name changed */
 #define TPM_DELEGATE_Delegate_LoadOwnerDelegation   (1 << 24) /* name changed */
 #define TPM_DELEGATE_DAA_Join                       (1 << 23)
 #define TPM_DELEGATE_AuthorizeMigrationKey          (1 << 22)
@@ -1604,9 +1627,7 @@
 #define TPM_DELEGATE_ResetLockValue                 (1 << 17) /* name changed */
 #define TPM_DELEGATE_OwnerClear                     (1 << 16)
 #define TPM_DELEGATE_DisableOwnerClear              (1 << 15)
-/* removed since v1.2 rev 94
-#define TPM_DELEGATE_DisableForceClear              (1 << 14)
-*/
+#define TPM_DELEGATE_NV_DefineSpace                 (1 << 14) /* name changed */
 #define TPM_DELEGATE_OwnerSetDisable                (1 << 13)
 #define TPM_DELEGATE_SetCapability                  (1 << 12) /* name changed */
 #define TPM_DELEGATE_MakeIdentity                   (1 << 11)
@@ -1621,6 +1642,8 @@
 #define TPM_DELEGATE_Delegate_Manage                (1 <<  2)
 #define TPM_DELEGATE_Delegate_CreateOwnerDelegation (1 <<  1)
 #define TPM_DELEGATE_DAA_Sign                       (1 <<  0)
+/* Per2 bits */
+/* 31-0 reserved and must be 0 */
 
 /*
  * Key Permission settings ([TPM_Part2], Section 20.2.3)
@@ -1657,6 +1680,8 @@
 #define TPM_KEY_DELEGATE_Unseal                     (1 <<  2) /* name changed */
 #define TPM_KEY_DELEGATE_Seal                       (1 <<  1) /* name changed */
 #define TPM_KEY_DELEGATE_LoadKey                    (1 <<  0) /* name changed */
+/* Per2 bits */
+/* 31-0 reserved and must be 0 */
 
 /*
  * TPM_FAMILY_FLAGS ([TPM_Part2], Section 20.3)
@@ -1726,8 +1751,10 @@
   TPM_FAMILY_ID familyID;
   TPM_FAMILY_VERIFICATION verificationCount;
 } TPM_DELEGATE_PUBLIC;
-#define sizeof_TPM_DELEGATE_PUBLIC(s) (2 + sizeof_TPM_DELEGATE_LABEL(s.rowLabel) \
-  + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfo) + sizeof_TPM_DELEGATIONS(s.permissions) \
+#define sizeof_TPM_DELEGATE_PUBLIC(s) (2 \
+  + sizeof_TPM_DELEGATE_LABEL(s.rowLabel) \
+  + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfo) \
+  + sizeof_TPM_DELEGATIONS(s.permissions) \
   + 4 + 4)
 #define free_TPM_DELEGATE_PUBLIC(s) { free_TPM_DELEGATE_LABEL(s.rowLabel); \
   free_TPM_DELEGATIONS(s.permissions); }
@@ -1779,8 +1806,9 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveArea;
 } TPM_DELEGATE_OWNER_BLOB;
-#define sizeof_TPM_DELEGATE_OWNER_BLOB(s) (2 + sizeof_TPM_DELEGATE_PUBLIC(s.pub) \
-  + 20 + 4 + s.additionalSize + 4 + s.sensitiveSize)
+#define sizeof_TPM_DELEGATE_OWNER_BLOB(s) (2 \
+  + sizeof_TPM_DELEGATE_PUBLIC(s.pub) + 20 \
+  + 4 + s.additionalSize + 4 + s.sensitiveSize)
 #define free_TPM_DELEGATE_OWNER_BLOB(s) { free_TPM_DELEGATE_PUBLIC(s.pub); \
   if (s.additionalSize > 0) tpm_free(s.additionalArea); \
   if (s.sensitiveSize > 0) tpm_free(s.sensitiveArea); }
@@ -1801,8 +1829,9 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveArea;
 } TPM_DELEGATE_KEY_BLOB;
-#define sizeof_TPM_DELEGATE_KEY_BLOB(s) (2 + sizeof_TPM_DELEGATE_PUBLIC(s.pub) \
-  + 20 + 20 + 4 + s.additionalSize + 4 + s.sensitiveSize)
+#define sizeof_TPM_DELEGATE_KEY_BLOB(s) (2 \
+  + sizeof_TPM_DELEGATE_PUBLIC(s.pub) + 20 + 20 \
+  + 4 + s.additionalSize + 4 + s.sensitiveSize)
 #define free_TPM_DELEGATE_KEY_BLOB(s) { free_TPM_DELEGATE_PUBLIC(s.pub); \
   if (s.additionalSize > 0) tpm_free(s.additionalArea); \
   if (s.sensitiveSize > 0) tpm_free(s.sensitiveArea); }
@@ -1847,9 +1876,10 @@
 #define TPM_CAP_TRANS_ES                0x00000015
 #define TPM_CAP_AUTH_ENCRYPT            0x00000017 /* added since v1.2 rev 94 */
 #define TPM_CAP_SELECT_SIZE             0x00000018 /* added since v1.2 rev 94 */
+#define TPM_CAP_DA_LOGIC                0x00000019 /* added since v1.2 rev 103 */
 #define TPM_CAP_VERSION_VAL             0x0000001A /* added since v1.2 rev 94 */
 
-/* subCap definitions */
+/* subCap definitions ([TPM_Part2], Section 21.2) */
 #define TPM_CAP_PROP_PCR                0x00000101
 #define TPM_CAP_PROP_DIR                0x00000102
 #define TPM_CAP_PROP_MANUFACTURER       0x00000103
@@ -1874,8 +1904,8 @@
 /* removed since v1.2 rev 94
 #define TPM_CAP_PROP_NV_MAXBUF          0x00000118
 */
-#define TPM_CAP_PROP_DAA_MAX            0x00000119
-#define TPM_CAP_PROP_SESSION_DAA        0x0000011A
+#define TPM_CAP_PROP_MAX_DAASESS        0x00000119 /* name changed in rev 103 */
+#define TPM_CAP_PROP_DAASESS            0x0000011A /* name changed in rev 103 */
 /* removed since v1.2 rev 94
 #define TPM_CAP_PROP_GLOBALLOCK         0x0000011A
 */
@@ -1919,9 +1949,70 @@
   UINT16 vendorSpecificSize;
   BYTE* vendorSpecific;
 } TPM_CAP_VERSION_INFO;
-#define sizeof_TPM_CAP_VERSION_INFO(s) (sizeof(TPM_STRUCTURE_TAG) + \
-  sizeof(TPM_VERSION) + sizeof(UINT16) + sizeof(BYTE) + 4*sizeof(BYTE) + \
-  sizeof(UINT16) + s.vendorSpecificSize)
+#define sizeof_TPM_CAP_VERSION_INFO(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_VERSION) + sizeof(UINT16) + sizeof(BYTE) + 4*sizeof(BYTE) \
+  + sizeof(UINT16) + s.vendorSpecificSize)
+
+/* TPM_DA_ACTION_TYPE ([TPM_Part2], Section 21.10)
+ * This structure indicates the action taken when the dictionary attack
+ * mitigation logic is active, when TPM_DA_STATE is TPM_DA_STATE_ACTIVE.
+ */
+#define TPM_TAG_DA_ACTION_TYPE 0x0039
+typedef struct tdTPM_DA_ACTION_TYPE {
+  TPM_STRUCTURE_TAG tag;
+  UINT32 actions;
+} TPM_DA_ACTION_TYPE;
+
+#define TPM_DA_ACTION_FAILURE_MODE        (1 << 3)
+#define TPM_DA_ACTION_DEACTIVATE          (1 << 2)
+#define TPM_DA_ACTION_DISABLE             (1 << 1)
+#define TPM_DA_ACTION_TIMEOUT             (1 << 0)
+
+/*
+ * TPM_DA_INFO ([TPM_Part2], Section 21.7)
+ * This structure is an output from a TPM_GetCapability->TPM_CAP_DA_LOGIC
+ * request if TPM_PERMANENT_FLAGS->disableFullDALogicInfo is FALSE.
+ */
+#define TPM_TAG_DA_INFO 0x0037
+typedef struct tdTPM_DA_INFO {
+  TPM_STRUCTURE_TAG tag;
+  TPM_DA_STATE state;
+  UINT16 currentCount;
+  UINT16 thresholdCount;
+  TPM_DA_ACTION_TYPE actionAtThreshold;
+  UINT32 actionDependValue;
+  UINT32 vendorDataSize;
+  BYTE* vendorData;
+} TPM_DA_INFO;
+#define sizeof_TPM_DA_INFO(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_DA_STATE) + 2*sizeof(UINT16) + sizeof(TPM_DA_ACTION_TYPE) \
+  + 2*sizeof(UINT32) + s.vendorDataSize)
+
+/*
+ * TPM_DA_INFO_LIMITED ([TPM_Part2], Section 21.8)
+ * This structure is an output from a TPM_GetCapability->TPM_CAP_DA_LOGIC
+ * request if TPM_PERMANENT_FLAGS->disableFullDALogicInfo is TRUE.
+ */
+#define TPM_TAG_DA_INFO_LIMITED 0x0038
+typedef struct tdTPM_DA_INFO_LIMITED {
+  TPM_STRUCTURE_TAG tag;
+  TPM_DA_STATE state;
+  TPM_DA_ACTION_TYPE actionAtThreshold;
+  UINT32 vendorDataSize;
+  BYTE* vendorData;
+} TPM_DA_INFO_LIMITED;
+#define sizeof_TPM_DA_INFO_LIMITED(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_DA_STATE) + sizeof(TPM_DA_ACTION_TYPE) \
+  + sizeof(UINT32) + s.vendorDataSize)
+
+/*
+ * TPM_DA_STATE ([TPM_Part2], Section 21.9)
+ * TPM_DA_STATE enumerates the possible states of the dictionary attack
+ * mitigation logic.
+ */
+#define TPM_DA_STATE_INACTIVE      0x00
+#define TPM_DA_STATE_ACTIVE        0x01
+
 
 /*
  * DAA Structures ([TPM_Part2], Section 22)
@@ -2021,9 +2112,9 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveData;
 } TPM_DAA_BLOB;
-#define sizeof_TPM_DAA_BLOB(s) (sizeof(TPM_STRUCTURE_TAG) + \
-  sizeof(TPM_RESOURCE_TYPE) + sizeof(s.label) + sizeof(TPM_DIGEST) + \
-  2*sizeof(UINT32) + s.additionalSize + s.sensitiveSize)
+#define sizeof_TPM_DAA_BLOB(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_RESOURCE_TYPE) + sizeof(s.label) + sizeof(TPM_DIGEST) \
+  + 2*sizeof(UINT32) + s.additionalSize + s.sensitiveSize)
 
 /*
  * TPM_DAA_SENSITIVE ([TPM_Part2], Section 22.9)
@@ -2035,8 +2126,8 @@
   UINT32 internalSize;
   BYTE* internalData;
 } TPM_DAA_SENSITIVE;
-#define sizeof_TPM_DAA_SENSITIVE(s) (sizeof(TPM_STRUCTURE_TAG) + \
-  sizeof(UINT32) + s.internalSize)
+#define sizeof_TPM_DAA_SENSITIVE(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(UINT32) + s.internalSize)
 
 /*
  * Redirection ([TPM_Part2], Section 23)
@@ -2049,7 +2140,7 @@
 typedef UINT32 TPM_REDIR_COMMAND;
 
 /*
- * Internal Data Held By TPM
+ * Internal Data Held By TPM ([TPM_Part2], Section 7)
  */
 
 /*
@@ -2079,12 +2170,13 @@
   BOOL readSRKPub;
   BOOL tpmEstablished;
   BOOL maintenanceDone;
+  BOOL disableFullDALogicInfo; /* WATCH: added since v1.2 rev 103 */
   /* additional, not marshalled flags */
   BOOL selfTestSucceeded;
   BOOL owned;
   BOOL dataRestored;
 } TPM_PERMANENT_FLAGS;
-#define sizeof_TPM_PERMANENT_FLAGS(s) (2 + 19)
+#define sizeof_TPM_PERMANENT_FLAGS(s) (2 + 20)
 
 /*
  * TPM_STCLEAR_FLAGS ([TPM_Part2], Section 7.2)
@@ -2161,7 +2253,7 @@
   TPM_STRUCTURE_TAG tag;
   TPM_VERSION version;
   TPM_NONCE tpmProof;
-  //TPM_NONCE fipsReset;
+  //TPM_NONCE ekReset;
   TPM_SECRET ownerAuth;
   TPM_SECRET operatorAuth;
   //TPM_SECRET adminAuth;
@@ -2187,13 +2279,15 @@
   TPM_NV_DATA_SENSITIVE *nvStorage;
   //TPM_CMK_DELEGATE restrictDelegate;
   TPM_DAA_TPM_SEED tpmDAASeed;
+  //TPM_NONCE daaProof;
+  //TPM_KEY daaBlobKey;
   TPM_KEY_DATA keys[TPM_MAX_KEYS];
   const char *testResult;
 } TPM_PERMANENT_DATA;
 #define sizeof_TPM_PERMANENT_DATA(s) (2 + 4 + 4*20 \
   + sizeof_RSA(s.endorsementKey) + TPM_ORD_MAX/8 \
   + (1+TPM_MAX_KEYS)*sizeof_TPM_KEY_DATA(s.srk) \
-  + TPM_NUM_PCR*(sizeof_TPM_PCR_ATTRIBUTES(x)+20) \
+  + TPM_NUM_PCR*(sizeof_TPM_PCR_ATTRIBUTES2(x)+20) \
   + TPM_MAX_COUNTERS*sizeof_TPM_COUNTER_VALUE2(x) + 1 + 4 + 20)
 
 /*
@@ -2209,6 +2303,8 @@
   TPM_COUNT_ID countID;
   //UINT32 ownerReference;
   //BOOL disableResetLock;
+  //TPM_PCRVALUE PCR[TPM_NUM_PCR];
+  //UINT32 deferredPhysicalPresence;
 } TPM_STCLEAR_DATA;
 #define sizeof_TPM_STCLEAR_DATA(s) (2 + 20 + 4)
 
@@ -2324,8 +2420,8 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveData;
 } TPM_CONTEXT_BLOB;
-#define sizeof_TPM_CONTEXT_BLOB(s) (2 + 4 + 4 + 16 + 4 + 20 + 4 \
- + s.additionalSize + 4 + s.sensitiveSize)
+#define sizeof_TPM_CONTEXT_BLOB(s) (2 + 4 + 4 + 16 + 4 + 20 \
+  + 4 + s.additionalSize + 4 + s.sensitiveSize)
 #define free_TPM_CONTEXT_BLOB(s) { \
   if (s.additionalSize > 0) tpm_free(s.additionalData); \
   if (s.sensitiveSize > 0) tpm_free(s.sensitiveData); }
@@ -2333,6 +2429,8 @@
 /*
  * TPM_CONTEXT_SENSITIVE ([TPM_Part2], Section 18.2)
  * The internal areas that the TPM needs to encrypt and store off the TPM.
+ * This is an informative structure and the TPM can implement in any
+ * manner they wish.
  */
 #define TPM_TAG_CONTEXT_SENSITIVE 0x0002
 typedef struct tdTPM_CONTEXT_SENSITIVE {
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_testing.c tpm_emulator-0.5/tpm/tpm_testing.c
--- tpm_emulator-0.5.orig/tpm/tpm_testing.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_testing.c	2006-11-17 06:46:02.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_testing.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_testing.c 153 2006-11-17 04:46:02Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_ticks.c tpm_emulator-0.5/tpm/tpm_ticks.c
--- tpm_emulator-0.5.orig/tpm/tpm_ticks.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_ticks.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_ticks.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_ticks.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm/tpm_transport.c tpm_emulator-0.5/tpm/tpm_transport.c
--- tpm_emulator-0.5.orig/tpm/tpm_transport.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm/tpm_transport.c	2006-11-12 01:56:11.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_transport.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_transport.c 144 2006-11-11 23:56:11Z mast $
  */
 
 /* 
diff -Nuar tpm_emulator-0.5.orig/tpmd/Makefile tpm_emulator-0.5/tpmd/Makefile
--- tpm_emulator-0.5.orig/tpmd/Makefile	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpmd/Makefile	2007-09-02 14:05:56.000000000 +0300
@@ -1,14 +1,14 @@
 # Software-Based Trusted Platform Module (TPM) Emulator for Linux
 # Copyright (C) 2004-2006 Mario Strasser <mast@gmx.net>
 #
-# $Id: Makefile 165 2006-12-15 11:58:48Z mast $
+# $Id: Makefile 191 2007-09-02 11:05:56Z mast $
 
 CC      := gcc
 WFLAGS  := -Wall -Werror -Wno-unused -Wpointer-arith -Wcast-align \
            -Wwrite-strings -Wsign-compare -Wno-multichar
            #WFLAGS  += -Wextra -Wcast-qual -Wmissing-prototypes -Wmissing-declarations -Wstrict-aliasing
-CFLAGS  := $(WFLAGS) -g -I.. -I. -O2 -fno-strict-aliasing
-LDFLAGS := -lgmp
+CFLAGS  += $(WFLAGS) -g -I.. -I. -O2 -fno-strict-aliasing
+LDFLAGS += -lgmp
 
 BINDIR  := /usr/sbin/
 
@@ -27,9 +27,15 @@
 clean:
 	rm -f $(TPMD) $(OBJS)
 
+TPMD_USER  ?= tss
+TPMD_GROUP ?= tss
+INSTALL    ?= install
+
 install: $(TPMD)
-	test -d /var/tpm || mkdir /var/tpm
-	cp $(TPMD) $(BINDIR)
+	$(INSTALL) -m 755 -o $(TPMD_USER) -g $(TPMD_GROUP) -d $(DESTDIR)/var/lib/tpm
+	$(INSTALL) -m 755 -o $(TPMD_USER) -g $(TPMD_GROUP) -d $(DESTDIR)/var/run/tpm
+	$(INSTALL) -D -d $(DESTDIR)/$(BINDIR)
+	$(INSTALL) -m 755 $(TPMD) $(DESTDIR)/$(BINDIR)
 
 .PHONY: all clean install
 
diff -Nuar tpm_emulator-0.5.orig/tpmd/tpmd.c tpm_emulator-0.5/tpmd/tpmd.c
--- tpm_emulator-0.5.orig/tpmd/tpmd.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpmd/tpmd.c	2007-08-23 23:09:19.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpmd.c 164 2006-12-05 10:13:35Z mast $
+ * $Id: tpmd.c 189 2007-08-23 20:09:19Z mast $
  */
 
 #include <stdio.h>
@@ -28,6 +28,8 @@
 #include <sys/time.h>
 #include <sys/socket.h>
 #include <sys/un.h>
+#include <pwd.h>
+#include <grp.h>
 #include "tpm_emulator_config.h"
 #include "tpm/tpm_emulator.h"
 
@@ -40,9 +42,11 @@
 static int is_daemon = 0;
 static int opt_debug = 0;
 static int opt_foreground = 0;
-static const char *opt_socket_name = "/var/tpm/" TPM_DAEMON_NAME "_socket:0";
-static const char *opt_storage_file = "/var/tpm/tpm_emulator-1.2."
+static const char *opt_socket_name = "/var/run/tpm/" TPM_DAEMON_NAME "_socket:0";
+static const char *opt_storage_file = "/var/lib/tpm/tpm_emulator-1.2."
                                       TPM_STR(VERSION_MAJOR) "." TPM_STR(VERSION_MINOR);
+static uid_t opt_uid = 0;
+static gid_t opt_gid = 0;
 static int tpm_startup = 2;
 static int rand_fh;
 
@@ -74,11 +78,13 @@
 uint64_t tpm_get_ticks(void)
 {
     static uint64_t old_t = 0;
-    uint64_t new_t;
+    uint64_t new_t, res_t;
     struct timeval tv;
     gettimeofday(&tv, NULL);
     new_t = (uint64_t)tv.tv_sec * 1000000 + (uint64_t)tv.tv_usec;
-    return (old_t > 0) ? new_t - old_t : 0;
+    res_t = (old_t > 0) ? new_t - old_t : 0;
+    old_t = new_t;
+    return res_t;
 }
 
 int tpm_write_to_file(uint8_t *data, size_t data_length)
@@ -131,9 +137,14 @@
 
 static void print_usage(char *name)
 {
-    printf("usage: %s [-d] [-f] [-h] [startup mode]\n", name);
+    printf("usage: %s [-d] [-f] [-s storage file] [-u unix socket name] "
+           "[-o user name] [-g group name] [-h] [startup mode]\n", name);
     printf("  d : enable debug mode\n");
     printf("  f : forces the application to run in the foreground\n");
+    printf("  s : storage file to use (default: %s)\n", opt_storage_file);
+    printf("  u : unix socket name to use (default: %s)\n", opt_socket_name);
+    printf("  o : effective user the application should run as\n");
+    printf("  g : effective group the application should run as\n");
     printf("  h : print this help message\n");
     printf("  startup mode : must be 'clear', "
            "'save' (default) or 'deactivated\n");
@@ -142,8 +153,12 @@
 static void parse_options(int argc, char **argv)
 {
     char c;
+    struct passwd *pwd;
+    struct group *grp;
+    opt_uid = getuid();
+    opt_gid = getgid();
     info("parsing options");
-    while ((c = getopt (argc, argv, "dfh")) != -1) {
+    while ((c = getopt (argc, argv, "dfs:u:o:g:h")) != -1) {
         debug("handling option '-%c'", c);
         switch (c) {
             case 'd':
@@ -155,6 +170,30 @@
                 debug("application is forced to run in foreground");
                 opt_foreground = 1;
                 break;
+            case 's':
+                opt_storage_file = optarg;
+                debug("using storage file '%s'", opt_storage_file);
+                break;
+            case 'u':
+                opt_socket_name = optarg;
+                debug("using unix socket '%s'", opt_socket_name);
+                break;
+            case 'o':
+                pwd  = getpwnam(optarg);
+                if (pwd == NULL) {
+                    error("invalid user name '%s'\n", optarg);
+                    exit(EXIT_FAILURE);
+                }
+                opt_uid = pwd->pw_uid;
+                break;
+            case 'g':
+                grp  = getgrnam(optarg);
+                if (grp == NULL) {
+                    error("invalid group name '%s'\n", optarg);
+                    exit(EXIT_FAILURE);
+                }
+                opt_gid = grp->gr_gid;
+                break;
             case '?':
                 error("unknown option '-%c'", optopt);
                 print_usage(argv[0]);
@@ -182,6 +221,24 @@
     }
 }
 
+static void switch_uid_gid(void)
+{
+    if (opt_gid != getgid()) {
+        info("switching effective group ID to %d", opt_gid);  
+        if (setgid(opt_gid) == -1) {
+            error("switching effective group ID to %d failed: %s", opt_gid, strerror(errno));
+            exit(EXIT_FAILURE);
+        }
+    }
+    if (opt_uid != getuid()) {
+        info("switching effective user ID to %d", opt_uid);
+        if (setuid(opt_uid) == -1) {
+            error("switching effective user ID to %d failed: %s", opt_uid, strerror(errno));
+            exit(EXIT_FAILURE);
+        }
+    }
+}
+
 static void init_random(void)
 {
     info("openening random device %s", TPM_RANDOM_DEVICE);
@@ -258,6 +315,7 @@
     }
     addr.sun_family = AF_UNIX;
     strncpy(addr.sun_path, name, sizeof(addr.sun_path));
+    umask(0177);
     if (bind(sock, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
         error("bind(%s) failed: %s", addr.sun_path, strerror(errno));
         close(sock);
@@ -270,7 +328,8 @@
 static void main_loop(void)
 {
     int sock, fh, res;
-    uint32_t in_len, out_len;
+    int32_t in_len;
+    uint32_t out_len;
     uint8_t in[TPM_CMD_BUF_SIZE], *out;
     struct sockaddr_un addr;
     socklen_t addr_len;
@@ -340,7 +399,6 @@
                         res = write(fh, out, out_len);
                         if (res < 0) {
                             error("write(%d) failed: %s", out_len, strerror(errno));
-                            tpm_free(out);
                             break;
                         }
                         out_len	-= res;
@@ -366,6 +424,8 @@
     syslog(LOG_INFO, "--- separator ---\n");
     info("starting TPM Emulator daemon");
     parse_options(argc, argv);
+    /* switch uid/gid if required */
+    switch_uid_gid();
     /* open random device */
     init_random();
     /* init signal handlers */
diff -Nuar tpm_emulator-0.5.orig/tpmd/tpm_emulator_config.h tpm_emulator-0.5/tpmd/tpm_emulator_config.h
--- tpm_emulator-0.5.orig/tpmd/tpm_emulator_config.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpmd/tpm_emulator_config.h	2007-11-09 14:51:39.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_emulator_config.h 163 2006-12-04 10:25:52Z mast $
+ * $Id: tpm_emulator_config.h 201 2007-11-09 12:51:39Z mast $
  */
 
 #ifndef _TPM_EMULATOR_CONFIG_H_
diff -Nuar tpm_emulator-0.5.orig/tpmd_dev/Makefile tpm_emulator-0.5/tpmd_dev/Makefile
--- tpm_emulator-0.5.orig/tpmd_dev/Makefile	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpmd_dev/Makefile	2007-11-22 11:18:32.000000000 +0200
@@ -1,7 +1,7 @@
 # Software-Based Trusted Platform Module (TPM) Emulator for Linux
 # Copyright (C) 2006 Mario Strasser <mast@gmx.net>
 #
-# $Id: Makefile 158 2006-12-03 10:44:02Z mast $
+# $Id: Makefile 204 2007-11-22 09:18:32Z mast $
 
 # kernel settings
 KERNEL_RELEASE := $(shell uname -r)
@@ -21,12 +21,18 @@
 
 clean:
 	@$(MAKE) -C $(KERNEL_BUILD) M=$(CURDIR) clean
-	rm -f Modules.symvers
+	rm -f Modules.symvers tpmd_dev.rules
 
-install:
-	@$(MAKE) -C $(KERNEL_BUILD) M=$(CURDIR) modules_install
-	test -c /dev/tpm || mknod /dev/tpm c 10 224
-	depmod -a
+TPMD_USER  ?= tss
+TPMD_GROUP ?= tss
+INSTALL ?= install
+
+tpmd_dev.rules: tpmd_dev.rules.in
+	sed -e "s/\$$TPMD_GROUP/$(TPMD_GROUP)/g" tpmd_dev.rules.in > tpmd_dev.rules
+
+install: tpmd_dev.rules
+	@$(MAKE) -C $(KERNEL_BUILD) M=$(CURDIR) INSTALL_MOD_PATH=$(DESTDIR) modules_install
+	$(INSTALL) -m 644 tpmd_dev.rules $(DESTDIR)/etc/udev/rules.d/80-tpmd_dev.rules
 
 .PHONY: all clean install
 
diff -Nuar tpm_emulator-0.5.orig/tpmd_dev/tpmd_dev.c tpm_emulator-0.5/tpmd_dev/tpmd_dev.c
--- tpm_emulator-0.5.orig/tpmd_dev/tpmd_dev.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpmd_dev/tpmd_dev.c	2007-08-02 13:06:26.000000000 +0300
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
  * GNU General Public License for more details.
  *
- * $Id: tpmd_dev.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpmd_dev.c 184 2007-08-02 10:06:26Z mast $
  */
 
 #include <linux/module.h>
@@ -26,7 +26,7 @@
 
 #define TPM_DEVICE_MINOR  224
 #define TPM_DEVICE_NAME   "tpm"
-#define TPM_MODULE_NAME   "tpm_dev"
+#define TPM_MODULE_NAME   "tpmd_dev"
 
 #define TPM_RESPONSE_SIZE 4096
 #define TPM_STATE_IS_OPEN 0
@@ -50,7 +50,7 @@
 MODULE_SUPPORTED_DEVICE(TPM_DEVICE_NAME);
 
 /* module parameters */
-char *tpmd_socket_name = "/var/tpm/tpmd_socket:0";
+char *tpmd_socket_name = "/var/run/tpm/tpmd_socket:0";
 module_param(tpmd_socket_name, charp, 0444);
 MODULE_PARM_DESC(tpmd_socket_name, " Sets the name of the TPM daemon socket.");
 
diff -Nuar tpm_emulator-0.5.orig/tpmd_dev/tpmd_dev.rules.in tpm_emulator-0.5/tpmd_dev/tpmd_dev.rules.in
--- tpm_emulator-0.5.orig/tpmd_dev/tpmd_dev.rules.in	1970-01-01 02:00:00.000000000 +0200
+++ tpm_emulator-0.5/tpmd_dev/tpmd_dev.rules.in	2007-09-08 12:42:43.000000000 +0300
@@ -0,0 +1 @@
+KERNEL=="tpm", NAME="%k", SYMLINK+="tpm0", GROUP="$TPMD_GROUP", MODE="0660"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/bn.c tpm_emulator-0.5/tpm_dev/crypto/bn.c
--- tpm_emulator-0.5.orig/tpm_dev/crypto/bn.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/bn.c	2006-11-15 19:07:36.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: bn.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: bn.c 152 2006-11-15 17:07:36Z mast $
  */
  
 #include "bn.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/bn.h tpm_emulator-0.5/tpm_dev/crypto/bn.h
--- tpm_emulator-0.5.orig/tpm_dev/crypto/bn.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/bn.h	2006-11-15 19:07:36.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: bn.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: bn.h 152 2006-11-15 17:07:36Z mast $
  */
  
 #ifndef _BN_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/hmac.c tpm_emulator-0.5/tpm_dev/crypto/hmac.c
--- tpm_emulator-0.5.orig/tpm_dev/crypto/hmac.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/hmac.c	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: hmac.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: hmac.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "hmac.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/hmac.h tpm_emulator-0.5/tpm_dev/crypto/hmac.h
--- tpm_emulator-0.5.orig/tpm_dev/crypto/hmac.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/hmac.h	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: hmac.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: hmac.h 139 2006-11-10 16:09:00Z mast $
  */
 
 #ifndef _HMAC_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/rc4.c tpm_emulator-0.5/tpm_dev/crypto/rc4.c
--- tpm_emulator-0.5.orig/tpm_dev/crypto/rc4.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/rc4.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rc4.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: rc4.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "rc4.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/rc4.h tpm_emulator-0.5/tpm_dev/crypto/rc4.h
--- tpm_emulator-0.5.orig/tpm_dev/crypto/rc4.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/rc4.h	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rc4.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: rc4.h 139 2006-11-10 16:09:00Z mast $
  */
  
 #ifndef _RC4_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/rsa.c tpm_emulator-0.5/tpm_dev/crypto/rsa.c
--- tpm_emulator-0.5.orig/tpm_dev/crypto/rsa.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/rsa.c	2006-11-17 09:16:25.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rsa.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: rsa.c 154 2006-11-17 07:16:25Z mast $
  */
 
 #include "rsa.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/rsa.h tpm_emulator-0.5/tpm_dev/crypto/rsa.h
--- tpm_emulator-0.5.orig/tpm_dev/crypto/rsa.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/rsa.h	2006-11-11 22:34:57.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: rsa.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: rsa.h 141 2006-11-11 20:34:57Z mast $
  */
 
 #ifndef _RSA_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/sha1.c tpm_emulator-0.5/tpm_dev/crypto/sha1.c
--- tpm_emulator-0.5.orig/tpm_dev/crypto/sha1.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/sha1.c	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: sha1.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: sha1.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "sha1.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/crypto/sha1.h tpm_emulator-0.5/tpm_dev/crypto/sha1.h
--- tpm_emulator-0.5.orig/tpm_dev/crypto/sha1.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/crypto/sha1.h	2006-11-10 18:09:00.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: sha1.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: sha1.h 139 2006-11-10 16:09:00Z mast $
  */
 
 #ifndef _SHA1_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/linux_module.c tpm_emulator-0.5/tpm_dev/linux_module.c
--- tpm_emulator-0.5.orig/tpm_dev/linux_module.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/linux_module.c	2007-08-01 16:10:41.000000000 +0300
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
  * GNU General Public License for more details.
  *
- * $Id: linux_module.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: linux_module.c 180 2007-08-01 13:10:41Z mast $
  */
 
 #include <linux/module.h>
@@ -32,7 +32,7 @@
 module_param(startup, charp, 0444);
 MODULE_PARM_DESC(startup, " Sets the startup mode of the TPM. "
   "Possible values are 'clear', 'save' (default) and 'deactivated.");
-char *storage_file = "/var/tpm/tpm_emulator-1.2."
+char *storage_file = "/var/lib/tpm/tpm_emulator-1.2."
   TPM_STR(VERSION_MAJOR) "." TPM_STR(VERSION_MINOR);
 module_param(storage_file, charp, 0644);
 MODULE_PARM_DESC(storage_file, " Sets the persistent-data storage file of the TPM.");
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/Makefile tpm_emulator-0.5/tpm_dev/Makefile
--- tpm_emulator-0.5.orig/tpm_dev/Makefile	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/Makefile	2007-08-01 16:10:41.000000000 +0300
@@ -1,7 +1,7 @@
 # Software-Based Trusted Platform Module (TPM) Emulator for Linux
 # Copyright (C) 2004 Mario Strasser <mast@gmx.net>
 #
-# $Id: Makefile 158 2006-12-03 10:44:02Z mast $
+# $Id: Makefile 180 2007-08-01 13:10:41Z mast $
 
 # kernel settings
 KERNEL_RELEASE := $(shell uname -r)
@@ -39,7 +39,7 @@
 
 install:
 	@$(MAKE) -C $(KERNEL_BUILD) M=$(CURDIR) modules_install
-	test -d /var/tpm || mkdir /var/tpm
+	test -d /var/lib/tpm || mkdir /var/lib/tpm
 	test -c /dev/tpm || mknod /dev/tpm c 10 224
 	depmod -a
 
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_audit.c tpm_emulator-0.5/tpm_dev/tpm/tpm_audit.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_audit.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_audit.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_audit.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_audit.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_authorization.c tpm_emulator-0.5/tpm_dev/tpm/tpm_authorization.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_authorization.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_authorization.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_authorization.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_authorization.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_capability.c tpm_emulator-0.5/tpm_dev/tpm/tpm_capability.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_capability.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_capability.c	2007-07-28 15:15:32.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_capability.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_capability.c 177 2007-07-28 12:15:32Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -148,12 +148,12 @@
       /* TODO: TPM_CAP_PROP_DELEGATE_ROW */
       return TPM_FAIL;
 
-    case TPM_CAP_PROP_DAA_MAX:
-      debug("[TPM_CAP_PROP_DAA_MAX]");
+    case TPM_CAP_PROP_MAX_DAASESS:
+      debug("[TPM_CAP_PROP_MAX_DAASESS]");
       return return_UINT32(respSize, resp, TPM_MAX_SESSIONS_DAA);
 
-    case TPM_CAP_PROP_SESSION_DAA:
-      debug("[TPM_CAP_PROP_SESSION_DAA]");
+    case TPM_CAP_PROP_DAASESS:
+      debug("[TPM_CAP_PROP_DAASESS]");
       for (i = 0, j = TPM_MAX_SESSIONS_DAA; i < TPM_MAX_SESSIONS_DAA; i++)
         if (tpmData.stany.data.sessionsDAA[i].type != TPM_ST_INVALID) j--;
       return return_UINT32(respSize, resp, j);
@@ -581,8 +581,8 @@
   
   version.tag = TPM_TAG_CAP_VERSION_INFO;
   version.version = tpmData.permanent.data.version;
-  version.specLevel = 2;
-  version.errataRev = 94;
+  version.specLevel = 0x0002; /* see [TPM_Part2], Section 21.6 */
+  version.errataRev = 0x01;   /* 0x01 = rev 94, 0x02 = rev 103 */
   len = 4, ptr = version.tpmVendorID;
   if (tpm_marshal_UINT32(&ptr, &len, TPM_MANUFACTURER))
     return TPM_FAIL;
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_cmd_handler.c tpm_emulator-0.5/tpm_dev/tpm/tpm_cmd_handler.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_cmd_handler.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_cmd_handler.c	2006-11-14 15:34:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_cmd_handler.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_cmd_handler.c 150 2006-11-14 13:34:56Z mast $
  */
 
 #include "tpm_marshalling.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_commands.h tpm_emulator-0.5/tpm_dev/tpm/tpm_commands.h
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_commands.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_commands.h	2007-07-27 16:57:38.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_commands.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_commands.h 176 2007-07-27 13:57:38Z hstamer $
  */
 
 #ifndef _TPM_COMMANDS_H_
@@ -2569,13 +2569,13 @@
  * TPM_ChangeAuthAsymStart - starts the ChangeAuth process
  * @idHandle: [in] Handle of a loaded identity ID key 
  * @antiReplay: [in] The nonce to be inserted into the certifyInfo structure 
- * @inTempKey: [in] All parameters of the ephemeral key
+ * @inTempKey: [in] Structure containing all parameters of the ephemeral key
  * @auth1: [in, out] Authorization protocol parameters
  * @certifyInfo: [out] The certifyInfo structure that is to be signed
  * @sigSize: [out] The used size of the output area for the signature 
  * @sig: [out] The signature of the certifyInfo parameter
- * @ephHandle: [out] Handle to be used by ChangeAuthAsymFinish 
- * @outTempKey: [out] All parameters and public part of the ephemeral key
+ * @ephHandle: [out] Handle to be used by ChangeAuthAsymFinish for ephemeral key
+ * @outTempKey: [out] Structure containing all parameters and public part of ephemeral key
  * Returns: TPM_SUCCESS on success, a TPM error code otherwise.
  * 
  * Description: ([TPM_Part3], Section 28.4.1)
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_context.c tpm_emulator-0.5/tpm_dev/tpm/tpm_context.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_context.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_context.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_context.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_context.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_counter.c tpm_emulator-0.5/tpm_dev/tpm/tpm_counter.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_counter.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_counter.c	2006-01-23 01:11:23.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_counter.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_counter.c 88 2006-01-22 23:11:23Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_credentials.c tpm_emulator-0.5/tpm_dev/tpm/tpm_credentials.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_credentials.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_credentials.c	2007-08-02 10:20:16.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_credentials.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_credentials.c 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -119,8 +119,8 @@
   }
   memcpy(outputEKreset, &tpmData.permanent.data.ekReset, sizeof(TPM_NONCE));
   /* Create TPM_PERMANENT_DATA->TPM_DAA_TPM_SEED from the TPM RNG */
-  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.digest, 
-    sizeof(tpmData.permanent.data.tpmDAASeed.digest));
+  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.nonce, 
+    sizeof(tpmData.permanent.data.tpmDAASeed.nonce));
   return TPM_SUCCESS;
 }
 
@@ -135,8 +135,8 @@
   tpm_rsa_release_private_key(&tpmData.permanent.data.endorsementKey);
   tpmData.permanent.data.endorsementKey.size = 0;
   /* Invalidate TPM_PERMANENT_DATA->tpmDAASeed */
-  memset(tpmData.permanent.data.tpmDAASeed.digest, 0, 
-    sizeof(tpmData.permanent.data.tpmDAASeed.digest));
+  memset(tpmData.permanent.data.tpmDAASeed.nonce, 0, 
+    sizeof(tpmData.permanent.data.tpmDAASeed.nonce));
   return TPM_SUCCESS;
 }
 
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_crypto.c tpm_emulator-0.5/tpm_dev/tpm/tpm_crypto.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_crypto.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_crypto.c	2007-08-02 10:20:16.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_crypto.c 165 2006-12-15 11:58:48Z mast $
+ * $Id: tpm_crypto.c 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -228,14 +228,14 @@
       certifyInfo->migrationAuthoritySize = 0;
       memcpy(&certifyInfo->PCRInfo, &key->pcrInfo, sizeof(TPM_PCR_INFO));
       memset(&certifyInfo->PCRInfo.digestAtCreation, 0, sizeof(TPM_DIGEST));
-      certifyInfo->PCRInfoSize = sizeof(certifyInfo->PCRInfo);
+      certifyInfo->PCRInfoSize = sizeof(TPM_PCR_INFO);
     /* ... otherwise use a TPM_CERTIFY_INFO2 structure */
     } else {
       certifyInfo->tag = TPM_TAG_CERTIFY_INFO2;
       certifyInfo->fill = 0x0000;
       certifyInfo->migrationAuthoritySize = 0;
       memcpy(&certifyInfo->PCRInfo, &key->pcrInfo, sizeof(TPM_PCR_INFO));
-      certifyInfo->PCRInfoSize = sizeof(certifyInfo->PCRInfo);
+      certifyInfo->PCRInfoSize = sizeof(TPM_PCR_INFO);
     } 
   } else {
     /* setup TPM_CERTIFY_INFO structure */
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_daa.c tpm_emulator-0.5/tpm_dev/tpm/tpm_daa.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_daa.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_daa.c	2007-08-02 10:20:16.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_daa.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_daa.c 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -1117,14 +1117,14 @@
       }
       /* Obtain random data from the RNG and store it as 
        * DAA_session->DAA_contextSeed */
-      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       /* Obtain DAA_SIZE_r0 bits from MGF1("r0", 
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r0, 1, scratch);
@@ -1193,8 +1193,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r1, 1, scratch);
@@ -1269,8 +1269,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r2, 1, scratch);
@@ -1345,8 +1345,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r3", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r3);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r3, 1, scratch);
@@ -1566,8 +1566,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -1575,8 +1575,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -1704,8 +1704,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -1786,8 +1786,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -1867,8 +1867,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -1930,8 +1930,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -1993,8 +1993,8 @@
        * DAA_session->DAA_contextSeed), and label them r3 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r3", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r3);
       tpm_bn_init(r3);
       tpm_bn_import(r3, DAA_SIZE_r3, 1, scratch);
@@ -2510,8 +2510,8 @@
       tpm_daa_update_digestContext_sign(session, &sha1);
       /* Obtain random data from the RNG and store it as 
        * DAA_session->DAA_contextSeed */
-      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      tpm_get_random_bytes(session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       /* Set outputData = NULL */
       *outputSize = 0, *outputData = NULL;
       /* Set DAA_session->DAA_stage = 2 */
@@ -2563,8 +2563,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r0, 1, scratch);
@@ -2632,8 +2632,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r1, 1, scratch);
@@ -2707,8 +2707,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r2, 1, scratch);
@@ -2782,8 +2782,8 @@
        * DAA_session->DAA_contextSeed), and label them Y */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r4", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r4);
       tpm_bn_init(Y);
       tpm_bn_import(Y, DAA_SIZE_r4, 1, scratch);
@@ -3000,8 +3000,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -3009,8 +3009,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -3227,8 +3227,8 @@
        * DAA_session->DAA_contextSeed), and label them r0 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r0", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r0);
       tpm_bn_init(r0);
       tpm_bn_import(r0, DAA_SIZE_r0, 1, scratch);
@@ -3308,8 +3308,8 @@
        * DAA_session->DAA_contextSeed), and label them r1 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r1", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r1);
       tpm_bn_init(r1);
       tpm_bn_import(r1, DAA_SIZE_r1, 1, scratch);
@@ -3434,8 +3434,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -3542,8 +3542,8 @@
        * DAA_session->DAA_contextSeed), and label them r2 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r2", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r2);
       tpm_bn_init(r2);
       tpm_bn_import(r2, DAA_SIZE_r2, 1, scratch);
@@ -3642,8 +3642,8 @@
        * DAA_session->DAA_contextSeed), and label them r4 */
       memset(scratch, 0, sizeof(scratch));
       memcpy(mgf1_seed, "r4", 2);
-      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.digest, 
-        sizeof(TPM_DIGEST));
+      memcpy(mgf1_seed + 2, session->DAA_session.DAA_contextSeed.nonce, 
+        sizeof(TPM_NONCE));
       tpm_rsa_mask_generation(mgf1_seed, sizeof(mgf1_seed), scratch, DAA_SIZE_r4);
       tpm_bn_init(r4);
       tpm_bn_import(r4, DAA_SIZE_r4, 1, scratch);
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_data.c tpm_emulator-0.5/tpm_dev/tpm/tpm_data.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_data.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_data.c	2007-08-02 11:35:47.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_data.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_data.c 183 2007-08-02 08:35:47Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -33,10 +33,8 @@
 {
   unsigned int i;
   tpmData.permanent.data.pcrAttrib[pcr].pcrReset = reset;
-  for (i = 0; i < TPM_NUM_LOCALITY; i++) {
-    tpmData.permanent.data.pcrAttrib[pcr].pcrResetLocal[i] = (rl & (1 << i));
-    tpmData.permanent.data.pcrAttrib[pcr].pcrExtendLocal[i] = (el & (1 << i));
-  }
+  tpmData.permanent.data.pcrAttrib[pcr].pcrResetLocal = rl;
+  tpmData.permanent.data.pcrAttrib[pcr].pcrExtendLocal = el;
 }
 
 void tpm_init_data(void)
@@ -128,13 +126,13 @@
 #endif
 #ifdef TPM_GENERATE_SEED_DAA
   /* generate the DAA seed (cf. [TPM_Part2], v1.2 rev 94, Section 7.4) */
-  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.digest, 
-    sizeof(tpmData.permanent.data.tpmDAASeed.digest));
+  tpm_get_random_bytes(tpmData.permanent.data.tpmDAASeed.nonce, 
+    sizeof(tpmData.permanent.data.tpmDAASeed.nonce));
 #else
   /* setup DAA seed */
-  memcpy(tpmData.permanent.data.tpmDAASeed.digest, 
+  memcpy(tpmData.permanent.data.tpmDAASeed.nonce, 
     "\x77\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
-    "\x00\x00\x00\x77", 20);
+    "\x00\x00\x00\x77", sizeof(TPM_NONCE));
 #endif
 
   memcpy(tpmData.permanent.data.ekReset.nonce, "\xde\xad\xbe\xef", 4);
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_data.h tpm_emulator-0.5/tpm_dev/tpm/tpm_data.h
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_data.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_data.h	2004-11-03 19:22:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_data.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_data.h 1 2004-11-03 17:22:56Z mast $
  */
 
 #ifndef _TPM_DATA_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_delegation.c tpm_emulator-0.5/tpm_dev/tpm/tpm_delegation.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_delegation.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_delegation.c	2004-11-03 19:22:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_delegation.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_delegation.c 1 2004-11-03 17:22:56Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_deprecated.c tpm_emulator-0.5/tpm_dev/tpm/tpm_deprecated.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_deprecated.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_deprecated.c	2007-09-05 22:32:16.000000000 +0300
@@ -1,6 +1,7 @@
 /* Software-Based Trusted Platform Module (TPM) Emulator for Linux
  * Copyright (C) 2004 Mario Strasser <mast@gmx.net>,
- *                    Swiss Federal Institute of Technology (ETH) Zurich
+ *                    Swiss Federal Institute of Technology (ETH) Zurich,
+ *               2007 Heiko Stamer <stamer@gaos.org>
  *
  * This module is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published
@@ -12,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_deprecated.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_deprecated.c 195 2007-09-05 19:32:16Z hstamer $
  */
 
 #include "tpm_emulator.h"
@@ -20,6 +21,8 @@
 #include "tpm_data.h"
 #include "tpm_handles.h"
 #include "tpm_marshalling.h"
+#include "crypto/rsa.h"
+#include "crypto/sha1.h"
 
 #define SAVE_KEY_CONTEXT_LABEL  ((uint8_t*)"SaveKeyContext..")
 #define SAVE_AUTH_CONTEXT_LABEL ((uint8_t*)"SaveAuthContext.")
@@ -129,6 +132,8 @@
   return TPM_SUCCESS;
 }
 
+extern int tpm_compute_key_digest(TPM_KEY *key, TPM_DIGEST *digest);
+
 TPM_RESULT TPM_ChangeAuthAsymStart(  
   TPM_KEY_HANDLE idHandle,
   TPM_NONCE *antiReplay,
@@ -141,9 +146,89 @@
   TPM_KEY *outTempKey 
 )
 {
+  TPM_RESULT res;
+  TPM_KEY_DATA *idKey;
+  tpm_rsa_private_key_t rsa;
+  UINT32 key_length;
+  TPM_STORE_ASYMKEY store;
+  
   info("TPM_ChangeAuthAsymStart() not implemented yet");
   /* TODO: implement TPM_ChangeAuthAsymStart() */
   return TPM_FAIL;
+  
+  /* 1. The TPM SHALL verify the AuthData to use the TPM identity key held in
+        idHandle. The TPM MUST verify that the key is a TPM identity key. */
+    /* get identity key */
+    idKey = tpm_get_key(idHandle);
+    if (idKey == NULL) return TPM_INVALID_KEYHANDLE;
+    /* verify authorization */
+    res = tpm_verify_auth(auth1, idKey->usageAuth, idHandle);
+    if (res != TPM_SUCCESS) return res;
+    /* verify key parameters */
+    if (idKey->keyUsage != TPM_KEY_IDENTITY) return TPM_INVALID_KEYUSAGE;
+  /* 2. The TPM SHALL validate the algorithm parameters for the key to create
+        from the tempKey parameter. */
+  /* 3. Recommended key type is RSA */
+  /* 4. Minimum RSA key size MUST is 512 bits, recommended RSA key size 
+        is 1024 */
+  /* 5. For other key types the minimum key size strength MUST be
+        comparable to RSA 512 */
+  /* 6. If the TPM is not designed to create a key of the requested type,
+        return the error code TPM_BAD_KEY_PROPERTY */
+  if (inTempKey->algorithmID != TPM_ALG_RSA
+      || inTempKey->parmSize == 0
+      || inTempKey->parms.rsa.keyLength < 512
+      || inTempKey->parms.rsa.numPrimes != 2
+      || inTempKey->parms.rsa.exponentSize != 0)
+    return TPM_BAD_KEY_PROPERTY;
+  /* 7. The TPM SHALL create a new key (k1) in accordance with the
+        algorithm parameter.
+        The newly created key is pointed to by ephHandle. */
+    /* generate key */
+    key_length = inTempKey->parms.rsa.keyLength;
+    if (tpm_rsa_generate_key(&rsa, key_length)) {
+      debug("TPM_ChangeAuthAsymStart(): tpm_rsa_generate_key() failed.");
+      return TPM_FAIL;
+    }
+   
+
+//TODO
+
+  /* 8. The TPM SHALL fill in all fields in tempKey using k1 for the
+        information. The TPM_KEY->encSize MUST be 0. */
+
+//TODO
+
+    /* compute the digest of the wrapped key (without encData) */
+    if (tpm_compute_key_digest(outTempKey, &store.pubDataDigest)) {
+      debug("TPM_ChangeAuthAsymStart(): tpm_compute_key_digest() failed.");
+      return TPM_FAIL;
+    }
+  /* 9. The TPM SHALL fill in certifyInfo using k1 for the information.
+        The certifyInfo->data field is supplied by the antiReplay. */
+    /* "Version" field is set according to the deprecated TPM_VERSION
+       structure from the old v1.1 specification. */
+    memcpy(&certifyInfo->tag, &tpmData.permanent.data.version, 2);
+    memcpy(&certifyInfo->fill, &tpmData.permanent.data.version + 2, 1);
+    memcpy(&certifyInfo->payloadType, &tpmData.permanent.data.version + 3, 1);
+    /* Other fields are filled according to Section 27.4.1 [TPM, Part 3]. */
+    certifyInfo->keyUsage = TPM_KEY_AUTHCHANGE;
+    certifyInfo->keyFlags = TPM_KEY_FLAG_VOLATILE;
+    certifyInfo->authDataUsage = TPM_AUTH_NEVER;
+    memcpy(&certifyInfo->algorithmParms, inTempKey,
+      sizeof_TPM_KEY_PARMS((*inTempKey)));
+    memcpy(&certifyInfo->pubkeyDigest, &store.pubDataDigest, sizeof(TPM_DIGEST));
+    memcpy(&certifyInfo->data, antiReplay, sizeof(TPM_NONCE));
+    certifyInfo->parentPCRStatus = FALSE;
+    certifyInfo->PCRInfoSize = 0;
+  
+  /* 10. The TPM then signs the certifyInfo parameter using the key
+         pointed to by idHandle. The resulting signed blob is returned
+         in sig parameter. */
+
+//TODO
+
+  return TPM_SUCCESS;
 }
 
 TPM_RESULT TPM_ChangeAuthAsymFinish(  
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_emulator.h tpm_emulator-0.5/tpm_dev/tpm/tpm_emulator.h
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_emulator.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_emulator.h	2006-11-11 23:10:20.000000000 +0200
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_emulator.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_emulator.h 142 2006-11-11 21:10:20Z mast $
  */
 
 #ifndef _TPM_EMULATOR_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_error.c tpm_emulator-0.5/tpm_dev/tpm/tpm_error.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_error.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_error.c	2006-08-06 10:08:13.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_error.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_error.c 122 2006-08-06 07:08:13Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_eviction.c tpm_emulator-0.5/tpm_dev/tpm/tpm_eviction.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_eviction.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_eviction.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_eviction.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_eviction.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_handles.c tpm_emulator-0.5/tpm_dev/tpm/tpm_handles.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_handles.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_handles.c	2006-05-14 00:29:54.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_handles.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_handles.c 101 2006-05-13 21:29:54Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_handles.h tpm_emulator-0.5/tpm_dev/tpm/tpm_handles.h
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_handles.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_handles.h	2006-05-05 00:52:05.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_handles.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_handles.h 97 2006-05-04 21:52:05Z hstamer $
  */
 
 #ifndef _TPM_HANDLES_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_identity.c tpm_emulator-0.5/tpm_dev/tpm/tpm_identity.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_identity.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_identity.c	2006-11-10 18:09:00.000000000 +0200
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_identity.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_identity.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_integrity.c tpm_emulator-0.5/tpm_dev/tpm/tpm_integrity.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_integrity.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_integrity.c	2007-08-08 15:09:30.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_integrity.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_integrity.c 188 2007-08-08 12:09:30Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -43,7 +43,7 @@
 
   info("TPM_Extend()");
   if (pcrNum >= TPM_NUM_PCR) return TPM_BADINDEX;
-  if (!PCR_ATTRIB[pcrNum].pcrExtendLocal[LOCALITY]) return TPM_BAD_LOCALITY;
+  if (!(PCR_ATTRIB[pcrNum].pcrExtendLocal & (1 << LOCALITY))) return TPM_BAD_LOCALITY;
   /* compute new PCR value as SHA-1(old PCR value || inDigest) */
   tpm_sha1_init(&ctx);
   tpm_sha1_update(&ctx, PCR_VALUE[pcrNum].digest, sizeof(PCR_VALUE[pcrNum].digest));
@@ -119,14 +119,14 @@
     /* is PCR number i selected ? */
     if (pcrSelection->pcrSelect[i >> 3] & (1 << (i & 7))) {
       if (!PCR_ATTRIB[i].pcrReset) return TPM_NOTRESETABLE;
-      if (!PCR_ATTRIB[i].pcrResetLocal[LOCALITY]) return TPM_NOTLOCAL;
+      if (!(PCR_ATTRIB[i].pcrResetLocal & (1 << LOCALITY))) return TPM_NOTLOCAL;
     }
   }
   /* ... then we reset all registers at once */
   for (i = 0; i < pcrSelection->sizeOfSelect * 8; i++) {
     /* is PCR number i selected ? */
     if (pcrSelection->pcrSelect[i >> 3] & (1 << (i & 7))) {
-      memset(PCR_VALUE[i].digest, 0, sizeof(*PCR_VALUE[i].digest));
+      memset(PCR_VALUE[i].digest, 0, sizeof(PCR_VALUE[i].digest));
     }
   }
   return TPM_SUCCESS;
@@ -234,37 +234,45 @@
     res = tpm_verify_auth(auth1, key->usageAuth, keyHandle);
     if (res != TPM_SUCCESS) return res;
   }
-  /* 2. The keyHandle->sigScheme MUST use SHA-1,
-   *    return TPM_INAPPROPRIATE_SIG if it does not */
-  if (key->sigScheme != TPM_SS_RSASSAPKCS1v15_SHA1)
+  /* 2. Validate that keyHandle->sigScheme is TPM_SS_RSASSAPKCS1v15_SHA1 or
+        TPM_SS_RSASSAPKCS1v15_INFO, if not return TPM_INAPPROPRIATE_SIG. */
+  if ((key->sigScheme != TPM_SS_RSASSAPKCS1v15_SHA1) && 
+       (key->sigScheme != TPM_SS_RSASSAPKCS1v15_INFO))
     return TPM_INAPPROPRIATE_SIG;
 
 /* WATCH: ??? specification error, missing check for key usage ???
-   A security issue seems to be the (mis)usage of the EK for signing. */
-/*
-  if (key->keyUsage != TPM_KEY_SIGNING && key->keyUsage != TPM_KEY_LEGACY
-      && key->keyUsage != TPM_KEY_IDENTITY)
-    return TPM_INVALID_KEYUSAGE;
-*/
+   A security issue seems to be the (mis)usage of the EK for signing.
+   WATCH: !!! This error has been corrected recently in v1.2 rev 103 !!! */
 
-  /* 3. Validate targetPCR is a valid TPM_PCR_SELECTION structure,
+  /* 3. Validate that keyHandle->keyUsage is TPM_KEY_SIGNING, TPM_KEY_IDENTITY,
+        or TPM_KEY_LEGACY, if not return TPM_INVALID_KEYUSAGE */
+  if ((key->keyUsage != TPM_KEY_SIGNING) && (key->keyUsage != TPM_KEY_LEGACY)
+      && (key->keyUsage != TPM_KEY_IDENTITY))
+    return TPM_INVALID_KEYUSAGE;
+  /* 4. Validate targetPCR is a valid TPM_PCR_SELECTION structure,
    *    on errors return TPM_INVALID_PCR_INFO */
   if (targetPCR->sizeOfSelect > sizeof(targetPCR->pcrSelect))
     return TPM_INVALID_PCR_INFO;
-  /* 4. Create H1 a SHA-1 hash of a TPM_PCR_COMPOSITE using the
+  /* 5. Create H1 a SHA-1 hash of a TPM_PCR_COMPOSITE using the
    *    TPM_STCLEAR_DATA->PCR[] indicated by targetPCR->pcrSelect */
   res = tpm_compute_pcr_digest(targetPCR, &H1, NULL);
   if (res != TPM_SUCCESS) return res;
-  /* 5. Create S1 a TPM_PCR_INFO_SHORT */
-  pcrData->pcrSelection.sizeOfSelect = targetPCR->sizeOfSelect;
-  memcpy(pcrData->pcrSelection.pcrSelect, targetPCR->pcrSelect, targetPCR->sizeOfSelect);
-  pcrData->localityAtRelease = tpmData.stany.flags.localityModifier;
-  memcpy(&pcrData->digestAtRelease, &H1, sizeof(TPM_COMPOSITE_HASH));
-  /* 6. Create Q1 a TPM_QUOTE_INFO2 structure */
+  /* 6. Create S1 a TPM_PCR_INFO_SHORT */
+    /* a. Set S1->pcrSelection to targetPCR */
+    pcrData->pcrSelection.sizeOfSelect = targetPCR->sizeOfSelect;
+    memcpy(pcrData->pcrSelection.pcrSelect, targetPCR->pcrSelect, targetPCR->sizeOfSelect);
+    /* b. Set S1->localityAtRelease to TPM_STANY_DATA -> localityModifier */
+    pcrData->localityAtRelease = tpmData.stany.flags.localityModifier;
+    /* c. Set S1->digestAtRelease to H1 */
+    memcpy(&pcrData->digestAtRelease, &H1, sizeof(TPM_COMPOSITE_HASH));
+  /* 7. Create Q1 a TPM_QUOTE_INFO2 structure */
   Q1.tag = TPM_TAG_QUOTE_INFO2;
-  memcpy(Q1.fixed, "QUT2", 4);
-  memcpy(&Q1.infoShort, pcrData, sizeof_TPM_PCR_INFO_SHORT((*pcrData)));
-  memcpy(&Q1.externalData, externalData, sizeof(TPM_NONCE));
+    /* a. Set Q1->fixed to "QUT2" */
+    memcpy(Q1.fixed, "QUT2", 4);
+    /* b. Set Q1->infoShort to S1 */
+    memcpy(&Q1.infoShort, pcrData, sizeof_TPM_PCR_INFO_SHORT((*pcrData)));
+    /* c. Set Q1->externalData to externalData */
+    memcpy(&Q1.externalData, externalData, sizeof(TPM_NONCE));
   size = len = sizeof_TPM_QUOTE_INFO2(Q1);
   buf = ptr = tpm_malloc(size);
   if (buf == NULL) return TPM_NOSPACE;
@@ -273,7 +281,7 @@
     tpm_free(buf);
     return TPM_FAIL;
   }
-  /* 7. If addVersion is TRUE */
+  /* 8. If addVersion is TRUE */
   if (addVersion == TRUE) {
     /* a. Concatenate to Q1 a TPM_CAP_VERSION_INFO structure */
     res = cap_version_val(&respSize, &resp);
@@ -292,11 +300,12 @@
         return TPM_FAIL;
     }
     *versionInfoSize = respSize;
-   } else { /* 8. Else */
-    /* a. Set versionInfoSize to 0 and return no bytes in versionInfo */
+   } else { /* 9. Else */
+    /* a. Set versionInfoSize to 0 */
     *versionInfoSize = 0;
+    /* b. Return no bytes in versionInfo */
   }
-  /* 9. Sign a SHA-1 hash of Q1 using keyHandle as the signature key */
+  /* 10. Sign a SHA-1 hash of Q1 using keyHandle as the signature key */
   tpm_sha1_init(&ctx);
   tpm_sha1_update(&ctx, buf, size);
   tpm_free(buf);
@@ -315,6 +324,6 @@
       return TPM_FAIL;
   }
   
-  /* 10. Return the signature in sig */
+  /* 11. Return the signature in sig */
   return TPM_SUCCESS;
 }
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_maintenance.c tpm_emulator-0.5/tpm_dev/tpm/tpm_maintenance.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_maintenance.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_maintenance.c	2004-11-03 19:22:56.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_maintenance.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_maintenance.c 1 2004-11-03 17:22:56Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_management.c tpm_emulator-0.5/tpm_dev/tpm/tpm_management.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_management.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_management.c	2006-05-10 01:58:41.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_management.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_management.c 100 2006-05-09 22:58:41Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_marshalling.c tpm_emulator-0.5/tpm_dev/tpm/tpm_marshalling.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_marshalling.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_marshalling.c	2007-08-02 11:35:47.000000000 +0300
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_marshalling.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_marshalling.c 183 2007-08-02 08:35:47Z mast $
  */
 
 #include "tpm_marshalling.h"
@@ -271,16 +271,16 @@
 int tpm_marshal_TPM_PCR_ATTRIBUTES(BYTE **ptr, UINT32 *length, TPM_PCR_ATTRIBUTES *v)
 {
   if (tpm_marshal_BOOL(ptr, length, v->pcrReset)
-      || tpm_marshal_BOOL_ARRAY(ptr, length, v->pcrResetLocal, TPM_NUM_LOCALITY)
-      || tpm_marshal_BOOL_ARRAY(ptr, length, v->pcrExtendLocal, TPM_NUM_LOCALITY)) return -1;
+      || tpm_marshal_TPM_LOCALITY_SELECTION(ptr, length, v->pcrResetLocal)
+      || tpm_marshal_TPM_LOCALITY_SELECTION(ptr, length, v->pcrExtendLocal)) return -1;
   return 0;
 }
 
 int tpm_unmarshal_TPM_PCR_ATTRIBUTES(BYTE **ptr, UINT32 *length, TPM_PCR_ATTRIBUTES *v)
 {
   if (tpm_unmarshal_BOOL(ptr, length, &v->pcrReset)
-      || tpm_unmarshal_BOOL_ARRAY(ptr, length, v->pcrResetLocal, TPM_NUM_LOCALITY)
-      || tpm_unmarshal_BOOL_ARRAY(ptr, length, v->pcrExtendLocal, TPM_NUM_LOCALITY)) return -1;
+      || tpm_unmarshal_TPM_LOCALITY_SELECTION(ptr, length, &v->pcrResetLocal)
+      || tpm_unmarshal_TPM_LOCALITY_SELECTION(ptr, length, &v->pcrExtendLocal)) return -1;
   return 0;
 }
 
@@ -857,7 +857,7 @@
   if (tpm_marshal_TPM_STRUCTURE_TAG(ptr, length, v->tag)
       || tpm_marshal_TPM_DIGEST(ptr, length, &v->DAA_digestContext)
       || tpm_marshal_TPM_DIGEST(ptr, length, &v->DAA_digest)
-      || tpm_marshal_TPM_DIGEST(ptr, length, &v->DAA_contextSeed)
+      || tpm_marshal_TPM_NONCE(ptr, length, &v->DAA_contextSeed)
       || tpm_marshal_BYTE_ARRAY(ptr, length, v->DAA_scratch, sizeof(v->DAA_scratch))
       || tpm_marshal_BYTE(ptr, length, v->DAA_stage))
         return -1;
@@ -869,7 +869,7 @@
   if (tpm_unmarshal_TPM_STRUCTURE_TAG(ptr, length, &v->tag)
       || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DAA_digestContext)
       || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DAA_digest)
-      || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DAA_contextSeed)
+      || tpm_unmarshal_TPM_NONCE(ptr, length, &v->DAA_contextSeed)
       || tpm_unmarshal_BYTE_ARRAY(ptr, length, v->DAA_scratch, sizeof(v->DAA_scratch))
       || tpm_unmarshal_BYTE(ptr, length, &v->DAA_stage))
         return -1;
@@ -1434,7 +1434,7 @@
       || tpm_marshal_TPM_DIGEST(ptr, length, &v->DIR)
       || tpm_marshal_BYTE_ARRAY(ptr, length, v->ordinalAuditStatus, sizeof(v->ordinalAuditStatus))
       || tpm_marshal_TPM_ACTUAL_COUNT(ptr, length, v->auditMonotonicCounter)
-      || tpm_marshal_TPM_DIGEST(ptr, length, &v->tpmDAASeed)) return -1;
+      || tpm_marshal_TPM_NONCE(ptr, length, &v->tpmDAASeed)) return -1;
   for (i = 0; i < TPM_MAX_COUNTERS; i++) {
     if (tpm_marshal_TPM_COUNTER_VALUE(ptr, length, &v->counters[i])
         || tpm_marshal_TPM_SECRET(ptr, length, &v->counters[i].usageAuth)
@@ -1469,7 +1469,7 @@
       || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->DIR)
       || tpm_unmarshal_BYTE_ARRAY(ptr, length, v->ordinalAuditStatus, sizeof(v->ordinalAuditStatus))
       || tpm_unmarshal_TPM_ACTUAL_COUNT(ptr, length, &v->auditMonotonicCounter)
-      || tpm_unmarshal_TPM_DIGEST(ptr, length, &v->tpmDAASeed)) return -1;
+      || tpm_unmarshal_TPM_NONCE(ptr, length, &v->tpmDAASeed)) return -1;
   for (i = 0; i < TPM_MAX_COUNTERS; i++) {
     if (tpm_unmarshal_TPM_COUNTER_VALUE(ptr, length, &v->counters[i])
         || tpm_unmarshal_TPM_SECRET(ptr, length, &v->counters[i].usageAuth)
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_marshalling.h tpm_emulator-0.5/tpm_dev/tpm/tpm_marshalling.h
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_marshalling.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_marshalling.h	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_marshalling.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_marshalling.h 139 2006-11-10 16:09:00Z mast $
  */
 
 #ifndef _MARSHALLING_H_
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_migration.c tpm_emulator-0.5/tpm_dev/tpm/tpm_migration.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_migration.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_migration.c	2006-05-10 01:58:41.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_migration.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_migration.c 100 2006-05-09 22:58:41Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_nv_storage.c tpm_emulator-0.5/tpm_dev/tpm/tpm_nv_storage.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_nv_storage.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_nv_storage.c	2006-01-09 23:41:31.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_nv_storage.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_nv_storage.c 79 2006-01-09 21:41:31Z hstamer $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_owner.c tpm_emulator-0.5/tpm_dev/tpm/tpm_owner.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_owner.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_owner.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_owner.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_owner.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_startup.c tpm_emulator-0.5/tpm_dev/tpm/tpm_startup.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_startup.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_startup.c	2007-08-08 15:09:30.000000000 +0300
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_startup.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_startup.c 188 2007-08-08 12:09:30Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -56,9 +56,9 @@
     /* reset PCR values */
     for (i = 0; i < TPM_NUM_PCR; i++) {
       if (tpmData.permanent.data.pcrAttrib[i].pcrReset)
-        SET_TO_ZERO(&tpmData.permanent.data.pcrValue[i].digest);
-      else
         SET_TO_0xFF(&tpmData.permanent.data.pcrValue[i].digest);
+      else
+        SET_TO_ZERO(&tpmData.permanent.data.pcrValue[i].digest);
     }
     /* reset STCLEAR_FLAGS */
     SET_TO_ZERO(&tpmData.stclear.flags);
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_storage.c tpm_emulator-0.5/tpm_dev/tpm/tpm_storage.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_storage.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_storage.c	2007-11-09 14:51:39.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_storage.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_storage.c 201 2007-11-09 12:51:39Z mast $
  */
 
 #include "tpm_emulator.h"
@@ -521,15 +521,13 @@
   parent = tpm_get_key(parentHandle);
   if (parent == NULL) return TPM_INVALID_KEYHANDLE;
   /* verify authorization */
-  if (parent->authDataUsage != TPM_AUTH_NEVER) {
-    if (auth1->authHandle != TPM_INVALID_HANDLE) {
-      debug("[ authDataUsage=%.2x ]", parent->authDataUsage);
-      res = tpm_verify_auth(auth1, parent->usageAuth, parentHandle);
-      if (res != TPM_SUCCESS) return res;
-    } else {
-      debug("TPM_LoadKey(): parent key requires authorization.");
-      return TPM_AUTHFAIL;
-    }
+  if (auth1->authHandle != TPM_INVALID_HANDLE) {
+    debug("[ authDataUsage=%.2x ]", parent->authDataUsage);
+    res = tpm_verify_auth(auth1, parent->usageAuth, parentHandle);
+    if (res != TPM_SUCCESS) return res;
+  } else if (parent->authDataUsage != TPM_AUTH_NEVER) {
+    debug("TPM_LoadKey(): parent key requires authorization.");
+    return TPM_AUTHFAIL;
   }
   if (parent->keyUsage != TPM_KEY_STORAGE) return TPM_INVALID_KEYUSAGE;
   /* verify key properties */
@@ -680,7 +678,7 @@
   TPM_STORED_DATA *sealedData
 )
 {
-  debug("TPM_Sealx() not implemented yet");
+  info("TPM_Sealx() not implemented yet");
   /* TODO: implement TPM_Sealx() */
   return TPM_FAIL;
 }
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_structures.h tpm_emulator-0.5/tpm_dev/tpm/tpm_structures.h
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_structures.h	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_structures.h	2007-08-02 10:20:16.000000000 +0300
@@ -1,7 +1,7 @@
 /* Software-Based Trusted Platform Module (TPM) Emulator for Linux
  * Copyright (C) 2004 Mario Strasser <mast@gmx.net>,
  *                    Swiss Federal Institute of Technology (ETH) Zurich
- *               2006 Heiko Stamer <stamer@gaos.org>
+ *               2006, 2007 Heiko Stamer <stamer@gaos.org>
  *
  * This module is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published
@@ -13,7 +13,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_structures.h 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_structures.h 182 2007-08-02 07:20:16Z hstamer $
  */
 
 #ifndef _TPM_STRUCTURES_H_
@@ -44,6 +44,7 @@
 typedef BYTE   TPM_AUTH_DATA_USAGE;
 typedef BYTE   TPM_PAYLOAD_TYPE;
 typedef BYTE   TPM_VERSION_BYTE; /* added since v1.2 rev 94 */
+typedef BYTE   TPM_DA_STATE; /* added since v1.2 rev 103 */
 typedef UINT16 TPM_TAG;
 typedef UINT16 TPM_PROTOCOL_ID;
 typedef UINT16 TPM_STARTUP_TYPE;
@@ -148,10 +149,11 @@
 #define TPM_ET_DEL_KEY_BLOB     0x09
 #define TPM_ET_COUNTER          0x0A
 #define TPM_ET_NV               0x0B
+#define TPM_ET_OPERATOR         0x0C /* added since v1.2 rev 103 */
 #define TPM_ET_RESERVED_HANDLE  0x40
 /* MSB Values */
 #define TPM_ET_XOR              0x00
-#define TPM_ET_AES128           0x06
+#define TPM_ET_AES128_CTR       0x06 /* changed since v1.2 rev 103 */
 
 /*
  * Reserved Key Handles ([TPM_Part2], Section 4.4.1)
@@ -180,6 +182,7 @@
  * the affect that TPM_Startup has on the values.
  */
 /* 31-8 reserved and must be 0 */
+#define TPM_STARTUP_RT_DAA_TPM_ST_STATE        (1 << 8) /* added since v1.2 rev 103 */
 #define TPM_STARTUP_AUDIT_DIGEST_IGNORE        (1 << 7)
 #define TPM_STARTUP_AUDIT_DIGEST_ST_CLEAR      (1 << 6)
 #define TPM_STARTUP_AUDIT_DIGEST_ST_ANY        (1 << 5)
@@ -206,8 +209,8 @@
  * This table defines the types of algorithms which may be supported by the TPM.
  */
 #define TPM_ALG_RSA             0x00000001
-#define TPM_ALG_DES             0x00000002
-#define TPM_ALG_3DES            0x00000003
+#define TPM_ALG_DES             0x00000002 /* reserved since v1.2 rev 103 */
+#define TPM_ALG_3DES            0x00000003 /* reserved since v1.2 rev 103 */
 #define TPM_ALG_SHA             0x00000004
 #define TPM_ALG_HMAC            0x00000005
 #define TPM_ALG_AES128          0x00000006
@@ -238,7 +241,7 @@
 #define TPM_MS_REWRAP                     0x0002
 #define TPM_MS_MAINT                      0x0003
 #define TPM_MS_RESTRICT_MIGRATE           0x0004
-#define TPM_MS_RESTRICT_APPROVE_DOUBLE    0x0005
+#define TPM_MS_RESTRICT_APPROVE           0x0005 /* changed since v1.2 rev 103 */
 /* removed since v1.2 rev 94
 #define TPM_MS_RESTRICT_MIGRATE_EXTERNAL  0x0006
 */
@@ -299,14 +302,17 @@
   BYTE digest[20];
 } TPM_DIGEST;
 
+/* Redefinitions */
 typedef TPM_DIGEST TPM_CHOSENID_HASH;
 typedef TPM_DIGEST TPM_COMPOSITE_HASH;
 typedef TPM_DIGEST TPM_DIRVALUE;
 typedef TPM_DIGEST TPM_HMAC;
 typedef TPM_DIGEST TPM_PCRVALUE;
 typedef TPM_DIGEST TPM_AUDITDIGEST;
+/* removed since v1.2 rev 103
 typedef TPM_DIGEST TPM_DAA_TPM_SEED;
 typedef TPM_DIGEST TPM_DAA_CONTEXT_SEED;
+*/
 
 /*
  * TPM_NONCE ([TPM_Part2], Section 5.5)
@@ -316,12 +322,18 @@
   BYTE nonce[20];
 } TPM_NONCE;
 
+/* Redefinitions */
+typedef TPM_NONCE TPM_DAA_TPM_SEED; /* added since v1.2 rev 103 */
+typedef TPM_NONCE TPM_DAA_CONTEXT_SEED; /* added since v1.2 rev 103 */
+
 /*
  * TPM_AUTHDATA ([TPM_Part2], Section 5.6)
  * Information that is saved or passed to provide proof of ownership of an
  * entity. For version 1 this area is always 20 bytes.
  */
 typedef BYTE TPM_AUTHDATA[20];
+
+/* Redefinitions */
 typedef TPM_AUTHDATA TPM_SECRET;
 typedef TPM_AUTHDATA TPM_ENCAUTH;
 
@@ -353,7 +365,7 @@
 #define TPM_ES_NONE                    0x0001
 #define TPM_ES_RSAESPKCSv15            0x0002
 #define TPM_ES_RSAESOAEP_SHA1_MGF1     0x0003
-#define TPM_ES_SYM_CNT                 0x0004
+#define TPM_ES_SYM_CTR                 0x0004 /* changed since v1.2 rev 103 */
 #define TPM_ES_SYM_OFB                 0x0005
 
 /*
@@ -586,9 +598,7 @@
 #define TPM_ORD_GetRandom                       70
 #define TPM_ORD_StirRandom                      71
 #define TPM_ORD_SelfTestFull                    80
-/* removed since v1.2 rev 94
-#define TPM_ORD_CertifySelfTest                 82
-*/
+#define TPM_ORD_CertifySelfTest                 82 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_ContinueSelfTest                83
 #define TPM_ORD_GetTestResult                   84
 #define TPM_ORD_Reset                           90
@@ -596,9 +606,7 @@
 #define TPM_ORD_DisableOwnerClear               92
 #define TPM_ORD_ForceClear                      93
 #define TPM_ORD_DisableForceClear               94
-/* removed since v1.2 rev 94
-#define TPM_ORD_GetCapabilitySigned             100
-*/
+#define TPM_ORD_GetCapabilitySigned             100 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_GetCapability                   101
 #define TPM_ORD_GetCapabilityOwner              102
 #define TPM_ORD_OwnerSetDisable                 110
@@ -618,15 +626,11 @@
 #define TPM_ORD_CreateRevocableEK               127
 #define TPM_ORD_RevokeTrust                     128
 #define TPM_ORD_OwnerReadInternalPub            129
-/* removed since v1.2 rev 94
-#define TPM_ORD_GetAuditEvent                   130
-#define TPM_ORD_GetAuditEventSigned             131
-*/
+#define TPM_ORD_GetAuditEvent                   130 /* cmd removed v1.2 rev 94 */
+#define TPM_ORD_GetAuditEventSigned             131 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_GetAuditDigest                  133
 #define TPM_ORD_GetAuditDigestSigned            134
-/* removed since v1.2 rev 94
-#define TPM_ORD_GetOrdinalAuditStatus           140
-*/
+#define TPM_ORD_GetOrdinalAuditStatus           140 /* cmd removed v1.2 rev 94 */
 #define TPM_ORD_SetOrdinalAuditStatus           141
 #define TPM_ORD_Terminate_Handle                150
 #define TPM_ORD_Init                            151
@@ -667,7 +671,7 @@
 #define TPM_ORD_EstablishTransport              230
 #define TPM_ORD_ExecuteTransport                231
 #define TPM_ORD_ReleaseTransportSigned          232
-/* removed since v1.2 rev 94
+/* command and ordinal removed since v1.2 rev 94
 #define TPM_ORD_SetTickType                     240
 */
 #define TPM_ORD_GetTicks                        241
@@ -722,6 +726,8 @@
  * TPM_LOCALITY_SELECTION ([TPM_Part2], Section 8.6)
  * When used with localityAtCreation only one bit is set and it corresponds
  * to the locality of the command creating the structure.
+ * When used with localityAtRelease the bits indicate which localities
+ * CAN perform the release.
  */
 typedef BYTE TPM_LOCALITY_SELECTION;
 /* 5-7 are reserved and must be 0 */
@@ -767,17 +773,25 @@
 #define sizeof_TPM_PCR_INFO_SHORT(s) ( \
   sizeof_TPM_PCR_SELECTION(s.pcrSelection) + 1 + 20)
 
-/*
+/* !!! WATCH: changed since v1.2 rev 103 !!!
+ *
  * TPM_PCR_ATTRIBUTES ([TPM_Part2], Section 8.8)
  * These attributes are available on a per PCR basis.
  */
 #define TPM_NUM_LOCALITY 5
 typedef struct tdTPM_PCR_ATTRIBUTES {
   BOOL pcrReset;
+  TPM_LOCALITY_SELECTION pcrExtendLocal;
+  TPM_LOCALITY_SELECTION pcrResetLocal;
+  /* changed
   BOOL pcrResetLocal[TPM_NUM_LOCALITY];
   BOOL pcrExtendLocal[TPM_NUM_LOCALITY];
+  */
 } TPM_PCR_ATTRIBUTES;
-#define sizeof_TPM_PCR_ATTRIBUTES(s) (1 + 2*TPM_NUM_LOCALITY)
+#define sizeof_TPM_PCR_ATTRIBUTES(s) (1 + \
+  + sizeof_TPM_PCR_SELECTION(s.pcrExtendLocal) \
+  + sizeof_TPM_PCR_SELECTION(s.pcrResetLocal))
+#define sizeof_TPM_PCR_ATTRIBUTES2(s) (1 + 1 + 1)
 
 /*
  * Storage Structures
@@ -794,12 +808,19 @@
   TPM_STRUCTURE_TAG tag;
   TPM_ENTITY_TYPE et; /* renamed since v1.2 rev 94 */
   UINT32 sealInfoSize;
-  TPM_PCR_INFO sealInfo;
+
+TPM_PCR_INFO sealInfo;
+/* TODO: must be the line below, according to rev 103
+BYTE *sealInfo; */ /* type changed since v1.2 rev 103 */
+
   UINT32 encDataSize;
   BYTE* encData;
 } TPM_STORED_DATA;
-#define sizeof_TPM_STORED_DATA(s) (2 + 2 + 4 + s.sealInfoSize + 4 + s.encDataSize)
-#define free_TPM_STORED_DATA(s) { if (s.encDataSize > 0) tpm_free(s.encData); }
+#define sizeof_TPM_STORED_DATA(s) (2 + 2 + 4 + s.sealInfoSize \
+  + 4 + s.encDataSize)
+#define free_TPM_STORED_DATA(s) { \
+/*  if (s.sealInfoSize > 0) tpm_free(s.sealInfo); \ */ \
+  if (s.encDataSize > 0) tpm_free(s.encData); }
 
 /*
  * TPM_SEALED_DATA ([TPM_Part2], Section 9.3)
@@ -841,6 +862,13 @@
 } TPM_BOUND_DATA;
 
 /*
+ * TPM_KEY complex ([TPM_Part2], Section 10)
+ * The TPA_KEY complex is where all of the information regarding keys
+ * is kept. These structures combine to fully define and protect the
+ * information regarding an asymmetric key.
+ */
+
+/*
  * TPM_RSA_KEY_PARMS ([TPM_Part2], Section 10.1.1)
  * This structure describes the parameters of an RSA key.
  */
@@ -851,7 +879,8 @@
   BYTE* exponent;
 } TPM_RSA_KEY_PARMS;
 #define sizeof_TPM_RSA_KEY_PARMS(s) (4 + 4 + 4 + s.exponentSize)
-#define free_TPM_RSA_KEY_PARMS(s) { if (s.exponentSize > 0) tpm_free(s.exponent); }
+#define free_TPM_RSA_KEY_PARMS(s) { \
+  if (s.exponentSize > 0) tpm_free(s.exponent); }
 
 /*
  * TPM_SYMMETRIC_KEY_PARMS ([TPM_Part2], Section 10.1.2)
@@ -920,12 +949,17 @@
   TPM_AUTH_DATA_USAGE authDataUsage;
   TPM_KEY_PARMS algorithmParms;
   UINT32 PCRInfoSize;
-  TPM_PCR_INFO PCRInfo;
+
+TPM_PCR_INFO PCRInfo;
+/* TODO: must be the line below, according to rev 103
+BYTE *PCRInfo; */ /* type changed since v1.2 rev 103 */
+
   TPM_STORE_PUBKEY pubKey;
   UINT32 encDataSize;
   BYTE* encData;
 } TPM_KEY;
-#define sizeof_TPM_KEY(s) (4 + 2 + 4 + 1 + sizeof_TPM_KEY_PARMS(s.algorithmParms) \
+#define sizeof_TPM_KEY(s) (4 + 2 + 4 + 1 \
+  + sizeof_TPM_KEY_PARMS(s.algorithmParms) \
   + 4 + s.PCRInfoSize + sizeof_TPM_STORE_PUBKEY(s.pubKey) \
   + 4 + s.encDataSize)
 #define free_TPM_KEY(s) { if (s.encDataSize > 0) tpm_free(s.encData); \
@@ -970,7 +1004,7 @@
 } TPM_STORE_ASYMKEY;
 #define sizeof_TPM_STORE_ASYMKEY(s) ( 1 + 20 + 20 + 20 \
   + sizeof_TPM_STORE_PRIVKEY(s.privKey))
-#define free_TPM_STORE_ASYMKEY(s) { free_TPM_STORE_PRIVKEY(s.privKey) }
+#define free_TPM_STORE_ASYMKEY(s) { free_TPM_STORE_PRIVKEY(s.privKey); }
 
 /*
  * TPM_MIGRATE_ASYMKEY ([TPM_Part2], Section 10.8)
@@ -984,6 +1018,9 @@
   UINT32 partPrivKeyLen;
   TPM_STORE_PRIVKEY partPrivKey;
 } TPM_MIGRATE_ASYMKEY;
+#define sizeof_TPM_MIGRATE_ASYMKEY(s) ( 1 + 20 + 20 + 4 \
+  + sizeof_TPM_STORE_PRIVKEY(s.partPrivKey))
+#define free_TPM_MIGRATE_ASYMKEY(s) { free_TPM_STORE_PRIVKEY(s.partPrivKey); }
 
 /*
  * TPM_MIGRATIONKEYAUTH ([TPM_Part2], Section 5.12)
@@ -995,7 +1032,8 @@
   TPM_MIGRATE_SCHEME migrationScheme;
   TPM_DIGEST digest;
 } TPM_MIGRATIONKEYAUTH;
-#define sizeof_TPM_MIGRATIONKEYAUTH(s) (sizeof_TPM_PUBKEY(s.migrationKey) + 2 + 20)
+#define sizeof_TPM_MIGRATIONKEYAUTH(s) (sizeof_TPM_PUBKEY(s.migrationKey) \
+  + 2 + 20)
 #define free_TPM_MIGRATIONKEYAUTH(s) { free_TPM_PUBKEY(s.migrationKey); }
 
 /*
@@ -1010,7 +1048,7 @@
  */
 
 /*
- * TPM_AUTH ([TPM_Part1], Section 11.2)
+ * TPM_AUTH ([TPM_Part1], Section ??.?)
  * Authorization Protocol Input/Output Parameter
  */
 typedef struct tdTPM_AUTH {
@@ -1043,7 +1081,11 @@
   TPM_NONCE data;
   BOOL parentPCRStatus;
   UINT32 PCRInfoSize;
-  TPM_PCR_INFO PCRInfo; /* FIXME: should be TPM_PCR_INFO_SHORT */
+
+TPM_PCR_INFO PCRInfo;
+/* TODO: must be the line below, according to rev 103
+BYTE *PCRInfo; */ /* type changed since v1.2 rev 103 */
+
   UINT32 migrationAuthoritySize;
   BYTE* migrationAuthority;
 } TPM_CERTIFY_INFO;
@@ -1140,33 +1182,11 @@
  * This structure is sent by the TSS to the Privacy CA to create the
  * identity credential. This structure is informative only.
  */
-typedef struct tdTPM_IDENTITY_REQ {
-  UINT32 asymSize;
-  UINT32 symSize;
-  TPM_KEY_PARMS asymAlgorithm;
-  TPM_KEY_PARMS symAlgorithm;
-  BYTE* asymBlob;
-  BYTE* symBlob;
-} TPM_IDENTITY_REQ;
 
 /*
  * TPM_IDENTITY_PROOF ([TPM_Part2], Section 12.7)
  * Structure in use during the AIK credential process.
  */
-typedef struct tdTPM_IDENTITY_PROOF {
-  TPM_STRUCT_VER ver;
-  UINT32 labelSize;
-  UINT32 identityBindingSize;
-  UINT32 endorsementSize;
-  UINT32 platformSize;
-  UINT32 conformanceSize;
-  TPM_PUBKEY identityKey;
-  BYTE* labelArea;
-  BYTE* identityBinding;
-  BYTE* endorsementCredential;
-  BYTE* platformCredential;
-  BYTE* conformanceCredential;
-} TPM_IDENTITY_PROOF;
 
 /*
  * TPM_ASYM_CA_CONTENTS ([TPM_Part2], Section 12.8)
@@ -1182,11 +1202,6 @@
  * This structure returned by the Privacy CA with the encrypted
  * identity credential.
  */
-typedef struct tdTPM_SYM_CA_ATTESTATION {
-  UINT32 credSize;
-  TPM_KEY_PARMS algorithm;
-  BYTE* credential;
-} TPM_SYM_CA_ATTESTATION;
 
 /*
  * Tick Structures
@@ -1267,7 +1282,7 @@
   TPM_DIGEST transDigest;
 } TPM_TRANSPORT_INTERNAL;
 #define sizeof_TPM_TRANSPORT_INTERNAL(s) (2 + 20 + 4 + 20 + 20 \
-  + sizeof_TPM_TRANSPORT_PUBLIC(s.tranPublic))
+  + sizeof_TPM_TRANSPORT_PUBLIC(s.transPublic))
 
 /*
  * TPM_TRANSPORT_LOG_IN structure ([TPM_Part2], Section 13.3)
@@ -1282,7 +1297,7 @@
   TPM_DIGEST parameters;
   TPM_DIGEST pubKeyHash;
 } TPM_TRANSPORT_LOG_IN;
-#define sizeof_TPM_TRANSPORT_LOG_IN(s) (2 + 2*20)
+#define sizeof_TPM_TRANSPORT_LOG_IN(s) (2 + 20 + 20)
 
 /*
  * TPM_TRANSPORT_LOG_OUT structure ([TPM_Part2], Section 13.4)
@@ -1484,6 +1499,7 @@
 #define TPM_NV_INDEX_TPM_CC             0x0000F001
 #define TPM_NV_INDEX_PlatformCert       0x0000F002
 #define TPM_NV_INDEX_Platform_CC        0x0000F003
+#define TPM_NV_INDEX_TRIAL              0x0000F004 /* added since v1.2 rev 103 */
 
 /*
  * TPM_NV_ATTRIBUTES ([TPM_Part2], Section 19.2)
@@ -1526,7 +1542,7 @@
   BOOL bWriteDefine;
   UINT32 dataSize;
 } TPM_NV_DATA_PUBLIC;
-#define sizeof_TPM_NV_DATA_PUBLIC(s) (2 + 4 + 6 + 3 + 4 \
+#define sizeof_TPM_NV_DATA_PUBLIC(s) (2 + 4 + 6 + 1 + 1 + 1 + 4 \
   + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfoRead) \
   + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfoWrite))
 
@@ -1558,6 +1574,14 @@
 #define TPM_MAX_NV_SIZE 64
 
 /*
+ * TPM_NV_DATA_AREA ([TPM_Part2], Section 19.6)
+ * TPM_NV_DATA_AREA is an indication of the internal structure the
+ * TPM uses to track NV areas. The structure definition is TPM vendor
+ * specific and never leaves the TPM. The structure would contain
+ * both the TPM_NV_DATA_PUBLIC and TPM_NV_DATA_SENSITIVE areas.
+ */
+
+/*
  * Delegate Structures
  */
 
@@ -1590,10 +1614,9 @@
 #define TPM_DELEGATE_SetOrdinalAuditStatus          (1 << 30) /* added */
 #define TPM_DELEGATE_DirWriteAuth                   (1 << 29) /* added */
 #define TPM_DELEGATE_CMK_ApproveMA                  (1 << 28) /* added */
-#define TPM_DELEGATE_CMD_CreateTicket               (1 << 26)
-/* removed since v1.2 rev 94
-#define TPM_DELEGATE_CMK_CreateKey                  (1 << 25)
-*/
+#define TPM_DELEGATE_NV_WriteValue                  (1 << 27) /* added */
+#define TPM_DELEGATE_CMK_CreateTicket               (1 << 26) /* name changed */
+#define TPM_DELEGATE_NV_ReadValue                   (1 << 25) /* name changed */
 #define TPM_DELEGATE_Delegate_LoadOwnerDelegation   (1 << 24) /* name changed */
 #define TPM_DELEGATE_DAA_Join                       (1 << 23)
 #define TPM_DELEGATE_AuthorizeMigrationKey          (1 << 22)
@@ -1604,9 +1627,7 @@
 #define TPM_DELEGATE_ResetLockValue                 (1 << 17) /* name changed */
 #define TPM_DELEGATE_OwnerClear                     (1 << 16)
 #define TPM_DELEGATE_DisableOwnerClear              (1 << 15)
-/* removed since v1.2 rev 94
-#define TPM_DELEGATE_DisableForceClear              (1 << 14)
-*/
+#define TPM_DELEGATE_NV_DefineSpace                 (1 << 14) /* name changed */
 #define TPM_DELEGATE_OwnerSetDisable                (1 << 13)
 #define TPM_DELEGATE_SetCapability                  (1 << 12) /* name changed */
 #define TPM_DELEGATE_MakeIdentity                   (1 << 11)
@@ -1621,6 +1642,8 @@
 #define TPM_DELEGATE_Delegate_Manage                (1 <<  2)
 #define TPM_DELEGATE_Delegate_CreateOwnerDelegation (1 <<  1)
 #define TPM_DELEGATE_DAA_Sign                       (1 <<  0)
+/* Per2 bits */
+/* 31-0 reserved and must be 0 */
 
 /*
  * Key Permission settings ([TPM_Part2], Section 20.2.3)
@@ -1657,6 +1680,8 @@
 #define TPM_KEY_DELEGATE_Unseal                     (1 <<  2) /* name changed */
 #define TPM_KEY_DELEGATE_Seal                       (1 <<  1) /* name changed */
 #define TPM_KEY_DELEGATE_LoadKey                    (1 <<  0) /* name changed */
+/* Per2 bits */
+/* 31-0 reserved and must be 0 */
 
 /*
  * TPM_FAMILY_FLAGS ([TPM_Part2], Section 20.3)
@@ -1726,8 +1751,10 @@
   TPM_FAMILY_ID familyID;
   TPM_FAMILY_VERIFICATION verificationCount;
 } TPM_DELEGATE_PUBLIC;
-#define sizeof_TPM_DELEGATE_PUBLIC(s) (2 + sizeof_TPM_DELEGATE_LABEL(s.rowLabel) \
-  + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfo) + sizeof_TPM_DELEGATIONS(s.permissions) \
+#define sizeof_TPM_DELEGATE_PUBLIC(s) (2 \
+  + sizeof_TPM_DELEGATE_LABEL(s.rowLabel) \
+  + sizeof_TPM_PCR_INFO_SHORT(s.pcrInfo) \
+  + sizeof_TPM_DELEGATIONS(s.permissions) \
   + 4 + 4)
 #define free_TPM_DELEGATE_PUBLIC(s) { free_TPM_DELEGATE_LABEL(s.rowLabel); \
   free_TPM_DELEGATIONS(s.permissions); }
@@ -1779,8 +1806,9 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveArea;
 } TPM_DELEGATE_OWNER_BLOB;
-#define sizeof_TPM_DELEGATE_OWNER_BLOB(s) (2 + sizeof_TPM_DELEGATE_PUBLIC(s.pub) \
-  + 20 + 4 + s.additionalSize + 4 + s.sensitiveSize)
+#define sizeof_TPM_DELEGATE_OWNER_BLOB(s) (2 \
+  + sizeof_TPM_DELEGATE_PUBLIC(s.pub) + 20 \
+  + 4 + s.additionalSize + 4 + s.sensitiveSize)
 #define free_TPM_DELEGATE_OWNER_BLOB(s) { free_TPM_DELEGATE_PUBLIC(s.pub); \
   if (s.additionalSize > 0) tpm_free(s.additionalArea); \
   if (s.sensitiveSize > 0) tpm_free(s.sensitiveArea); }
@@ -1801,8 +1829,9 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveArea;
 } TPM_DELEGATE_KEY_BLOB;
-#define sizeof_TPM_DELEGATE_KEY_BLOB(s) (2 + sizeof_TPM_DELEGATE_PUBLIC(s.pub) \
-  + 20 + 20 + 4 + s.additionalSize + 4 + s.sensitiveSize)
+#define sizeof_TPM_DELEGATE_KEY_BLOB(s) (2 \
+  + sizeof_TPM_DELEGATE_PUBLIC(s.pub) + 20 + 20 \
+  + 4 + s.additionalSize + 4 + s.sensitiveSize)
 #define free_TPM_DELEGATE_KEY_BLOB(s) { free_TPM_DELEGATE_PUBLIC(s.pub); \
   if (s.additionalSize > 0) tpm_free(s.additionalArea); \
   if (s.sensitiveSize > 0) tpm_free(s.sensitiveArea); }
@@ -1847,9 +1876,10 @@
 #define TPM_CAP_TRANS_ES                0x00000015
 #define TPM_CAP_AUTH_ENCRYPT            0x00000017 /* added since v1.2 rev 94 */
 #define TPM_CAP_SELECT_SIZE             0x00000018 /* added since v1.2 rev 94 */
+#define TPM_CAP_DA_LOGIC                0x00000019 /* added since v1.2 rev 103 */
 #define TPM_CAP_VERSION_VAL             0x0000001A /* added since v1.2 rev 94 */
 
-/* subCap definitions */
+/* subCap definitions ([TPM_Part2], Section 21.2) */
 #define TPM_CAP_PROP_PCR                0x00000101
 #define TPM_CAP_PROP_DIR                0x00000102
 #define TPM_CAP_PROP_MANUFACTURER       0x00000103
@@ -1874,8 +1904,8 @@
 /* removed since v1.2 rev 94
 #define TPM_CAP_PROP_NV_MAXBUF          0x00000118
 */
-#define TPM_CAP_PROP_DAA_MAX            0x00000119
-#define TPM_CAP_PROP_SESSION_DAA        0x0000011A
+#define TPM_CAP_PROP_MAX_DAASESS        0x00000119 /* name changed in rev 103 */
+#define TPM_CAP_PROP_DAASESS            0x0000011A /* name changed in rev 103 */
 /* removed since v1.2 rev 94
 #define TPM_CAP_PROP_GLOBALLOCK         0x0000011A
 */
@@ -1919,9 +1949,70 @@
   UINT16 vendorSpecificSize;
   BYTE* vendorSpecific;
 } TPM_CAP_VERSION_INFO;
-#define sizeof_TPM_CAP_VERSION_INFO(s) (sizeof(TPM_STRUCTURE_TAG) + \
-  sizeof(TPM_VERSION) + sizeof(UINT16) + sizeof(BYTE) + 4*sizeof(BYTE) + \
-  sizeof(UINT16) + s.vendorSpecificSize)
+#define sizeof_TPM_CAP_VERSION_INFO(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_VERSION) + sizeof(UINT16) + sizeof(BYTE) + 4*sizeof(BYTE) \
+  + sizeof(UINT16) + s.vendorSpecificSize)
+
+/* TPM_DA_ACTION_TYPE ([TPM_Part2], Section 21.10)
+ * This structure indicates the action taken when the dictionary attack
+ * mitigation logic is active, when TPM_DA_STATE is TPM_DA_STATE_ACTIVE.
+ */
+#define TPM_TAG_DA_ACTION_TYPE 0x0039
+typedef struct tdTPM_DA_ACTION_TYPE {
+  TPM_STRUCTURE_TAG tag;
+  UINT32 actions;
+} TPM_DA_ACTION_TYPE;
+
+#define TPM_DA_ACTION_FAILURE_MODE        (1 << 3)
+#define TPM_DA_ACTION_DEACTIVATE          (1 << 2)
+#define TPM_DA_ACTION_DISABLE             (1 << 1)
+#define TPM_DA_ACTION_TIMEOUT             (1 << 0)
+
+/*
+ * TPM_DA_INFO ([TPM_Part2], Section 21.7)
+ * This structure is an output from a TPM_GetCapability->TPM_CAP_DA_LOGIC
+ * request if TPM_PERMANENT_FLAGS->disableFullDALogicInfo is FALSE.
+ */
+#define TPM_TAG_DA_INFO 0x0037
+typedef struct tdTPM_DA_INFO {
+  TPM_STRUCTURE_TAG tag;
+  TPM_DA_STATE state;
+  UINT16 currentCount;
+  UINT16 thresholdCount;
+  TPM_DA_ACTION_TYPE actionAtThreshold;
+  UINT32 actionDependValue;
+  UINT32 vendorDataSize;
+  BYTE* vendorData;
+} TPM_DA_INFO;
+#define sizeof_TPM_DA_INFO(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_DA_STATE) + 2*sizeof(UINT16) + sizeof(TPM_DA_ACTION_TYPE) \
+  + 2*sizeof(UINT32) + s.vendorDataSize)
+
+/*
+ * TPM_DA_INFO_LIMITED ([TPM_Part2], Section 21.8)
+ * This structure is an output from a TPM_GetCapability->TPM_CAP_DA_LOGIC
+ * request if TPM_PERMANENT_FLAGS->disableFullDALogicInfo is TRUE.
+ */
+#define TPM_TAG_DA_INFO_LIMITED 0x0038
+typedef struct tdTPM_DA_INFO_LIMITED {
+  TPM_STRUCTURE_TAG tag;
+  TPM_DA_STATE state;
+  TPM_DA_ACTION_TYPE actionAtThreshold;
+  UINT32 vendorDataSize;
+  BYTE* vendorData;
+} TPM_DA_INFO_LIMITED;
+#define sizeof_TPM_DA_INFO_LIMITED(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_DA_STATE) + sizeof(TPM_DA_ACTION_TYPE) \
+  + sizeof(UINT32) + s.vendorDataSize)
+
+/*
+ * TPM_DA_STATE ([TPM_Part2], Section 21.9)
+ * TPM_DA_STATE enumerates the possible states of the dictionary attack
+ * mitigation logic.
+ */
+#define TPM_DA_STATE_INACTIVE      0x00
+#define TPM_DA_STATE_ACTIVE        0x01
+
 
 /*
  * DAA Structures ([TPM_Part2], Section 22)
@@ -2021,9 +2112,9 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveData;
 } TPM_DAA_BLOB;
-#define sizeof_TPM_DAA_BLOB(s) (sizeof(TPM_STRUCTURE_TAG) + \
-  sizeof(TPM_RESOURCE_TYPE) + sizeof(s.label) + sizeof(TPM_DIGEST) + \
-  2*sizeof(UINT32) + s.additionalSize + s.sensitiveSize)
+#define sizeof_TPM_DAA_BLOB(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(TPM_RESOURCE_TYPE) + sizeof(s.label) + sizeof(TPM_DIGEST) \
+  + 2*sizeof(UINT32) + s.additionalSize + s.sensitiveSize)
 
 /*
  * TPM_DAA_SENSITIVE ([TPM_Part2], Section 22.9)
@@ -2035,8 +2126,8 @@
   UINT32 internalSize;
   BYTE* internalData;
 } TPM_DAA_SENSITIVE;
-#define sizeof_TPM_DAA_SENSITIVE(s) (sizeof(TPM_STRUCTURE_TAG) + \
-  sizeof(UINT32) + s.internalSize)
+#define sizeof_TPM_DAA_SENSITIVE(s) (sizeof(TPM_STRUCTURE_TAG) \
+  + sizeof(UINT32) + s.internalSize)
 
 /*
  * Redirection ([TPM_Part2], Section 23)
@@ -2049,7 +2140,7 @@
 typedef UINT32 TPM_REDIR_COMMAND;
 
 /*
- * Internal Data Held By TPM
+ * Internal Data Held By TPM ([TPM_Part2], Section 7)
  */
 
 /*
@@ -2079,12 +2170,13 @@
   BOOL readSRKPub;
   BOOL tpmEstablished;
   BOOL maintenanceDone;
+  BOOL disableFullDALogicInfo; /* WATCH: added since v1.2 rev 103 */
   /* additional, not marshalled flags */
   BOOL selfTestSucceeded;
   BOOL owned;
   BOOL dataRestored;
 } TPM_PERMANENT_FLAGS;
-#define sizeof_TPM_PERMANENT_FLAGS(s) (2 + 19)
+#define sizeof_TPM_PERMANENT_FLAGS(s) (2 + 20)
 
 /*
  * TPM_STCLEAR_FLAGS ([TPM_Part2], Section 7.2)
@@ -2161,7 +2253,7 @@
   TPM_STRUCTURE_TAG tag;
   TPM_VERSION version;
   TPM_NONCE tpmProof;
-  //TPM_NONCE fipsReset;
+  //TPM_NONCE ekReset;
   TPM_SECRET ownerAuth;
   TPM_SECRET operatorAuth;
   //TPM_SECRET adminAuth;
@@ -2187,13 +2279,15 @@
   TPM_NV_DATA_SENSITIVE *nvStorage;
   //TPM_CMK_DELEGATE restrictDelegate;
   TPM_DAA_TPM_SEED tpmDAASeed;
+  //TPM_NONCE daaProof;
+  //TPM_KEY daaBlobKey;
   TPM_KEY_DATA keys[TPM_MAX_KEYS];
   const char *testResult;
 } TPM_PERMANENT_DATA;
 #define sizeof_TPM_PERMANENT_DATA(s) (2 + 4 + 4*20 \
   + sizeof_RSA(s.endorsementKey) + TPM_ORD_MAX/8 \
   + (1+TPM_MAX_KEYS)*sizeof_TPM_KEY_DATA(s.srk) \
-  + TPM_NUM_PCR*(sizeof_TPM_PCR_ATTRIBUTES(x)+20) \
+  + TPM_NUM_PCR*(sizeof_TPM_PCR_ATTRIBUTES2(x)+20) \
   + TPM_MAX_COUNTERS*sizeof_TPM_COUNTER_VALUE2(x) + 1 + 4 + 20)
 
 /*
@@ -2209,6 +2303,8 @@
   TPM_COUNT_ID countID;
   //UINT32 ownerReference;
   //BOOL disableResetLock;
+  //TPM_PCRVALUE PCR[TPM_NUM_PCR];
+  //UINT32 deferredPhysicalPresence;
 } TPM_STCLEAR_DATA;
 #define sizeof_TPM_STCLEAR_DATA(s) (2 + 20 + 4)
 
@@ -2324,8 +2420,8 @@
   UINT32 sensitiveSize;
   BYTE* sensitiveData;
 } TPM_CONTEXT_BLOB;
-#define sizeof_TPM_CONTEXT_BLOB(s) (2 + 4 + 4 + 16 + 4 + 20 + 4 \
- + s.additionalSize + 4 + s.sensitiveSize)
+#define sizeof_TPM_CONTEXT_BLOB(s) (2 + 4 + 4 + 16 + 4 + 20 \
+  + 4 + s.additionalSize + 4 + s.sensitiveSize)
 #define free_TPM_CONTEXT_BLOB(s) { \
   if (s.additionalSize > 0) tpm_free(s.additionalData); \
   if (s.sensitiveSize > 0) tpm_free(s.sensitiveData); }
@@ -2333,6 +2429,8 @@
 /*
  * TPM_CONTEXT_SENSITIVE ([TPM_Part2], Section 18.2)
  * The internal areas that the TPM needs to encrypt and store off the TPM.
+ * This is an informative structure and the TPM can implement in any
+ * manner they wish.
  */
 #define TPM_TAG_CONTEXT_SENSITIVE 0x0002
 typedef struct tdTPM_CONTEXT_SENSITIVE {
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_testing.c tpm_emulator-0.5/tpm_dev/tpm/tpm_testing.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_testing.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_testing.c	2006-11-17 06:46:02.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_testing.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_testing.c 153 2006-11-17 04:46:02Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_ticks.c tpm_emulator-0.5/tpm_dev/tpm/tpm_ticks.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_ticks.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_ticks.c	2006-11-10 18:09:00.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_ticks.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_ticks.c 139 2006-11-10 16:09:00Z mast $
  */
 
 #include "tpm_emulator.h"
diff -Nuar tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_transport.c tpm_emulator-0.5/tpm_dev/tpm/tpm_transport.c
--- tpm_emulator-0.5.orig/tpm_dev/tpm/tpm_transport.c	2006-12-31 12:37:08.000000000 +0200
+++ tpm_emulator-0.5/tpm_dev/tpm/tpm_transport.c	2006-11-12 01:56:11.000000000 +0200
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * $Id: tpm_transport.c 158 2006-12-03 10:44:02Z mast $
+ * $Id: tpm_transport.c 144 2006-11-11 23:56:11Z mast $
  */
 
 /* 
