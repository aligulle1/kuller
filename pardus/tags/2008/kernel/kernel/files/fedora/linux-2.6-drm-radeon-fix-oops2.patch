Index: 2008-devel/drivers/char/drm/radeon_cp.c
===================================================================
--- 2008-devel.orig/drivers/char/drm/radeon_cp.c
+++ 2008-devel/drivers/char/drm/radeon_cp.c
@@ -1515,10 +1515,10 @@ static void radeon_set_pcigart(drm_radeo
 	}
 }
 
-static int radeon_do_init_cp(struct drm_device * dev, drm_radeon_init_t * init)
+static int radeon_do_init_cp(struct drm_device * dev, drm_radeon_init_t * init, struct drm_file *file_priv)
 {
 	drm_radeon_private_t *dev_priv = dev->dev_private;
-
+	struct drm_radeon_master_private *master_priv = file_priv->master->driver_priv;
 	DRM_DEBUG("\n");
 
 	/* if we require new memory map but we don't have it fail */
@@ -1642,8 +1642,8 @@ static int radeon_do_init_cp(struct drm_
 	dev_priv->buffers_offset = init->buffers_offset;
 	dev_priv->gart_textures_offset = init->gart_textures_offset;
 
-	dev_priv->sarea = drm_getsarea(dev);
-	if (!dev_priv->sarea) {
+	master_priv->sarea = drm_getsarea(dev);
+	if (!master_priv->sarea) {
 		DRM_ERROR("could not find sarea!\n");
 		radeon_do_cleanup_cp(dev);
 		return -EINVAL;
@@ -1680,7 +1680,7 @@ static int radeon_do_init_cp(struct drm_
 	}
 
 	dev_priv->sarea_priv =
-	    (drm_radeon_sarea_t *) ((u8 *) dev_priv->sarea->handle +
+	    (drm_radeon_sarea_t *) ((u8 *) master_priv->sarea->handle +
 				    init->sarea_priv_offset);
 
 #if __OS_HAS_AGP
@@ -1972,7 +1972,7 @@ int radeon_cp_init(struct drm_device *de
 	case RADEON_INIT_CP:
 	case RADEON_INIT_R200_CP:
 	case RADEON_INIT_R300_CP:
-		return radeon_do_init_cp(dev, init);
+		return radeon_do_init_cp(dev, init, file_priv);
 	case RADEON_CLEANUP_CP:
 		return radeon_do_cleanup_cp(dev);
 	}
Index: 2008-devel/drivers/char/drm/radeon_drv.c
===================================================================
--- 2008-devel.orig/drivers/char/drm/radeon_drv.c
+++ 2008-devel/drivers/char/drm/radeon_drv.c
@@ -81,6 +81,8 @@ static struct drm_driver driver = {
 	.get_reg_ofs = drm_core_get_reg_ofs,
 	.ioctls = radeon_ioctls,
 	.dma_ioctl = radeon_cp_buffers,
+	.master_create = radeon_master_create,
+	.master_destroy = radeon_master_destroy,
 	.fops = {
 		 .owner = THIS_MODULE,
 		 .open = drm_open,
Index: 2008-devel/drivers/char/drm/radeon_drv.h
===================================================================
--- 2008-devel.orig/drivers/char/drm/radeon_drv.h
+++ 2008-devel/drivers/char/drm/radeon_drv.h
@@ -279,7 +279,6 @@ typedef struct drm_radeon_private {
 	unsigned long buffers_offset;
 	unsigned long gart_textures_offset;
 
-	drm_local_map_t *sarea;
 	drm_local_map_t *cp_ring;
 	drm_local_map_t *ring_rptr;
 	drm_local_map_t *gart_textures;
@@ -309,6 +308,10 @@ typedef struct drm_radeon_private {
 	drm_local_map_t *mmio;
 } drm_radeon_private_t;
 
+struct drm_radeon_master_private {
+	drm_local_map_t *sarea;
+};
+
 typedef struct drm_radeon_buf_priv {
 	u32 age;
 } drm_radeon_buf_priv_t;
@@ -395,6 +398,9 @@ extern int radeon_driver_open(struct drm
 extern long radeon_compat_ioctl(struct file *filp, unsigned int cmd,
 				unsigned long arg);
 
+extern int radeon_master_create(struct drm_device *dev, struct drm_master *master);
+extern void radeon_master_destroy(struct drm_device *dev, struct drm_master *master);
+
 /* r300_cmdbuf.c */
 extern void r300_init_reg_flags(struct drm_device *dev);
 
Index: 2008-devel/drivers/char/drm/radeon_state.c
===================================================================
--- 2008-devel.orig/drivers/char/drm/radeon_state.c
+++ 2008-devel/drivers/char/drm/radeon_state.c
@@ -1415,10 +1415,11 @@ static void radeon_cp_dispatch_swap(stru
 	ADVANCE_RING();
 }
 
-static void radeon_cp_dispatch_flip(struct drm_device * dev)
+static void radeon_cp_dispatch_flip(struct drm_device * dev, struct drm_master *master)
 {
 	drm_radeon_private_t *dev_priv = dev->dev_private;
-	struct drm_sarea *sarea = (struct drm_sarea *) dev_priv->sarea->handle;
+	struct drm_radeon_master_private *master_priv = master->driver_priv;
+	struct drm_sarea *sarea = (struct drm_sarea *) master_priv->sarea->handle;
 	int offset = (dev_priv->sarea_priv->pfCurrentPage == 1)
 	    ? dev_priv->front_offset : dev_priv->back_offset;
 	RING_LOCALS;
@@ -2166,7 +2167,7 @@ static int radeon_cp_flip(struct drm_dev
 	if (!dev_priv->page_flipping)
 		radeon_do_init_pageflip(dev);
 
-	radeon_cp_dispatch_flip(dev);
+	radeon_cp_dispatch_flip(dev, file_priv->master);
 
 	COMMIT_RING();
 	return 0;
@@ -3121,15 +3122,42 @@ void radeon_driver_preclose(struct drm_d
 
 void radeon_driver_lastclose(struct drm_device *dev)
 {
-	if (dev->dev_private) {
-		drm_radeon_private_t *dev_priv = dev->dev_private;
+	radeon_do_release(dev);
+}
 
-		if (dev_priv->sarea_priv &&
-		    dev_priv->sarea_priv->pfCurrentPage != 0)
-			radeon_cp_dispatch_flip(dev);
-	}
+int radeon_master_create(struct drm_device *dev, struct drm_master *master)
+{
+	/* radeon doesn't support multi-master yet so just workaround */
+	struct drm_radeon_master_private *master_priv;
+
+	master_priv = drm_calloc(1, sizeof(*master_priv), DRM_MEM_DRIVER);
+	if (!master_priv)
+		return -ENOMEM;
+	
+	master->driver_priv = master_priv;
+	return 0;
+}
+
+void radeon_master_destroy(struct drm_device *dev, struct drm_master *master)
+{
+	struct drm_radeon_master_private *master_priv = master->driver_priv;
+	drm_radeon_private_t *dev_priv = dev->dev_private;
+
+	if (!master_priv)
+		return;
+
+	if (dev_priv->sarea_priv &&
+	    dev_priv->sarea_priv->pfCurrentPage != 0)
+		radeon_cp_dispatch_flip(dev, master);
+
+	dev_priv->sarea_priv = NULL;
+
+	if (master_priv->sarea)
+		drm_rmmap(dev, master_priv->sarea);
+
+	drm_free(master_priv, sizeof(*master_priv), DRM_MEM_DRIVER);
+	master->driver_priv = NULL;
 
-	radeon_do_release(dev);
 }
 
 int radeon_driver_open(struct drm_device *dev, struct drm_file *file_priv)
