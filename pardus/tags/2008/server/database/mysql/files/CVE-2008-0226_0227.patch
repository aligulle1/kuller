#! /bin/sh /usr/share/dpatch/dpatch-run
## 95_SECURITY_CVE-2008-0226.dpatch by Jamie Strandboge <jamie@ubuntu.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad mysql-dfsg-5.0-5.0.45~/extra/yassl/src/handshake.cpp mysql-dfsg-5.0-5.0.45/extra/yassl/src/handshake.cpp
--- mysql-dfsg-5.0-5.0.45~/extra/yassl/src/handshake.cpp	2007-07-04 09:06:05.000000000 -0400
+++ mysql-dfsg-5.0-5.0.45/extra/yassl/src/handshake.cpp	2008-02-25 17:48:31.000000000 -0500
@@ -527,6 +527,11 @@
     input.read(len, sizeof(len));
     uint16 randomLen;
     ato16(len, randomLen);
+    if (ch.suite_len_ > MAX_SUITE_SZ || sessionLen > ID_LEN ||
+        randomLen > RAN_LEN) {
+        ssl.SetError(bad_input);
+        return;
+    }
 
     int j = 0;
     for (uint16 i = 0; i < ch.suite_len_; i += 3) {    
diff -urNad mysql-dfsg-5.0-5.0.45~/extra/yassl/src/template_instnt.cpp mysql-dfsg-5.0-5.0.45/extra/yassl/src/template_instnt.cpp
--- mysql-dfsg-5.0-5.0.45~/extra/yassl/src/template_instnt.cpp	2007-07-04 09:05:35.000000000 -0400
+++ mysql-dfsg-5.0-5.0.45/extra/yassl/src/template_instnt.cpp	2008-02-25 17:48:31.000000000 -0500
@@ -101,6 +101,7 @@
 template void ysArrayDelete<char>(char*);
 
 template int min<int>(int, int);
+template uint16 min<uint16>(uint16, uint16);
 template unsigned int min<unsigned int>(unsigned int, unsigned int);
 template unsigned long min<unsigned long>(unsigned long, unsigned long);
 }
diff -urNad mysql-dfsg-5.0-5.0.45~/extra/yassl/src/yassl_imp.cpp mysql-dfsg-5.0-5.0.45/extra/yassl/src/yassl_imp.cpp
--- mysql-dfsg-5.0-5.0.45~/extra/yassl/src/yassl_imp.cpp	2007-07-04 09:06:58.000000000 -0400
+++ mysql-dfsg-5.0-5.0.45/extra/yassl/src/yassl_imp.cpp	2008-02-25 17:48:31.000000000 -0500
@@ -621,6 +621,10 @@
     }
 
     uint len = c24to32(length_);
+    if (len > input.get_remaining()) {
+        ssl.SetError(bad_input);
+        return;
+    }
     hashHandShake(ssl, input, len);
 
     hs->set_length(len);
@@ -1391,10 +1395,15 @@
     
     // Suites
     byte tmp[2];
+    uint16 len;
     tmp[0] = input[AUTO];
     tmp[1] = input[AUTO];
-    ato16(tmp, hello.suite_len_);
+    ato16(tmp, len);
+
+    hello.suite_len_ = min(len, static_cast<uint16>(MAX_SUITE_SZ));
     input.read(hello.cipher_suites_, hello.suite_len_);
+    if (len > hello.suite_len_) // ignore extra suites
+        input.set_current(input.get_current() + len -  hello.suite_len_);
 
     // Compression
     hello.comp_len_ = input[AUTO];
