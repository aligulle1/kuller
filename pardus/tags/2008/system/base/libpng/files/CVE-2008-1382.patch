diff -Nur libpng-1.2.25.orig/pngpread.c libpng-1.2.25/pngpread.c
--- libpng-1.2.25.orig/pngpread.c	2008-04-15 16:28:34.000000000 +0300
+++ libpng-1.2.25/pngpread.c	2008-04-15 16:36:09.000000000 +0300
@@ -1500,9 +1500,15 @@
                  png_sizeof(png_ptr->unknown_chunk.name));
       png_ptr->unknown_chunk.name[png_sizeof(png_ptr->unknown_chunk.name)-1]='\0';
 
-      png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
       png_ptr->unknown_chunk.size = (png_size_t)length;
-      png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
+
+      if (length == 0)
+          png_ptr->unknown_chunk.data = NULL;
+      else
+      {
+          png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
+          png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
+      }
 #if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
       if(png_ptr->read_user_chunk_fn != NULL)
       {
@@ -1525,8 +1531,11 @@
       else
 #endif
         png_set_unknown_chunks(png_ptr, info_ptr, &png_ptr->unknown_chunk, 1);
-      png_free(png_ptr, png_ptr->unknown_chunk.data);
-      png_ptr->unknown_chunk.data = NULL;
+      if (png_ptr->unknown_chunk.data)
+      {
+          png_free(png_ptr, png_ptr->unknown_chunk.data);
+          png_ptr->unknown_chunk.data = NULL;
+      }
    }
    else
 #endif
diff -Nur libpng-1.2.25.orig/pngrutil.c libpng-1.2.25/pngrutil.c
--- libpng-1.2.25.orig/pngrutil.c	2008-04-15 16:28:34.000000000 +0300
+++ libpng-1.2.25/pngrutil.c	2008-04-15 16:38:29.000000000 +0300
@@ -2227,9 +2227,14 @@
                   (png_charp)png_ptr->chunk_name, 
                   png_sizeof(png_ptr->unknown_chunk.name));
        png_ptr->unknown_chunk.name[png_sizeof(png_ptr->unknown_chunk.name)-1] = '\0';
-       png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
        png_ptr->unknown_chunk.size = (png_size_t)length;
-       png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
+       if (length == 0)
+           png_ptr->unknown_chunk.data = NULL;
+       else
+       {
+           png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
+           png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
+       }
 #if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
        if(png_ptr->read_user_chunk_fn != NULL)
        {
@@ -2252,8 +2257,11 @@
        else
 #endif
          png_set_unknown_chunks(png_ptr, info_ptr, &png_ptr->unknown_chunk, 1);
-       png_free(png_ptr, png_ptr->unknown_chunk.data);
-       png_ptr->unknown_chunk.data = NULL;
+       if (png_ptr->unknown_chunk.data)
+       {
+           png_free(png_ptr, png_ptr->unknown_chunk.data);
+           png_ptr->unknown_chunk.data = NULL;
+       }
    }
    else
 #endif
diff -Nur libpng-1.2.25.orig/pngset.c libpng-1.2.25/pngset.c
--- libpng-1.2.25.orig/pngset.c	2008-04-15 16:28:34.000000000 +0300
+++ libpng-1.2.25/pngset.c	2008-04-15 16:28:44.000000000 +0300
@@ -1047,20 +1047,23 @@
                    (png_charp)from->name, 
                    png_sizeof(from->name));
         to->name[png_sizeof(to->name)-1] = '\0';
+        to->size = from->size;
+        /* note our location in the read or write sequence */
+        to->location = (png_byte)(png_ptr->mode & 0xff);
 
-        to->data = (png_bytep)png_malloc_warn(png_ptr, from->size);
-        if (to->data == NULL)
-        {
-           png_warning(png_ptr,
-              "Out of memory while processing unknown chunk.");
-        }
+        if (from->size == 0)
+            to->data=NULL;
         else
         {
-           png_memcpy(to->data, from->data, from->size);
-           to->size = from->size;
-
-           /* note our location in the read or write sequence */
-           to->location = (png_byte)(png_ptr->mode & 0xff);
+            to->data = (png_bytep)png_malloc_warn(png_ptr, from->size);
+            if (to->data == NULL)
+            {
+               png_warning(png_ptr,
+                  "Out of memory while processing unknown chunk.");
+               to->size=0;
+            }
+            else
+                png_memcpy(to->data, from->data, from->size);
         }
     }
 
