diff -Naur kdelibs-4.3.4-orig/kio/kio/kdirlister.cpp kdelibs-4.3.4/kio/kio/kdirlister.cpp
--- kdelibs-4.3.4-orig/kio/kio/kdirlister.cpp	2009-12-15 14:02:45.794880975 +0200
+++ kdelibs-4.3.4/kio/kio/kdirlister.cpp	2009-12-15 14:08:18.344002071 +0200
@@ -610,7 +610,7 @@
 
     if (!(listers.isEmpty() || killed)) {
         kWarning() << "The unexpected happened.";
-        kWarning() << "listers=" << listers;
+        kWarning() << "listers for" << _dir << "=" << listers;
         kWarning() << "job=" << job;
         Q_FOREACH(KDirLister *kdl, listers) {
             kDebug() << "lister" << kdl << "m_cachedItemsJob=" << kdl->d->m_cachedItemsJob;
@@ -723,14 +723,6 @@
     KUrl url(_u);
     url.adjustPath(KUrl::RemoveTrailingSlash);
 
-    // Maybe _u is a directory itself? (see KDirModelTest::testChmodDirectory)
-    DirItem* dirItem = dirItemForUrl(url);
-    if (dirItem && !dirItem->rootItem.isNull() && dirItem->rootItem.url() == url) {
-        // If lister is set, check that it contains this dir
-        if (!lister || lister->d->lstDirs.contains(url))
-            return &dirItem->rootItem;
-    }
-
     KUrl parentDir(url);
     parentDir.setPath( parentDir.directory() );
 
@@ -738,7 +730,7 @@
     if (lister && !lister->d->lstDirs.contains(parentDir))
         return 0;
 
-    dirItem = dirItemForUrl(parentDir);
+    DirItem* dirItem = dirItemForUrl(parentDir);
     if (dirItem) {
         KFileItemList::iterator it = dirItem->lstItems.begin();
         const KFileItemList::iterator end = dirItem->lstItems.end();
@@ -749,6 +741,16 @@
         }
     }
 
+    // Maybe _u is a directory itself? (see KDirModelTest::testChmodDirectory)
+    // We check this last, though, we prefer returning a kfileitem with an actual
+    // name if possible (and we make it '.' for root items later).
+    dirItem = dirItemForUrl(url);
+    if (dirItem && !dirItem->rootItem.isNull() && dirItem->rootItem.url() == url) {
+        // If lister is set, check that it contains this dir
+        if (!lister || lister->d->lstDirs.contains(url))
+            return &dirItem->rootItem;
+    }
+
     return 0;
 }
 
@@ -900,7 +902,6 @@
     if (!oldItem.isLocalFile() && !oldItem.localPath().isEmpty()) { // it uses UDS_LOCAL_PATH? ouch, needs an update then
         slotFilesChanged( QStringList() << src.url() );
     } else {
-        aboutToRefreshItem( oldItem );
         if( nameOnly )
             fileitem->setName( dst.fileName() );
         else
@@ -918,31 +919,14 @@
 #endif
 }
 
-void KDirListerCache::aboutToRefreshItem( const KFileItem& fileitem )
-{
-    // Look whether this item was shown in any view, i.e. held by any dirlister
-    KUrl parentDir( fileitem.url() );
-    parentDir.setPath( parentDir.directory() );
-    const QString parentDirURL = parentDir.url();
-
-    DirectoryDataHash::iterator dit = directoryData.find(parentDirURL);
-    if (dit == directoryData.end())
-        return;
-
-    foreach (KDirLister *kdl, (*dit).listersCurrentlyHolding)
-        kdl->d->aboutToRefreshItem( fileitem );
-
-    // Also look in listersCurrentlyListing, in case the user manages to rename during a listing
-    foreach (KDirLister *kdl, (*dit).listersCurrentlyListing)
-        kdl->d->aboutToRefreshItem( fileitem );
-}
-
-QSet<KDirLister*> KDirListerCache::emitRefreshItem(const KFileItem& oldItem, const KFileItem& fileitem )
+QSet<KDirLister*> KDirListerCache::emitRefreshItem(const KFileItem& oldItem, const KFileItem& fileitem)
 {
+    //kDebug(7004) << "old:" << oldItem.name() << oldItem.url()
+    //             << "new:" << fileitem.name() << fileitem.url();
     // Look whether this item was shown in any view, i.e. held by any dirlister
     KUrl parentDir( oldItem.url() );
     parentDir.setPath( parentDir.directory() );
-    QString parentDirURL = parentDir.url();
+    const QString parentDirURL = parentDir.url();
     DirectoryDataHash::iterator dit = directoryData.find(parentDirURL);
     QList<KDirLister *> listers;
     // Also look in listersCurrentlyListing, in case the user manages to rename during a listing
@@ -957,12 +941,15 @@
     QSet<KDirLister*> listersToRefresh;
     Q_FOREACH(KDirLister *kdl, listers) {
         // For a directory, look for dirlisters where it's the root item.
+        KUrl directoryUrl(oldItem.url());
         if (oldItem.isDir() && kdl->d->rootFileItem == oldItem) {
+            const KFileItem oldRootItem = kdl->d->rootFileItem;
             kdl->d->rootFileItem = fileitem;
+            kdl->d->addRefreshItem(directoryUrl, oldRootItem, fileitem);
+        } else {
+            directoryUrl.setPath(directoryUrl.directory());
+            kdl->d->addRefreshItem(directoryUrl, oldItem, fileitem);
         }
-        KUrl directoryUrl(oldItem.url());
-        directoryUrl.setPath(directoryUrl.directory());
-        kdl->d->addRefreshItem(directoryUrl, oldItem, fileitem);
         listersToRefresh.insert(kdl);
     }
     return listersToRefresh;
@@ -1072,6 +1059,7 @@
             // twice, otherwise, so that both views manage to recognize the item.
             // 2) with kio_ftp we can only know that something is a symlink when
             // listing the parent, so prefer that item, which has more info.
+            // Note that it gives a funky name() to the root item, rather than "." ;)
             dir->rootItem = itemForUrl(url);
             if (dir->rootItem.isNull())
                 dir->rootItem = KFileItem( *it, url, delayedMimeTypes, true  );
@@ -1391,7 +1379,6 @@
             for ( KFileItemList::iterator kit = dir->lstItems.begin(), kend = dir->lstItems.end();
                   kit != kend ; ++kit )
             {
-                aboutToRefreshItem(*kit);
                 const KFileItem oldItem = *kit;
 
                 const KUrl oldItemUrl ((*kit).url());
@@ -1596,8 +1583,6 @@
                 if (inPendingRemoteUpdates) {
                     pendingRemoteUpdates.erase(pru_it);
                 }
-                foreach ( KDirLister *kdl, listers )
-                    kdl->d->aboutToRefreshItem( *tmp );
 
                 //kDebug(7004) << "file changed:" << tmp->name();
 
@@ -1785,7 +1770,6 @@
         KFileItem *item = findByUrl( 0, u ); // search all items
         if ( item ) {
             // we need to refresh the item, because e.g. the permissions can have changed.
-            aboutToRefreshItem( *item );
             KFileItem oldItem = *item;
             item->refresh();
             listers |= emitRefreshItem( oldItem, *item );
@@ -2209,6 +2193,8 @@
     if (!isItemVisible(item))
         return; // No reason to continue... bailing out here prevents a mimetype scan.
 
+    //kDebug(7004) << "in" << directoryUrl << "item:" << item.url();
+
   if ( m_parent->matchesMimeFilter( item ) )
   {
     if ( !lstNewItems )
@@ -2241,13 +2227,10 @@
     addNewItem(directoryUrl, *kit);
 }
 
-void KDirLister::Private::aboutToRefreshItem( const KFileItem &item )
-{
-    refreshItemWasFiltered = !isItemVisible(item) || !m_parent->matchesMimeFilter(item);
-}
-
 void KDirLister::Private::addRefreshItem(const KUrl& directoryUrl, const KFileItem& oldItem, const KFileItem& item)
 {
+    const bool refreshItemWasFiltered = !isItemVisible(oldItem) ||
+                                        !m_parent->matchesMimeFilter(oldItem);
   if (isItemVisible(item) && m_parent->matchesMimeFilter(item)) {
     if ( refreshItemWasFiltered )
     {
diff -Naur kdelibs-4.3.4-orig/kio/kio/kdirlister_p.h kdelibs-4.3.4/kio/kio/kdirlister_p.h
--- kdelibs-4.3.4-orig/kio/kio/kdirlister_p.h	2009-12-15 14:02:45.796126996 +0200
+++ kdelibs-4.3.4/kio/kio/kdirlister_p.h	2009-12-15 14:08:06.530002709 +0200
@@ -60,7 +60,6 @@
     lstMimeFilteredItems = 0;
     lstRemoveItems = 0;
 
-    refreshItemWasFiltered = false;
     hasPendingChanges = false;
 
     window = 0;
@@ -81,7 +80,6 @@
   uint numJobs();
     void addNewItem(const KUrl& directoryUrl, const KFileItem& item);
     void addNewItems(const KUrl& directoryUrl, const KFileItemList& items);
-    void aboutToRefreshItem(const KFileItem& item);
     void addRefreshItem(const KUrl& directoryUrl, const KFileItem& oldItem, const KFileItem& item);
   void emitItems();
   void emitItemsDeleted(const KFileItemList &items);
@@ -125,7 +123,6 @@
 
   bool delayedMimeTypes:1;
 
-  bool refreshItemWasFiltered:1;
     bool hasPendingChanges:1; // i.e. settings != oldSettings
 
   bool autoErrorHandling:2;
@@ -289,8 +286,6 @@
   // helper for renameDir
   void emitRedirections( const KUrl &oldUrl, const KUrl &url );
 
-  void aboutToRefreshItem( const KFileItem& fileitem );
-
     /**
      * Emits refreshItem() in the directories that cared for oldItem.
      * The caller has to remember to call emitItems in the set of dirlisters returned
