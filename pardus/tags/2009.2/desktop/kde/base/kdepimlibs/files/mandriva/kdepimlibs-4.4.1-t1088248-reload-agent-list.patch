Index: kdepimlibs/akonadi/agentmanager_p.h
===================================================================
--- kdepimlibs/akonadi/agentmanager_p.h	(révision 1088247)
+++ kdepimlibs/akonadi/agentmanager_p.h	(révision 1088248)
@@ -40,7 +40,8 @@
 
   public:
     AgentManagerPrivate( AgentManager *parent )
-      : mParent( parent )
+      : mParent( parent ),
+        mManager( 0 )
     {
     }
 
@@ -75,6 +76,8 @@
     void synchronize( const AgentInstance& );
     void synchronizeCollectionTree( const AgentInstance& );
 
+    void serviceOwnderChanged( const QString &name, const QString &oldOwner, const QString &newOwner );
+
     AgentType fillAgentType( const QString &identifier ) const;
     AgentInstance fillAgentInstance( const QString &identifier ) const;
     AgentInstance fillAgentInstanceLight( const QString &identifier ) const;
Index: kdepimlibs/akonadi/agentmanager.cpp
===================================================================
--- kdepimlibs/akonadi/agentmanager.cpp	(révision 1088247)
+++ kdepimlibs/akonadi/agentmanager.cpp	(révision 1088248)
@@ -22,6 +22,7 @@
 
 #include "agenttype_p.h"
 #include "agentinstance_p.h"
+#include <akonadi/private/protocol_p.h>
 
 #include "collection.h"
 
@@ -263,6 +264,13 @@
   return instance;
 }
 
+void AgentManagerPrivate::serviceOwnderChanged( const QString &service, const QString &oldOwner, const QString &newOwner )
+{
+  Q_UNUSED( newOwner );
+  if ( service == QLatin1String( AKONADI_DBUS_CONTROL_SERVICE ) && oldOwner.isEmpty() )
+    readAgentTypes();
+}
+
 AgentManager* AgentManagerPrivate::mSelf = 0;
 
 AgentManager::AgentManager()
@@ -310,6 +318,8 @@
       }
     }
   }
+
+  connect( QDBusConnection::sessionBus().interface(), SIGNAL(serviceOwnerChanged(QString,QString,QString)), SLOT(serviceOwnerChanged(QString,QString,QString)) );
 }
 
 // @endcond
