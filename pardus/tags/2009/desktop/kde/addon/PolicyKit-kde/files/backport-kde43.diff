diff -Naru PolicyKit-kde-orig/cmake/modules/FindPolkitQt.cmake PolicyKit-kde/cmake/modules/FindPolkitQt.cmake
--- PolicyKit-kde-orig/cmake/modules/FindPolkitQt.cmake	1970-01-01 02:00:00.000000000 +0200
+++ PolicyKit-kde/cmake/modules/FindPolkitQt.cmake	2009-05-17 01:57:23.122175346 +0300
@@ -0,0 +1,85 @@
+# - Try to find Polkit-qt
+# Once done this will define
+#
+#  POLKITQT_FOUND - system has Polkit-qt
+#  POLKITQT_INCLUDE_DIR - the Polkit-qt include directory
+#  POLKITQT_LIBRARIES - Link these to use all Polkit-qt libs
+#  POLKITQT_CORE_LIBRARY
+#  POLKITQT_GUI_LIBRARY
+#  POLKITQT_DEFINITIONS - Compiler switches required for using Polkit-qt
+
+# Copyright (c) 2008, Adrien Bustany, <madcat@mymadcat.com>
+# Copyright (c) 2009, Daniel Nicoletti, <dantti85-pk@yahoo.com.br>
+# Copyright (c) 2009, Dario Freddi, <drf54321@gmail.com>
+# Copyright (c) 2009, Michal Malek, <michalm@jabster.pl>
+#
+# Redistribution and use is allowed according to the terms of the GPLv2+ license.
+
+if (POLKITQT_INCLUDE_DIR AND POLKITQT_LIB)
+    set(POLKITQT_FIND_QUIETLY TRUE)
+endif (POLKITQT_INCLUDE_DIR AND POLKITQT_LIB)
+
+include(FindPkgConfig)
+
+if (NOT POLKITQT_MIN_VERSION)
+  set(POLKITQT_MIN_VERSION "0.9.0")
+endif (NOT POLKITQT_MIN_VERSION)
+
+pkg_search_module( POLKITQT REQUIRED polkit-qt )
+
+if (POLKITQT_FOUND)
+    if (POLKITQT_VERSION VERSION_LESS POLKITQT_MIN_VERSION)
+        message(STATUS "Found Polkit-Qt release < ${POLKITQT_MIN_VERSION}")
+        message(STATUS "You need Polkit-Qt version ${POLKITQT_MIN_VERSION} or newer to compile this component")
+        set(POLKITQT_FOUND FALSE)
+        return()
+    else (POLKITQT_VERSION VERSION_LESS POLKITQT_MIN_VERSION)
+        message(STATUS "Found Polkit-Qt release >= ${POLKITQT_MIN_VERSION}")
+    endif (POLKITQT_VERSION VERSION_LESS POLKITQT_MIN_VERSION)
+else (POLKITQT_FOUND)
+    set(POLKITQT_FOUND FALSE)
+    message(STATUS "Cannot find Polkit-Qt library!")
+    return()
+endif (POLKITQT_FOUND)
+
+
+# find_path( POLKITQT_INCLUDE_DIR PolicyKit/policykit-qt/Polkit-qt )
+find_path( POLKITQT_INCLUDE_DIR PolicyKit/polkit-qt/ )
+
+find_library( POLKITQT_CORE_LIBRARY NAMES polkit-qt-core )
+find_library( POLKITQT_GUI_LIBRARY NAMES polkit-qt-gui )
+
+if (POLKITQT_INCLUDE_DIR AND POLKITQT_CORE_LIBRARY AND POLKITQT_GUI_LIBRARY)
+   set(POLKITQT_FOUND TRUE)
+else (POLKITQT_INCLUDE_DIR AND POLKITQT_CORE_LIBRARY AND POLKITQT_GUI_LIBRARY)
+   set(POLKITQT_FOUND FALSE)
+endif (POLKITQT_INCLUDE_DIR AND POLKITQT_CORE_LIBRARY AND POLKITQT_GUI_LIBRARY)
+
+set(POLKITQT_LIBRARIES ${POLKITQT_CORE_LIBRARY} ${POLKITQT_GUI_LIBRARY})
+
+set(POLKITQT_INCLUDE_DIR ${POLKITQT_INCLUDE_DIR}/PolicyKit/polkit-qt ${POLKITQT_INCLUDE_DIR}/PolicyKit/)
+
+set(POLICY_FILES_INSTALL_DIR ${POLKITQT_PREFIX}/share/PolicyKit/policy/)
+
+if (POLKITQT_FOUND)
+  if (NOT POLKITQT_FIND_QUIETLY)
+    message(STATUS "Found Polkit-Qt: ${POLKITQT_LIBRARIES}")
+  endif (NOT POLKITQT_FIND_QUIETLY)
+else (POLKITQT_FOUND)
+  if (POLKITQT_FIND_REQUIRED)
+    message(FATAL_ERROR "Could NOT find Polkit-Qt")
+  endif (POLKITQT_FIND_REQUIRED)
+endif (POLKITQT_FOUND)
+
+mark_as_advanced(POLKITQT_INCLUDE_DIR POLKITQT_LIB)
+
+macro(dbus_add_activation_system_service _sources)
+    pkg_search_module( DBUS dbus-1 )
+    foreach (_i ${_sources})
+        get_filename_component(_service_file ${_i} ABSOLUTE)
+        string(REGEX REPLACE "\\.service.*$" ".service" _output_file ${_i})
+        set(_target ${CMAKE_CURRENT_BINARY_DIR}/${_output_file})
+        configure_file(${_service_file} ${_target})
+        install(FILES ${_target} DESTINATION ${DBUS_PREFIX}/share/dbus-1/system-services )
+    endforeach (_i ${ARGN})
+endmacro(dbus_add_activation_system_service _sources)
diff -Naru PolicyKit-kde-orig/cmake/modules/PkgConfigGetVar.cmake PolicyKit-kde/cmake/modules/PkgConfigGetVar.cmake
--- PolicyKit-kde-orig/cmake/modules/PkgConfigGetVar.cmake	1970-01-01 02:00:00.000000000 +0200
+++ PolicyKit-kde/cmake/modules/PkgConfigGetVar.cmake	2009-05-17 01:45:00.250306251 +0300
@@ -0,0 +1,32 @@
+include(UsePkgConfig)
+ 
+MACRO(PKGCONFIG_GETVAR _package _var _output_variable)
+  SET(${_output_variable})
+ 
+  # if pkg-config has been found
+  IF(PKGCONFIG_EXECUTABLE)
+ 
+    EXEC_PROGRAM(${PKGCONFIG_EXECUTABLE} ARGS ${_package} --exists RETURN_VALUE _return_VALUE OUTPUT_VARIABLE _pkgconfigDevNull )
+ 
+    # and if the package of interest also exists for pkg-config, then get the information
+    IF(NOT _return_VALUE)
+ 
+      EXEC_PROGRAM(${PKGCONFIG_EXECUTABLE} ARGS ${_package} --variable ${_var} OUTPUT_VARIABLE ${_output_variable} )
+ 
+    ENDIF(NOT _return_VALUE)
+ 
+  ENDIF(PKGCONFIG_EXECUTABLE)
+ 
+ENDMACRO(PKGCONFIG_GETVAR _package _var _output_variable)
+ 
+macro(dbus_add_activation_service _sources)
+    #PKGCONFIG_GETVAR(dbus-1 session_bus_services_dir _install_dir)
+    foreach (_i ${_sources})
+        get_filename_component(_service_file ${_i} ABSOLUTE)
+        string(REGEX REPLACE "\\.service.*$" ".service" _output_file ${_i})
+        set(_target ${CMAKE_CURRENT_BINARY_DIR}/${_output_file})
+        configure_file(${_service_file} ${_target})
+        install(FILES ${_target} DESTINATION ${DBUS_SERVICES_INSTALL_DIR} )
+        #install(FILES ${_target} DESTINATION ${_install_dir})
+    endforeach (_i ${ARGN})
+endmacro(dbus_add_activation_service _sources) 
diff -Naru PolicyKit-kde-orig/CMakeLists.txt PolicyKit-kde/CMakeLists.txt
--- PolicyKit-kde-orig/CMakeLists.txt	2009-03-28 14:58:08.920726000 +0300
+++ PolicyKit-kde/CMakeLists.txt	2009-05-17 02:01:32.143971945 +0300
@@ -1,7 +1,17 @@
+project (PolicyKit-kde)
+
+set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules")
+
+find_package(KDE4 REQUIRED)
+include (KDE4Defaults)
+include (FindPkgConfig)
+
 pkg_check_modules (POLKIT polkit>=0.8)
 pkg_check_modules (POLKITDBUS polkit-dbus>=0.8)
 pkg_check_modules (POLKITGRANT polkit-grant>=0.8)
 
+find_package(PolkitQt)
+
 if (POLKIT_FOUND AND POLKITDBUS_FOUND AND POLKITGRANT_FOUND AND POLKITQT_FOUND)
    include_directories(
       ${POLKIT_INCLUDE_DIRS}
@@ -9,6 +19,9 @@
       ${POLKITQT_INCLUDE_DIR}
     )
 
+  add_definitions(${QT_DEFINITIONS} ${KDE4_DEFINITIONS})
+  include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${KDE4_INCLUDES})
+
   add_subdirectory(manager)
   add_subdirectory(services)
   add_subdirectory(authorization)
