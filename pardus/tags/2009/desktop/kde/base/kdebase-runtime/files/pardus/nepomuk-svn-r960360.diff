Index: services/strigi/eventmonitor.h
===================================================================
--- services/strigi/eventmonitor.h	(revision 960359)
+++ nepomuk/services/strigi/eventmonitor.h	(revision 960360)
@@ -42,7 +42,6 @@
         void slotPowerManagementStatusChanged( bool conserveResources );
         void slotCheckAvailableSpace();
         void slotIndexingStopped();
-        void slotDirDirty( const QString& );
 
     private:
         enum {
Index: services/strigi/filesystemwatcher.cpp
===================================================================
--- services/strigi/filesystemwatcher.cpp	(revision 960359)
+++ nepomuk/services/strigi/filesystemwatcher.cpp	(revision 960360)
@@ -68,6 +68,7 @@
 
     void start( const QDateTime& startTime );
     void stop();
+    void suspend( bool );
     void run();
 
     void buildFolderCache( uint mTime );
@@ -77,10 +78,15 @@
     void updateChildrenCache( const QString& parentPath, FolderEntry& parentEntry, bool signalNewEntries );
     void checkFolder( const QString& path, FolderEntry& folder );
 
+    // waits if suspended, returns false if stopped
+    bool continueChecking();
+
     QDateTime m_startTime;
     QWaitCondition m_updateWaiter;
-    QMutex m_stoppedMutex;
+    QMutex m_statusMutex;
+    QWaitCondition m_statusWaiter;
     bool m_stopped;
+    bool m_suspended;
 
     FileSystemWatcher* q;
 };
@@ -96,12 +102,36 @@
 
 void FileSystemWatcher::Private::stop()
 {
-    QMutexLocker lock( &m_stoppedMutex );
+    QMutexLocker lock( &m_statusMutex );
     m_stopped = true;
     m_updateWaiter.wakeAll();
+    m_statusWaiter.wakeAll();
 }
 
 
+void FileSystemWatcher::Private::suspend( bool suspend )
+{
+    if ( suspend != m_suspended ) {
+        kDebug() << suspend;
+        QMutexLocker lock( &m_statusMutex );
+        m_suspended = suspend;
+        if ( !suspend )
+            m_statusWaiter.wakeAll();
+    }
+}
+
+
+bool FileSystemWatcher::Private::continueChecking()
+{
+    QMutexLocker lock( &m_statusMutex );
+    if ( m_suspended && !m_stopped ) {
+        kDebug() << "waiting";
+        m_statusWaiter.wait( &m_statusMutex );
+    }
+    return !m_stopped;
+}
+
+
 void FileSystemWatcher::Private::run()
 {
     buildFolderCache( m_startTime.toTime_t() );
@@ -115,6 +145,12 @@
             return;
         }
 
+        kDebug() << "woke up";
+
+        // check if we have been stopped
+        if ( !continueChecking() )
+            return;
+
         // check all folders
         status = Checking;
         emit q->statusChanged( Checking );
@@ -123,8 +159,7 @@
         emit q->statusChanged( Idle );
 
         // check if we have been stopped
-        QMutexLocker lock( &m_stoppedMutex );
-        if ( m_stopped )
+        if ( !continueChecking() )
             return;
     }
 }
@@ -169,6 +204,7 @@
 
 void FileSystemWatcher::Private::checkFolders()
 {
+    kDebug();
     for( QHash<QString, FolderEntry>::iterator it = cache.begin();
          it != cache.end(); ++it ) {
         checkFolder( it.key(), it.value() );
@@ -192,6 +228,10 @@
         for( QHash<QString, FolderEntry>::iterator it = entry.children.begin();
              it != entry.children.end(); ++it ) {
             checkFolder( path + '/' + it.key(), it.value() );
+
+            // wait in case we are suspended
+            if ( !continueChecking() )
+                return;
         }
 
         // update in case folders have been created
@@ -231,6 +271,18 @@
 }
 
 
+void FileSystemWatcher::suspend()
+{
+    d->suspend( true );
+}
+
+
+void FileSystemWatcher::resume()
+{
+    d->suspend( false );
+}
+
+
 QStringList FileSystemWatcher::folders() const
 {
     return d->folders;
Index: services/strigi/filesystemwatcher.h
===================================================================
--- services/strigi/filesystemwatcher.h	(revision 960359)
+++ nepomuk/services/strigi/filesystemwatcher.h	(revision 960360)
@@ -68,6 +68,9 @@
 
     void stop();
 
+    void suspend();
+    void resume();
+
 Q_SIGNALS:
     /**
      * Emitted if a folder is dirty, i.e. its contents
Index: services/strigi/systray.cpp
===================================================================
--- services/strigi/systray.cpp	(revision 960359)
+++ nepomuk/services/strigi/systray.cpp	(revision 960360)
@@ -39,7 +39,7 @@
     m_suspendResumeAction->setCheckedState( KGuiItem( i18n( "Suspend Strigi Indexing" ) ) );
     m_suspendResumeAction->setToolTip( i18n( "Suspend or resume the Strigi file indexer manually" ) );
     connect( m_suspendResumeAction, SIGNAL( toggled( bool ) ),
-             m_service->indexScheduler(), SLOT( setSuspended( bool ) ) );
+             m_service, SLOT( setSuspended( bool ) ) );
 
     KAction* configAction = new KAction( menu );
     configAction->setText( i18n( "Configure Strigi" ) );
Index: services/strigi/strigiservice.cpp
===================================================================
--- services/strigi/strigiservice.cpp	(revision 960359)
+++ nepomuk/services/strigi/strigiservice.cpp	(revision 960360)
@@ -143,6 +143,14 @@
 }
 
 
+void Nepomuk::StrigiService::slotDirDirty( const QString& path )
+{
+    if ( StrigiServiceConfig::self()->shouldFolderBeIndexed( path ) ) {
+        m_indexScheduler->updateDir( path );
+    }
+}
+
+
 QString Nepomuk::StrigiService::userStatusString() const
 {
     bool indexing = m_indexScheduler->isIndexing();
@@ -160,6 +168,19 @@
 }
 
 
+void Nepomuk::StrigiService::setSuspended( bool suspend )
+{
+    if ( suspend ) {
+        m_indexScheduler->suspend();
+        m_fsWatcher->suspend();
+    }
+    else {
+        m_indexScheduler->resume();
+        m_fsWatcher->resume();
+    }
+}
+
+
 #include <kpluginfactory.h>
 #include <kpluginloader.h>
 
Index: services/strigi/strigiservice.h
===================================================================
--- services/strigi/strigiservice.h	(revision 960359)
+++ nepomuk/services/strigi/strigiservice.h	(revision 960360)
@@ -52,9 +52,11 @@
          * \return A user readable status string
          */
         QString userStatusString() const;
+        void setSuspended( bool );
 
     private Q_SLOTS:
         void updateWatches();
+        void slotDirDirty( const QString& );
 
     private:
         void updateStrigiConfig();
Index: services/strigi/eventmonitor.cpp
===================================================================
--- services/strigi/eventmonitor.cpp	(revision 960359)
+++ nepomuk/services/strigi/eventmonitor.cpp	(revision 960360)
@@ -90,14 +90,6 @@
 }
 
 
-void Nepomuk::EventMonitor::slotDirDirty( const QString& path )
-{
-    if ( StrigiServiceConfig::self()->shouldFolderBeIndexed( path ) ) {
-        m_indexScheduler->updateDir( path );
-    }
-}
-
-
 void Nepomuk::EventMonitor::slotPowerManagementStatusChanged( bool conserveResources )
 {
     if ( !conserveResources && m_pauseState == PausedDueToPowerManagement ) {
Index: services/strigi/strigiserviceadaptor.cpp
===================================================================
--- services/strigi/strigiserviceadaptor.cpp	(revision 960359)
+++ nepomuk/services/strigi/strigiserviceadaptor.cpp	(revision 960360)
@@ -74,14 +74,14 @@
 void Nepomuk::StrigiServiceAdaptor::resume()
 {
     // handle method call org.kde.nepomuk.Strigi.resume
-    m_service->indexScheduler()->resume();
+    m_service->setSuspended( false );
 }
 
 
 void Nepomuk::StrigiServiceAdaptor::suspend()
 {
     // handle method call org.kde.nepomuk.Strigi.suspend
-    m_service->indexScheduler()->suspend();
+    m_service->setSuspended( true );
 }
 
 
