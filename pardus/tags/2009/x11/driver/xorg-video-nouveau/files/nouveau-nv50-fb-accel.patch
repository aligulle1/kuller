From a858619710e3eb53f188fb8e5eb53d256bde119f Mon Sep 17 00:00:00 2001
From: Ben Skeggs <skeggsb@gmail.com>
Date: Mon, 13 Apr 2009 19:30:38 +1000
Subject: [PATCH 4/8] nv50/f11: accelerate front-buffer rendering, linear shadow for scanout

---
 src/Makefile.am          |    1 +
 src/drmmode_display.c    |    8 +-
 src/nouveau_exa.c        |   37 ++++--
 src/nv50_randr.c         |    2 +-
 src/nv50_shadow_damage.c |  306 ++++++++++++++++++++++++++++++++++++++++++++++
 src/nv_dri.c             |    2 +-
 src/nv_driver.c          |   40 ++++++-
 src/nv_proto.h           |    4 +
 src/nv_shadow.c          |    8 +-
 src/nv_type.h            |    4 +
 10 files changed, 389 insertions(+), 23 deletions(-)
 create mode 100644 src/nv50_shadow_damage.c

diff --git a/src/Makefile.am b/src/Makefile.am
index 29253a6..0c9e4e9 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -81,6 +81,7 @@ nouveau_drv_la_SOURCES = \
 			 nv50_xv.c \
 			 nv50_texture.h \
 			 nv50reg.h \
+			 nv50_shadow_damage.c \
 			 nouveau_crtc.h \
 			 nouveau_output.h \
 			 nouveau_connector.h \
diff --git a/src/drmmode_display.c b/src/drmmode_display.c
index b05771a..deed5d6 100644
--- a/src/drmmode_display.c
+++ b/src/drmmode_display.c
@@ -216,8 +216,8 @@ drmmode_fb_copy_sw(ScrnInfoPtr pScrn, drmmode_ptr drmmode, int dst_id,
 	}
 	src = (void *)req.vaddr;
 	
-	nouveau_bo_map(pNv->FB, NOUVEAU_BO_WR);
-	dst = pNv->FB->map;
+	nouveau_bo_map(pNv->scanout, NOUVEAU_BO_WR);
+	dst = pNv->scanout->map;
 	dst += (y * fb->pitch) + (x * (fb->bpp >> 3));
 
 	h = fb->height;
@@ -227,7 +227,7 @@ drmmode_fb_copy_sw(ScrnInfoPtr pScrn, drmmode_ptr drmmode, int dst_id,
 		dst += pScrn->displayWidth * (pScrn->bitsPerPixel / 8);
 	}
 
-	nouveau_bo_unmap(pNv->FB);
+	nouveau_bo_unmap(pNv->scanout);
 	drmFree(fb);
 }
 
@@ -382,7 +382,7 @@ drmmode_set_mode_major(xf86CrtcPtr crtc, DisplayModePtr mode,
 		ret = drmModeAddFB(drmmode->fd,
 				   pScrn->virtualX, pScrn->virtualY,
 				   pScrn->depth, pScrn->bitsPerPixel,
-				   pitch, pNv->FB->handle, &drmmode->fb_id);
+				   pitch, pNv->scanout->handle, &drmmode->fb_id);
 		if (ret < 0) {
 			ErrorF("failed to add fb\n");
 			return FALSE;
diff --git a/src/nouveau_exa.c b/src/nouveau_exa.c
index 6d1c72e..437ded5 100644
--- a/src/nouveau_exa.c
+++ b/src/nouveau_exa.c
@@ -265,7 +265,8 @@ nouveau_exa_wait_marker(ScreenPtr pScreen, int marker)
 static Bool
 nouveau_exa_prepare_access(PixmapPtr ppix, int index)
 {
-	ScrnInfoPtr pScrn = xf86Screens[ppix->drawable.pScreen->myNum];
+	ScreenPtr pScreen = ppix->drawable.pScreen;
+	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
 	NVPtr pNv = NVPTR(pScrn);
 
 	if (pNv->exa_driver_pixmaps) {
@@ -275,20 +276,33 @@ nouveau_exa_prepare_access(PixmapPtr ppix, int index)
 			return FALSE;
 
 		ppix->devPrivate.ptr = map;
-		return TRUE;
+	} else
+	if (ppix == pScreen->GetScreenPixmap(pScreen)) {
+		nouveau_bo_map(pNv->scanout, NOUVEAU_BO_RDWR);
+		ppix->devPrivate.ptr = pNv->scanout->map;
+	} else {
+		/* force migration */
+		return FALSE;
 	}
 
-	return FALSE;
+	return TRUE;
 }
 
 static void
 nouveau_exa_finish_access(PixmapPtr ppix, int index)
 {
-	ScrnInfoPtr pScrn = xf86Screens[ppix->drawable.pScreen->myNum];
+	ScreenPtr pScreen = ppix->drawable.pScreen;
+	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
 	NVPtr pNv = NVPTR(pScrn);
 
-	if (pNv->exa_driver_pixmaps)
+	if (pNv->exa_driver_pixmaps) {
 		nouveau_exa_pixmap_unmap(ppix);
+	} else
+	if (ppix == pScreen->GetScreenPixmap(pScreen)) {
+		ppix->devPrivate.ptr = NULL;
+		nouveau_bo_unmap(pNv->scanout);
+		nv50_shadow_damage_frontbuffer_fallback(pScrn);
+	}
 }
 
 static Bool
@@ -393,8 +407,7 @@ nouveau_exa_pixmap_is_tiled(PixmapPtr ppix)
 		if (!nouveau_pixmap_bo(ppix)->tiled)
 			return false;
 	} else
-	if (pNv->Architecture < NV_ARCH_50 ||
-	    exaGetPixmapOffset(ppix) < pNv->EXADriverPtr->offScreenBase)
+	if (pNv->Architecture < NV_ARCH_50)
 		return false;
 
 	return true;
@@ -406,7 +419,7 @@ nouveau_exa_pixmap_map(PixmapPtr ppix)
 	struct nouveau_bo *bo = nouveau_pixmap_bo(ppix);
 	unsigned delta = nouveau_pixmap_offset(ppix);
 
-	if (bo->tiled) {
+	if (NVPTR(xf86Screens[ppix->drawable.pScreen->myNum])->GART && bo->tiled) {
 		struct nouveau_pixmap *nvpix = nouveau_pixmap(ppix);
 
 		nvpix->map_refcount++;
@@ -432,7 +445,7 @@ nouveau_exa_pixmap_unmap(PixmapPtr ppix)
 {
 	struct nouveau_bo *bo = nouveau_pixmap_bo(ppix);
 
-	if (bo->tiled) {
+	if (NVPTR(xf86Screens[ppix->drawable.pScreen->myNum])->GART && bo->tiled) {
 		struct nouveau_pixmap *nvpix = nouveau_pixmap(ppix);
 
 		if (--nvpix->map_refcount)
@@ -617,6 +630,12 @@ nouveau_exa_init(ScreenPtr pScreen)
 		exa->maxY = 2048;
 	}
 
+	/* Needed for frontbuffer fallbacks (to ensure it accesses the linear fb). */
+	if (pNv->Architecture >= NV_ARCH_50) {
+		exa->PrepareAccess = nouveau_exa_prepare_access;
+		exa->FinishAccess = nouveau_exa_finish_access;
+	}
+
 	exa->MarkSync = nouveau_exa_mark_sync;
 	exa->WaitMarker = nouveau_exa_wait_marker;
 
diff --git a/src/nv50_randr.c b/src/nv50_randr.c
index 7a88f24..e006b38 100644
--- a/src/nv50_randr.c
+++ b/src/nv50_randr.c
@@ -117,7 +117,7 @@ nv50_crtc_mode_set(xf86CrtcPtr crtc, DisplayModePtr mode, DisplayModePtr adjuste
 		nv_crtc->crtc->SetFB(nv_crtc->crtc, nv_crtc->shadow);
 		nv_crtc->crtc->SetFBOffset(nv_crtc->crtc, 0, 0);
 	} else {
-		nv_crtc->crtc->SetFB(nv_crtc->crtc, pNv->FB);
+		nv_crtc->crtc->SetFB(nv_crtc->crtc, pNv->scanout);
 		nv_crtc->crtc->SetFBOffset(nv_crtc->crtc, x, y);
 	}
 	nv_crtc->crtc->ModeSet(nv_crtc->crtc, mode);
diff --git a/src/nv50_shadow_damage.c b/src/nv50_shadow_damage.c
new file mode 100644
index 0000000..790b09c
--- /dev/null
+++ b/src/nv50_shadow_damage.c
@@ -0,0 +1,306 @@
+/*
+ * Copyright 2009 Maarten Maathuis
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
+ * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+/**
+ * This file serves to process all damage to the frontbuffer pixmap.
+ * This is needed until we can/have:
+ * - Tiled frontbufffer support.
+ * - Working wfb support.
+ * - Widespread wfb exa support.
+ */
+
+#include "nv_include.h"
+#include "damagestr.h"
+
+/* When driver allocated pixmaps are used we can easily fold this back into exa code. */
+
+static void
+nv50_shadow_damage_blit_state_emit(struct nouveau_channel *chan)
+{
+	ScrnInfoPtr pScrn = chan->user_private;
+	NVPtr pNv = NVPTR(pScrn);
+	PixmapPtr ppix = pNv->pspix;
+	struct nouveau_bo *bo = nouveau_pixmap_bo(ppix);
+	struct nouveau_grobj *eng2d = pNv->Nv2D;
+	unsigned delta = nouveau_pixmap_offset(ppix), fmt;
+
+	WAIT_RING (chan, 27 + 13);
+
+	switch (ppix->drawable.depth) {
+	case 8 : fmt = NV50_2D_SRC_FORMAT_8BPP; break;
+	case 15: fmt = NV50_2D_SRC_FORMAT_15BPP; break;
+	case 16: fmt = NV50_2D_SRC_FORMAT_16BPP; break;
+	case 24: fmt = NV50_2D_SRC_FORMAT_24BPP; break;
+	case 32: fmt = NV50_2D_SRC_FORMAT_32BPP; break;
+	default:
+		 xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			    "Unknown surface format for bpp=%d\n",
+			    ppix->drawable.depth);
+		 return;
+	}
+
+	/* tiled source */
+	BEGIN_RING(chan, eng2d, NV50_2D_SRC_FORMAT, 5);
+	OUT_RING  (chan, fmt);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, 1);
+	OUT_RING  (chan, 0);
+
+	BEGIN_RING(chan, eng2d, NV50_2D_SRC_WIDTH, 4);
+	OUT_RING  (chan, ppix->drawable.width);
+	OUT_RING  (chan, ppix->drawable.height);
+	OUT_RELOCh(chan, bo, delta, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+	OUT_RELOCl(chan, bo, delta, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+
+	/* untiled destination */
+	BEGIN_RING(chan, eng2d, NV50_2D_DST_FORMAT, 2);
+	OUT_RING  (chan, fmt);
+	OUT_RING  (chan, 1);
+	BEGIN_RING(chan, eng2d, NV50_2D_DST_PITCH, 5);
+	OUT_RING  (chan, NOUVEAU_ALIGN(pScrn->virtualX, 64) *
+			 (pScrn->bitsPerPixel >> 3));
+	OUT_RING  (chan, ppix->drawable.width);
+	OUT_RING  (chan, ppix->drawable.height);
+	OUT_RELOCh(chan, pNv->scanout, 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+	OUT_RELOCl(chan, pNv->scanout, 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+
+	BEGIN_RING(chan, eng2d, NV50_2D_CLIP_X, 4);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, ppix->drawable.width);
+	OUT_RING  (chan, ppix->drawable.height);
+	BEGIN_RING(chan, eng2d, NV50_2D_OPERATION, 1);
+	OUT_RING  (chan, NV50_2D_OPERATION_SRCCOPY);
+}
+
+static void
+nv50_shadow_damage_blit(PixmapPtr ppix, RegionPtr pRegion)
+{
+	ScrnInfoPtr pScrn = xf86Screens[ppix->drawable.pScreen->myNum];
+	NVPtr pNv = NVPTR(pScrn);
+	struct nouveau_channel *chan = pNv->chan;
+	struct nouveau_grobj *eng2d = pNv->Nv2D;
+	BoxPtr pbox;
+	int nbox;
+
+	pbox = REGION_RECTS(pRegion);
+	nbox = REGION_NUM_RECTS(pRegion);
+	if (!nbox)
+		return;
+
+	pNv->pspix = ppix;
+	chan->flush_notify = nv50_shadow_damage_blit_state_emit;
+	chan->flush_notify(chan);
+	while (nbox--) {
+		WAIT_RING (chan, 13);
+		BEGIN_RING(chan, eng2d, NV50_2D_BLIT_DST_X, 12);
+		OUT_RING  (chan, pbox->x1);
+		OUT_RING  (chan, pbox->y1);
+		OUT_RING  (chan, pbox->x2 - pbox->x1);
+		OUT_RING  (chan, pbox->y2 - pbox->y1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, 1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, 1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, pbox->x1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, pbox->y1);
+
+		pbox++;
+	}
+	chan->flush_notify = NULL;
+}
+
+/* For frontbuffer fallbacks. */
+static void
+nv50_shadow_damage_blit_back_state_emit(struct nouveau_channel *chan)
+{
+	ScrnInfoPtr pScrn = chan->user_private;
+	NVPtr pNv = NVPTR(pScrn);
+	PixmapPtr ppix = pNv->pdpix;
+	struct nouveau_grobj *eng2d = pNv->Nv2D;
+	struct nouveau_bo *bo = nouveau_pixmap_bo(ppix);
+	unsigned delta = nouveau_pixmap_offset(ppix), fmt;
+
+	WAIT_RING (chan, 27 + 13);
+
+	switch (ppix->drawable.depth) {
+	case 8 : fmt = NV50_2D_SRC_FORMAT_8BPP; break;
+	case 15: fmt = NV50_2D_SRC_FORMAT_15BPP; break;
+	case 16: fmt = NV50_2D_SRC_FORMAT_16BPP; break;
+	case 24: fmt = NV50_2D_SRC_FORMAT_24BPP; break;
+	case 32: fmt = NV50_2D_SRC_FORMAT_32BPP; break;
+	default:
+		 xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			    "Unknown surface format for bpp=%d\n",
+			    ppix->drawable.depth);
+		 return;
+	}
+
+	/* untiled source */
+	BEGIN_RING(chan, eng2d, NV50_2D_SRC_FORMAT, 2);
+	OUT_RING  (chan, fmt);
+	OUT_RING  (chan, 1);
+	BEGIN_RING(chan, eng2d, NV50_2D_SRC_PITCH, 5);
+	OUT_RING  (chan, NOUVEAU_ALIGN(pScrn->virtualX, 64) *
+			 (pScrn->bitsPerPixel >> 3));
+	OUT_RING  (chan, ppix->drawable.width);
+	OUT_RING  (chan, ppix->drawable.height);
+	OUT_RELOCh(chan, pNv->scanout, 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+	OUT_RELOCl(chan, pNv->scanout, 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+
+	/* tiled destination */
+	BEGIN_RING(chan, eng2d, NV50_2D_DST_FORMAT, 5);
+	OUT_RING  (chan, fmt);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, 1);
+	OUT_RING  (chan, 0);
+
+	BEGIN_RING(chan, eng2d, NV50_2D_DST_WIDTH, 4);
+	OUT_RING  (chan, ppix->drawable.width);
+	OUT_RING  (chan, ppix->drawable.height);
+	OUT_RELOCh(chan, bo, delta, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+	OUT_RELOCl(chan, bo, delta, NOUVEAU_BO_VRAM | NOUVEAU_BO_WR);
+
+	BEGIN_RING(chan, eng2d, NV50_2D_CLIP_X, 4);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, 0);
+	OUT_RING  (chan, ppix->drawable.width);
+	OUT_RING  (chan, ppix->drawable.height);
+	BEGIN_RING(chan, eng2d, NV50_2D_OPERATION, 1);
+	OUT_RING  (chan, NV50_2D_OPERATION_SRCCOPY);
+}
+
+static void
+nv50_shadow_damage_blit_back(PixmapPtr ppix, RegionPtr pRegion)
+{
+	ScrnInfoPtr pScrn = xf86Screens[ppix->drawable.pScreen->myNum];
+	NVPtr pNv = NVPTR(pScrn);
+	struct nouveau_channel *chan = pNv->chan;
+	struct nouveau_grobj *eng2d = pNv->Nv2D;
+	BoxPtr pbox;
+	int nbox;
+
+	pbox = REGION_RECTS(pRegion);
+	nbox = REGION_NUM_RECTS(pRegion);
+	if (!nbox)
+		return;
+
+	pNv->pdpix = ppix;
+	chan->flush_notify = nv50_shadow_damage_blit_back_state_emit;
+	chan->flush_notify(chan);
+	while (nbox--) {
+		WAIT_RING (chan, 13);
+		BEGIN_RING(chan, eng2d, NV50_2D_BLIT_DST_X, 12);
+		OUT_RING  (chan, pbox->x1);
+		OUT_RING  (chan, pbox->y1);
+		OUT_RING  (chan, pbox->x2 - pbox->x1);
+		OUT_RING  (chan, pbox->y2 - pbox->y1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, 1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, 1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, pbox->x1);
+		OUT_RING  (chan, 0);
+		OUT_RING  (chan, pbox->y1);
+
+		pbox++;
+	}
+	chan->flush_notify = NULL;
+}
+
+static void
+nv50_shadow_damage_report(DamagePtr pDamage, RegionPtr pRegion, void *closure)
+{
+	PixmapPtr ppix = closure;
+
+	nv50_shadow_damage_blit(ppix, pRegion);
+}
+
+void
+nv50_shadow_damage_frontbuffer_fallback(ScrnInfoPtr pScrn)
+{
+	NVPtr pNv = NVPTR(pScrn);
+	ScreenPtr pScreen = pScrn->pScreen;
+	PixmapPtr ppix = NULL;
+	DamagePtr pDamage = pNv->screen_damage;
+
+	if (pNv->Architecture < NV_ARCH_50)
+		return;
+
+	ppix = pScreen->GetScreenPixmap(pScreen);
+	if (!ppix) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			"No screen pixmap.\n");
+		return;
+	}
+
+	/* Pending damage reflects the rendering currently being done. */
+	/* When exa calls finish access, damage hasn't flushed it yet. */
+	nv50_shadow_damage_blit_back(ppix, &pDamage->pendingDamage);
+}
+
+static void
+nv50_shadow_damage_destroy(DamagePtr pDamage, void *closure)
+{
+	PixmapPtr ppix = closure;
+	ScrnInfoPtr pScrn = xf86Screens[ppix->drawable.pScreen->myNum];
+	NVPtr pNv = NVPTR(pScrn);
+
+	pNv->screen_damage = NULL;
+}
+
+bool
+nv50_shadow_damage_create(ScrnInfoPtr pScrn)
+{
+	NVPtr pNv = NVPTR(pScrn);
+	ScreenPtr pScreen = pScrn->pScreen;
+	PixmapPtr ppix = NULL;
+
+	if (pNv->Architecture < NV_ARCH_50)
+		return false;
+
+	ppix = pScreen->GetScreenPixmap(pScreen);
+	if (!ppix) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			"No screen pixmap.\n");
+		return false;
+	}
+
+	pNv->screen_damage = DamageCreate(nv50_shadow_damage_report, nv50_shadow_damage_destroy, DamageReportRawRegion, true, pScreen, ppix);
+	if (!pNv->screen_damage) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+			"No screen damage\n");
+		return false;
+	}
+
+	/* We want the notification after submission. */
+	DamageSetReportAfterOp(pNv->screen_damage, true);
+
+	DamageRegister(&ppix->drawable, pNv->screen_damage);
+
+	return true;
+}
diff --git a/src/nv_dri.c b/src/nv_dri.c
index f1fe501..68284d2 100644
--- a/src/nv_dri.c
+++ b/src/nv_dri.c
@@ -335,7 +335,7 @@ Bool NVDRIFinishScreenInit(ScrnInfoPtr pScrn)
 	pNOUVEAUDRI->depth		= pScrn->depth;
 	pNOUVEAUDRI->bpp		= pScrn->bitsPerPixel;
 
-	ret = nouveau_bo_handle_get(pNv->FB, &pNOUVEAUDRI->front_offset);
+	ret = nouveau_bo_handle_get(pNv->scanout, &pNOUVEAUDRI->front_offset);
 	if (ret) {
 		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
 			   "[dri] unable to reference front buffer: %d\n", ret);
diff --git a/src/nv_driver.c b/src/nv_driver.c
index f7cfd3e..35cdd83 100644
--- a/src/nv_driver.c
+++ b/src/nv_driver.c
@@ -564,10 +564,11 @@ NVEnterVT(int scrnIndex, int flags)
 		/* Clear the framebuffer, we don't want to see garbage
 		 * on-screen up until X decides to draw something
 		 */
-		nouveau_bo_map(pNv->FB, NOUVEAU_BO_WR);
-		memset(pNv->FB->map, 0, NOUVEAU_ALIGN(pScrn->virtualX, 64) *
-		       pScrn->virtualY * (pScrn->bitsPerPixel >> 3));
-		nouveau_bo_unmap(pNv->FB);
+		nouveau_bo_map(pNv->scanout, NOUVEAU_BO_WR);
+		memset(pNv->scanout->map, 0,
+		       NOUVEAU_ALIGN(pScrn->virtualX, 64) * pScrn->virtualY *
+		       (pScrn->bitsPerPixel >> 3));
+		nouveau_bo_unmap(pNv->scanout);
 
 		if (pNv->Architecture == NV_ARCH_50) {
 			if (!NV50AcquireDisplay(pScrn))
@@ -1477,6 +1478,8 @@ NVMapMemSW(ScrnInfoPtr pScrn)
 		return FALSE;
 	pNv->GART = NULL;
 
+	nouveau_bo_ref(pNv->FB, &pNv->scanout);
+
 	ret = nouveau_bo_fake(&dev, Cursor0Offset,
 			      NOUVEAU_BO_VRAM | NOUVEAU_BO_PIN,
 			      64 * 64 * 4, pNv->VRAMMap + Cursor0Offset,
@@ -1628,6 +1631,25 @@ skip_fb:
 		   "at offset 0x%X\n",
 		   (uint32_t)(pNv->FB->size >> 20), (uint32_t) pNv->FB->offset);
 
+	/* Allocate linear scanout. */
+	if (!pNv->NoAccel && pNv->Architecture >= NV_ARCH_50) {
+		unsigned scanout_size;
+
+		scanout_size = NOUVEAU_ALIGN(pScrn->virtualX, 64);
+		scanout_size *= (pScrn->bitsPerPixel >> 3);
+		scanout_size *= pScrn->virtualY;
+
+		if (nouveau_bo_new(pNv->dev, NOUVEAU_BO_VRAM | NOUVEAU_BO_PIN |
+				   NOUVEAU_BO_MAP, 0, scanout_size,
+				   &pNv->scanout)) {
+			xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+				   "Failed to allocate scanout buffer\n");
+			return FALSE;
+		}
+	} else {
+		nouveau_bo_ref(pNv->FB, &pNv->scanout);
+	}
+
 	/* We don't need to allocate cursors / lut here if we're using
 	 * kernel modesetting
 	 **/
@@ -1700,6 +1722,7 @@ NVUnmapMem(ScrnInfoPtr pScrn)
 	}
 
 	nouveau_bo_ref(NULL, &pNv->FB);
+	nouveau_bo_ref(NULL, &pNv->scanout);
 	nouveau_bo_ref(NULL, &pNv->GART);
 	nouveau_bo_ref(NULL, &pNv->Cursor);
 	nouveau_bo_ref(NULL, &pNv->Cursor2);
@@ -2216,6 +2239,15 @@ NVSaveScreen(ScreenPtr pScreen, int mode)
 	bool on = xf86IsUnblank(mode);
 	int i;
 
+	/* This might seem strange, but we need an entry point after CreateScreenResources.
+	 * This happens to one of the few, if not the only place.
+	 * When we move to driver allocated pixmaps, we can move this.
+	 */
+	if (mode == SCREEN_SAVER_FORCER && pNv->Architecture == NV_ARCH_50 &&
+	    !pNv->NoAccel && !pNv->screen_damage &&
+	    !nv50_shadow_damage_create(pScrn))
+		return FALSE;
+
 	if (!pNv->randr12_enable)
 		return vgaHWSaveScreen(pScreen, mode);
 
diff --git a/src/nv_proto.h b/src/nv_proto.h
index 8a1a269..580233b 100644
--- a/src/nv_proto.h
+++ b/src/nv_proto.h
@@ -267,6 +267,10 @@ void nv50_xv_video_stop(ScrnInfoPtr, pointer, Bool);
 int nv50_xv_port_attribute_set(ScrnInfoPtr, Atom, INT32, pointer);
 int nv50_xv_port_attribute_get(ScrnInfoPtr, Atom, INT32 *, pointer);
 
+/* nv50_shadow_damage.c */
+bool nv50_shadow_damage_create(ScrnInfoPtr pScrn);
+void nv50_shadow_damage_frontbuffer_fallback(ScrnInfoPtr pScrn);
+
 /* To support EXA 2.0, 2.1 has this in the header */
 #ifndef exaMoveInPixmap
 extern void exaMoveInPixmap(PixmapPtr pPixmap);
diff --git a/src/nv_shadow.c b/src/nv_shadow.c
index ea1ba35..e15051c 100644
--- a/src/nv_shadow.c
+++ b/src/nv_shadow.c
@@ -38,9 +38,9 @@ NVRefreshArea(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
    
 	cpp = pScrn->bitsPerPixel >> 3;
 	FBPitch = pScrn->displayWidth * cpp;
-	max_height = pNv->FB->size/FBPitch;
+	max_height = pNv->scanout->size/FBPitch;
 
-	nouveau_bo_map(pNv->FB, NOUVEAU_BO_WR);
+	nouveau_bo_map(pNv->scanout, NOUVEAU_BO_WR);
 	while(num--) {
 		x1 = MAX(pbox->x1, 0);
 		y1 = MAX(pbox->y1, 0);
@@ -51,7 +51,7 @@ NVRefreshArea(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
 
 		if (width > 0 && height > 0) {
 			src = pNv->ShadowPtr + (y1 * pNv->ShadowPitch) + (x1 * cpp);
-			dst = pNv->FB->map + (y1 * FBPitch) + (x1 * cpp);
+			dst = pNv->scanout->map + (y1 * FBPitch) + (x1 * cpp);
 
 			while(height--) {
 				memcpy(dst, src, width);
@@ -62,5 +62,5 @@ NVRefreshArea(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
 
 		pbox++;
 	}
-	nouveau_bo_unmap(pNv->FB);
+	nouveau_bo_unmap(pNv->scanout);
 } 
diff --git a/src/nv_type.h b/src/nv_type.h
index 8af599a..b96d8cb 100644
--- a/src/nv_type.h
+++ b/src/nv_type.h
@@ -273,6 +273,7 @@ typedef struct _NVRec {
     /* Various pinned memory regions */
     struct nouveau_bo * FB;
     void *              FBMap;
+    struct nouveau_bo * scanout;
     //struct nouveau_bo * FB_old; /* for KMS */
     struct nouveau_bo * shadow[2]; /* for easy acces by exa */
     struct nouveau_bo * Cursor;
@@ -281,6 +282,9 @@ typedef struct _NVRec {
 
     struct nvbios	VBIOS;
     struct nouveau_bios_info	*vbios;
+
+    DamagePtr screen_damage; /* for NV50+ */
+
     Bool                NoAccel;
     Bool                HWCursor;
     Bool                FpScale;
-- 
1.6.2.2

